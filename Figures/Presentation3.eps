%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Presentation3 [Compatibility Mode].pdf
%%Creator: Adobe Acrobat 8.0
%%For: suresh_thummalapenta
%%CreationDate: 9/2/2009, 9:24:43 PM
%%BoundingBox: -49 49 307 356
%%HiResBoundingBox: -49 49 307 356
%%CropBox: -49 49 307 356
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: 
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 0 -1 1 0
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 4670 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c316 44.253921, Sun Oct 01 2006 17:14:39">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xap="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
   xap:CreateDate="2009-09-02T21:21:19Z"
   xap:CreatorTool="e-PDF Converter and Creator v2.1 - Build: Nov  1 2005"
   xap:ModifyDate="2009-09-02T21:24:26-04:00"
   xap:MetadataDate="2009-09-02T21:24:26-04:00"
   dc:format="application/pdf"
   pdf:Producer="e-PDF Converter and Creator (http://www.e-pdfconverter.com)"
   xapMM:DocumentID="uuid:2c93c441-c2ff-4bfc-9679-4f16bd62026b"
   xapMM:InstanceID="uuid:139d2e11-e68b-462d-a171-e66acc56dac8">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>ktaneja</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Microsoft PowerPoint - Presentation2 [Compatibility Mode]</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -356 translate
pgsv
[0 1 -1 0 307 0 ]ct
gsave
np
gsave
0 0 mo
0 356 li
307 356 li
307 0 li
cp
clp
[1 0 0 1 -72 0 ]ct
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
true set_gvm
%ADOBeginSubsetFont: HIBBAA+CourierNew Initial
ct_T42Dict begin
-0.191 -0.707 0.699 1.219
 256 array 0 1 255 {1 index exch /.notdef put} for  /HIBBAA+CourierNew
Type42DictBegin
[<00010000000c000c000c000c4f532f3200000000000000cc000000566376
7420a46b8843000001240000080e6670676dbec67c3e00000934000007c5
676c796600000000000040000000225a68656164cfcda073000010fc0000
0036686865610ac00c610000113400000024686d74780000000000001158
000000b46c6f6361000000000000120c000018a06d617870156a077c0000
2aac000000206e616d650000000000002acc0000001d70726570dda09e48
00002aec0000151267646972000000000000000000000000000100000190
000500000000000000000000000000000000000000000000000000000000
00000000000000000000000000080000000000000000000000000000f000
f0ff000000000000000000000000000100000000000004e700000492001b
04e7001e0362001e0000ffdf0000ffdf0000ffe2fe7e000004e70015fefd
000002d7000000cd000000cd0000000000000000006600cd012700cd00cd
00cd009600aa00cd005900cd008700870186011900cd00cd009300a900cd
007a008400940001000f007f0003002f015800ac002900cd00d9002b0056
0097009700f900cd001200c6007f00cdfff1004200d300540001000f0028
00c60097004200c4017d021d021f000200cd042500d301ff04eb011203a5
0076017f01f3035f0084009700cd00fe02bfff4900520085009c082cffae
00260040006d007c0091009d010f0122ff6effd90006001600290045ffa5
ffc80061006d00b100b801ad0350047dff9f00520053006e009200b4012e
046004c9fde3fe83ff6fffd2000c008900a6010b012102000200052aff57
001c0038003f005c00cb00cd00cd00cd01200429fdfffeddffb10006002b
00410052007f0091009100c200d000f1014401d304260500fe01ff1fffcb
ffda0007003e005c00950103010301100122014601ab021703cf03fa0005
001800470052005c00650067006f007200a700a700ac00b100ef01340135
01440244025d0288029502c30393047d047efefd007f00bb01000104012a
0140014b015301ab01d201d2021d0279037dfe0000060020002900430045
004c005d006d008f009600c800cd00cd00d900fd010101030166016f017d
019b01a001cd01e102c40354044804ebff66ff8400020002001200160021
0027003d00450054005900ae00b300b900cd00e10104011901220133013f
01440182024c027603340350035b037c039003a503d4045704aefe34feee
ff85ffa1ffbcffd6ffdbffed000200110022002d004b005300540058007b
0084009100a200ae00c100d700f201230142016e0182019401a201ad01ae
01bc01d601fe020d02ab0336039303b604010440049504c6fe11fea3feb8
feefff45ff59fffc0029006200830088009300a300a600a900b400c100df
0147014c0151015a0160016e0186018901a701c301ec0204025c02b50326
0371037a037b039503f50425047a04d50576fe5dfe93feb9ff30ff73ff85
ff88ffea0002000f00190037004a0054005e0069006e007000760078007b
007c007f00820084008500850085008d009100ad00b400b700bb00cd00e0
00ec00f50109010d010e011d013001300138013e014201580174018c0199
01a401e201e701f702010204022b0236024e0267028802a102c402d302e1
035403ac03bc03d303d30416044d0455046004a704ae05000511063d08cc
fbd9fcaffd98fd9afe02fe29fe5dff07ff1bff1cff47ffafffc3ffd9ffee
001e0020002c0038004e0056007c009000ac00b800b900cb00d000d000d9
00e500e700ef01050110011101240126014d015c0181018201860194019c
01a301a301a901ab01af01b801b801bc01bc01c001c501d001d601d701e0
01e501fb01fe01ff0226022f0236025c0266027b02a802bd02c302fe030b
031b03230326033c03650371037d038703a603ac03d203f103f7040e0413
0426043b0465049204ab04c104d904fb0547054d05770611068c068f00cd
00cd00cd00cd000000000000000000000000014502340266020201590001
000c007000b502c6022d005200cd00cd00cd00cd00cd00cd00cd00cd00cd
00cd00cd00cd00cd00cd00cd00cd00cd00cd00cd00cd00cd00cd00cd00cd
00cd00cd00cd00cd00cd00cd00cd00cd00cd00cd00cd00cd00cd00cd00cd
00cd00cd00cd008901f700c8014200e501fd001600890089008100e8012a
0157024301e600a600a20137019201a102030265008901c000a000a103ac
01d60283008c003f002e00eb003f00010268012e0188021c0066009102b3
00e3008200cd002700f1024700e300cd01f7021800cd03cd017000f801f2
018d00ef005200600215006701d2003801880144006c02290023007401cd
006e0000000005400401055b00000267000004e7049502ea029501ef0047
029f00cd00cd008c016100a0012900b400cd015b00af02df043604bd0037
00460021001a04950252020601790084009c020400a702c6005400b10058
004e00a90097005900a000830041003f0028007400430151000101f70109
001101890002005e00220089014400ab00ab01fd03fe00cd0046ffba0046
ffba00e80230008500950098000000b9002400aaff8e00be0162002d00b4
010a009c00e1004c03f404150000fff0041d0545ff02fe6200d8ff5100ca
0135011003de004800db018b00b3004800da0116009bff6cff3400e700cd
ff5900840084006800550541051e00610061026c00c107a006de063c0631
0601057a05640552054b054305370531052905210519050f050a04ef04dd
04d004be04a40482047a042e0415040c03de03cf03b10399038b036f034d
033f032e0326031d030402f902ee02e902dc02d802c002a9027f01b00000
ffdbffc8ff99ff50ff3dff37ff13fefefef5fec3feaefe9bfe95fe8efe80
fe70fe60fdc4fcddfcd3fcb1fca501f6fdd8ffa1ffc101cafefb00a60175
ff5aff4cfff6ffd9ff14ff93ff3dfed7018f0135012500fd00e500cc00c8
009300b400a400740058004b00400248011000fe00f500ed00e100d600cc
00b900a800890077006000560654004f006e002600d9008300cd00cd00cd
0065001200a70083000300a90012005c003f0095004c0022005c00020103
0127012700c400acffa10355008900b10000000000a702cf0120fea30027
0130016e010b014b00e3013e00ea00ea00b400b4fd9a00a800a806a700b9
00b906a900f5069d03fb009500b9008b02450511042f01fd00fd026f018d
ff5bfe5b007b007b00b904e500550000404c5857565554535251504f4e4a
493f3e3d3c3b3a3938373534333231302f2e2d2c2b2a2928272625242322
21201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a090807060504
030201002c4523466020b02660b004262348482d2c452346236120b02661
b004262348482d2c45234660b0206120b04660b004262348482d2c452346
2361b0206020b02661b02061b004262348482d2c45234660b0406120b066
60b004262348482d2c4523462361b0406020b02661b04061b00426234848
2d2c0110203c003c2d2c20452320b0cd442320b8015a51582320b08d4423
5920b0ed51582320b04d44235920b0042651582320b00d44235921212d2c
20204518684420b001602045b04676688a4560442d2c01b10b0a43234365
0a2d2c00b10a0b4323430b2d2c00b0172370b101173e01b0172370b10217
453ab10200080d2d2c45b01a234445b01923442d2c2045b00325456164b0
50515845441b2121592d2cb00143632362b0002342b00f2b2d2c2045b000
4360442d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8c
b8100062602b0c642364615c58b00361592d2c45b0112bb0172344b0177a
e4182d2c45b0112bb01723442d2cb01243588745b0112bb0172344b0177a
e41b038a45186920b01723448a8a8720b0a05158b0112bb0172344b0177a
e41b21b0177ae45959182d2c2d2cb0022546608a46b040618c482d2c0118
2f2d2c20b0032545b019234445b01a23444565234520b00325606a20b009
234223688a6a606120b01a8ab000527921b21a1a40b9ffe0001a45208a54
582321b03f1b235961441cb114008a5279b31940201945208a54582321b0
3f1b235961442d2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d43
23430b2d2cb10c0d432343650b2d2cb10e0f432343650b2d2cb110114323
43650b2d2c4b525845441b2121592d2c0120b003252349b04060b0206320
b000525823b002253823b002256538008a63381b212121212159012d2c4b
b06451584569b00943608a103a1b212121592d2c01b005251023208af500
b0016023edec2d2c01b005251023208af500b0016123edec2d2c01b00625
10f500edec2d2c20b001600110203c003c2d2c20b001610110203c003c2d
2cb02b2bb02a2a2d2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76b8
02cd23701020b802cd4520b0005058b00161593a2f182d2c21210c642364
8bb84000622d2c21b08051580c6423648bb82000621bb200402f2b59b002
602d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c
6423648bb84000626023212d2cb4000100000015b00826b00826b00826b0
08260f10161345683ab001162d2cb4000100000015b00826b00826b00826
b008260f1016134568653ab001162d2c4b53234b515a5820458a60441b21
21592d2c4b545820458a60441b2121592d2c4b53234b515a58381b212159
2d2c4b5458381b2121592d2cb0134358031b02592d2cb0134358021b0359
2d2c4b54b012435c5a58381b2121592d2cb012435c580cb00425b0042506
0c6423646164b807085158b00425b00425012046b01060482046b0106048
590a21211b2121592d2cb012435c580cb00425b00425060c6423646164b8
07085158b00425b00425012046b8fff060482046b8fff06048590a21211b
2121592d2c4b53234b515a58b03a2b1b2121592d2c4b53234b515a58b03b
2b1b2121592d2c4b53234b515ab012435c5a58381b2121592d2c0c8a034b
54b00426024b545a8a8a0ab012435c5a58381b2121592d2cb04e2bb00c25
b00925b00525b00d25b00e25b00925b01325b2160e552b20b00e60252320
b00f60252320b00f602523b00f602501105558d41b2159205820b0542a59
21213c18f02ff03cb0502b2d2cb00b25b00325b00b25b00525b00e25b00f
25b00e25b00d25b00925b01525b017251801103cfc3c393d2f18e0f0b00b
25b00a25b00c25b00f25b00c25b00825b01025b01125b00c25b01625b219
11552b20b01160252320b01260252320b012602523b012602500105558d4
1b2159205820b0542a5921213cf02ff03c103c3cb0502b2d2cb00b25b003
25b00b25b00525b00e25b00f25b00e25b00d25b00925b00f25b00f25b017
25b019251800103c08fc003c393d2f18e0f02d2cb00225b001b00425b004
255058601b615920b00325b00325b005255558b0062b1b2121592121212d
2cb00c25b00925b00e25b00b25b01025b01025b00f25b00f25b0544b5258
b04f2bb04f2b52582359811b212121212121212159212121212121212121
21212121212d2cb003260110493b2d2c23b003260010493b2d2c20262320
26232d2c234b5458202060b00160258a381b232159b8ffff602d2cb00160
252320b002602520582020608a60b0026023b0532ab8ffff6026201b23b0
026026592060b003602d2c462346608a8a462320468a608a61b8ff806223
2010238ab9031603168a70456020b0005058b00161b8ffba8b1bb0468c59
b0106068013a2d2cb1020042b123018851b1400188535a58b91000002088
5458b202010243604259b12401885158b920000040885458b20202024360
4259b12401885458b2022002436042004b014b5258b2020802436042591b
b940000080885458b202040243604259b94000008063b80100885458b202
080243604259b94000010063b80200885458b2021002436042595959592d
2cb0024354584b53234b515a58381b2121591b21212121592d0000000001
000000050000b1b0afba5f0f3cf50809080000000000a3556f4100000000
c142e81efe77fa51059d09c50001000900010000000000000001000006a9
fd99000004cdfe77ff30059d000100000000000000000000000000000001
04cd00670067006700000000000000000000000000000000000000000000
00000000000001cf01cf01cf01cf01cf01cf01cf01cf01cf01cf01cf01cf
01cf01cf01cf01cf01cf01cf01cf01cf01cf01cf01cf01cf01cf01cf01cf
01cf01cf01cf01cf01cf01cf01cf01cf01cf01cf01cf01cf01cf01cf01cf
01cf01cf01cf01fe01fe00fd00fd00fd00fd0059ffec0072007200420095
0095001a0080008000450081008100330056fff0fff0006c00970094001e
000000320032003200320032003200320032003200320032003200320032
003200320032005900590059005900590059005900590059005900590059
005900590059005900590059005900590059005900590059005900590059
005900590059005900590059005900590059005900590059005900590059
00590059005900a600a600f300f300f300f301e002e803a003a004a90596
0596065c06ea06ea0a190a7e0a7e0b530be30d1a0d1a0e120fd8106d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d112d112d112d112d112d112d112d112d112d112d112d112d112d
112d112d000100000c4f00f2003c0084000500020010002f00590000086c
ffff000400020000000100120002000200000006000b0000436f75726965
72204e6577000000b1571f413d0401002f0401003004010003002f040100
3f0401004f0401005f04010060040100cf040100df040100ef0401000800
20040100300401008f0401009f040100df04010005001f03ff002f03ff00
3003ff0003003f03ff005f03ff00df03ff0003003f03ff008f03ff009f03
ff00a003ff00f003ff0005004003feb30b0e321f414703fe002f03fe0070
03fe009f03fe0004005f03fe007003fe009f03fe00ef03fe0004008f03fe
009f03fe00a003fe0003000f04050001002f0405003f0405008f040500ef
04050004002003fc0001001003fb006f03fb00a003fc00e003fc0004002f
03fa003f03fa003f03fb004f03fa006003fa006003fb006003fc00bf03fb
00d003fb00f003fb000affc003f8b351533200413c03f9001003f9004003
f9005003f9007003f9008003f900b003f900e003f90008002003f9002f03
fd003003f9003f03fd005003f9006003f9009003f900bf03fd00c003f900
d003f900e003f9000b004003fd005003fd006003fd00af03fd00b003f900
bf03fd00c003f900e003f900f003f90009ffc003f9b23b9632b9ffc003f9
b20d1132b9ffc003f5b33a3c32d0411403f50001009003f50001000f03f5
002f03f5003f03f5004f03f5008f03f500af03f50006004003f4b2090c32
b9ffc003f4b2393a32410affc003f4003c0033ff8003f400530033ffc003
f4b35152321f411e03f4003f03f4004f03f4008003f400d003f40005002f
03f4006003f4009003f400c003f40004000f03f4008f03f4009f03f400ef
03f40004ffc003f2b2363a32b9ffc003f2b24e5432414effc003f200d400
33ffc003f200d30033ffc003f200b60033ffc003f200a20033ffc003f200
860033ffc003f200850033ffc003f2006e0033ffc003f200680033ffc003
f200560033ffc003f200530033ffc003f2003e0033ffc003f2003d0033ff
c003f2003c0033ffc003f200320033ffc003f200310033ffc003f2002500
33ffc003f200220033ffc003f200200033ffc003f2001f0033ffc003f1b2
533390412903f10001006003e9007003e9008003e90003005003e9006003
e9007003e9008003e9009003e900a003e900b003e900c003e900d003e900
09009004040001ffc004040053003303f702570055001fffc003f0b25333
90411b03f00001006003e8007003e8008003e80003005003e8006003e800
7003e8008003e8009003e800a003e800b003e800c003e800d003e8b20912
204140038400300384004003840050038400040060039a0070039a008003
9a0090039a00040000039a0010039a0020039a0030039a0040039a005003
9a0006000003d7001003d7000200e003d300f003d30002000003d3001003
d3002003d3003003d3004003d30005002003d3003003d3004003d3000303
c3025f0064001f03a4025db2641f2f411e03b2003f03b2004f03b2000300
e003d400f003d40002000003d4001003d4002003d4003003d4004003d400
05002003d4003003d4004003d40003035ab203641fb803c2b243641fb803
c1b321641f0f41310343001f0343002f0343006003430004002003420001
00c0034200e003420002000f0342002f0342004003420060034200700342
00050347032b0026001f033c02560035001f033b032b0035001f033a032c
0035001f0339032c0035001f0338032bb2351f0f41220330002f0330008f
03300003000f0327002f0327008f03270003000f0324002f0324008f0324
0003033003240024001f032703240033001f032403230024001fffc00320
b2131932b9ffc00320b2212532b9ffc00320b22e3232bd03210255003b00
1fffc00321b345473260410b031c0070031c00020027031b00d7031b0002
ffc0031bb2313232b9ffc0031bb2464732b9ffc0031bb251533241110317
026c0033001f031502f5001f001f031402f50029001f031302f50029001f
031fb21e421fb901410258b2641f00411b030c0010030c0020030c003003
0c0040030c0050030c0060030c0070030c0080030c0090030c00a0030c00
b0030c00c0030c00d0030cb30e121240b802c9b224339fba02c800ef02c8
4055022021019f05ef05029f04ef04029f03ef03029f02ef0202bf06bf07
021f063f065f066f068f06051f073f075f076f078f07053f023f034f024f
0304201e20222027202c204705101e102110221027102c1047065f416902
6b0001005f02dc000102dc026f0800001f008002db0001002002d9000100
3002d9004002d90002006002d9007002d90002008002d9009002d9000200
a002d900b002d9000200c002d90001002002d9008002d90002001002d900
4002d90002009002d900d002d900e002d90003001002d9009002d9000202
d9026c0800001f002002d8003002d8004002d8000302d802a80800001f00
1002d7002002d70002002002d7003002d7004002d7005002d7000402d702
9a0800001f00a802d600b802d600d802d6000302d6026b0400001f02d5b2
340f1f41fd02d502560400001f02cc02cc02cb02cb02ca02ca02c902c902
c802c8000f02c8000f02ca0002006002c900c002c900ff02c90003003f02
c8006002c8007002c8009002c800c002c80005005f02ca000100a002cc00
01002f02cc004002cc006002cc0003003f02ca008f02ca00bf02ca000300
2f02c8002f02ca003f02c90003005f02c90001007f027c007a02b1000200
7f0278007f0279007f027a007f027b0004007f0274007f0275007f027600
7f02770004007f0270007f0271007f0272007f02730004007f026c007f02
6d007f026e007f026f0004007f0268007f0269007f026a007f026b000400
6f027c006502b10002006f0278006f0279006f027a006f027b0004006f02
74006f0275006f0276006f02770004006f0270006f0271006f0272006f02
730004006f026c006f026d006f026e006f026f0004006f0268006f026900
6f026a006f026b0004004a027c0001004a0278004a0279004a027a004a02
7b0004004a0274004a0275004a0276004a02770004004a0270004a027100
4a0272004a02730004004a026c004a026d004a026e004a026f0004004a02
68004a0269004a026a004a026b0004003a027c0001003a0278003a027900
3a027a003a027b0004003a0274003a0275003a0276003a02770004003a02
70003a0271003a0272003a02730004003a026c003a026d003a026e003a02
6fb1043a41ff0268003a0269003a026a003a026b0004002f027c0001002f
0278002f0279002f027a002f027b0004002f0274002f0275002f0276002f
02770004002f0270002f0271002f0272002f02730004002f026c002f026d
002f026e002f026f0004002f0268002f0269002f026a002f026b000400df
027c000100df027800df027900df027a00df027b000400df027400df0275
00df027600df0277000400df027000df027100df027200df0273000400df
026c00df026d00df026e00df026f000400df026800df026900df026a00df
026b0004007f0267007a02ab007a02ae0003007f0263007f0264007f0265
007f02660004007f025f007f0260007f0261007f02620004007f025b007f
025c007f025d007f025e0004007f0257007f0258007f0259007f025a0004
007f0253007f0254007f0255007f02560004006f0267006a02ab006502ae
0003006f0263006f0264006f0265006f02660004006f025f006f0260006f
0261006f02620004006f025b006f025c006f025d006f025e0004006f0257
006f0258006f0259006f025a0004006f0253006f0254006f0255006f0256
0004005f0267005f02a9005a02ab0003005f0263005f0264005f0265005f
02660004005f025f005f0260005f0261005f02620004005f025b005f025c
005f025d005f025e0004005f0257005f0258005f0259005f025a0004005f
0253005f025441ff005f0255005f02560004004f0267004f02a9004a02ab
0003004f0263004f0264004f0265004f02660004004f025f004f0260004f
0261004f02620004004f025b004f025c004f025d004f025e0004004f0257
004f0258004f0259004f025a0004004f0253004f0254004f0255004f0256
0004003f0267003a02ab0002003f0263003f0264003f0265003f02660004
003f025f003f0260003f0261003f02620004003f025b003f025c003f025d
003f025e0004003f0257003f0258003f0259003f025a0004003f0253003f
0254003f0255003f02560004002f0267002a02ab0002002f0263002f0264
002f0265002f02660004002f025f002f0260002f0261002f02620004002f
025b002f025c002f025d002f025e0004002f0257002f0258002f0259002f
025a0004002f0253002f0254002f0255002f0256000400df026700da02ab
000200df026300df026400df026500df0266000400df025f00df026000df
026100df0262000400df025b00df025c00df025d00df025e000400df0257
00df025800df025900df025a000400df025300df025400df025500df0256
0004027c01a6027b011a027a00fb027900fa027800a1027700a00276009f
027500640274005702730047027200430271003c02700030026f002d026e
002c026d0027026c0025026b0022026a0021026900200268001e026701a6
0266011a026500fb4123026400fa026300a1026200a00261009f02600064
025f0057025e0047025d0043025c003c025b0030025a002d0259002c0258
002702570025025600220255002102540020025340191e96f8641f89f864
1f72f8641f71f8641f31f8641f2ef8641fb8011a403521641ffb21641fa0
21641f4721641f3c21641f3021641f2721641f2521641f2221641f202164
1f1e21641f001616000000121108404117023d020c0050000d01bd005000
0d018f0050000d018e0050000d01770050000d014c0050000d0147005000
0d013a4017500dbd500d8a500d6f500d5f500d59500d46500d3a500dbb01
fe007e000d01e7401d7e0d957e0d867e0d5c7e0d4a7e0d427e0d417e0d39
7e0d367e0d2f7e0d412001ec013c000d01a2013c000d0196013c000d0191
013c000d00fb013c000d00f8013c000d00e0013c000d005e013c000d003c
013c000d0020013c000d001e013cb20d0009b801f5b2213d1fb801f4b221
4f1fb801edb221621fb801a9b221341fbc01a600210401001f01a4b2215e
1fb801a3b221521fb80167b221351fb80166b221311fb80142b221431fb8
0141b421301ffa21b80401400f1fe121721fd2214a1fb021391fa121b804
01b21f9f21b80401400b1f72212b1f65212a1f6421b80401b21f5721b804
01b21f4321b80401b61f3d21ab1f2d21b80401b21f2c21b80401b61f5513
09130990b801b940330790c707906007903007902b07902a079026079024
07901f07901d071408120810080e080c080a080808060804080208000814
b8ffe0402c00000100140610000001000604000001000410000001001002
000001000200000001000002010802004a0060ba023d0070023db10237b0
13034b024b5342014bb0c063004b6220b0f65323b8010a515ab005234201
b0124b004b54422b73184bb019534bb053515a58b8023db080444b202020
20b0195258b8023db0c04459b0265258b8023db801004459b0325258b802
3db801404459b03a5258b8023db801804459b0475258b8023db801c04459
59b0372b4bb807ff52b0382b4bb009505b58b101018e59b0382bb00288b8
01005458b801ffb101018e851bb0124358b90001011f858d1bb9000101ff
858d59590016763f183f123e113946443e113946443e113946443e113946
443e11394660443e11394660442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b
2b2b2b2b2bb0372b4b5079400c1fae071f45071f33071f23072b2b2b2b4b
5379400c90ae079045079033079023072b2b2b2b181db0964b5358b0ff1d
59b0324b5358b0ff1d594bb8040153205c58b9023f023d4544b9023e023d
45445958b919a0023f455258b9023f19a04459594bb8040153205c58b900
25023f4544b90021023f45445958b919a00025455258b9002519a0445959
4bb8040153205c58b90022023e4544b90027023e45445958b919a0002245
5258b9002219a04459594bb8040153205c58b147214544b1212145445958
b919a00047455258b9004719a04459594bb8040153205c58b1a0214544b1
212145445958b919a000a0455258b900a019a04459594bb8030153205c58
b121214544b1212145445958b913380021455258b9002113384459594bb8
030153205c58b121214544b1222145445958b913380021455258b9002113
384459594bb8030153205c58b121214544b1272145445958b91338002145
5258b9002113384459592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b65422b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b01b9005201dfb13b7645652345602345
6560234560b08b766818b080622020b9003b01df4565234520b003266062
636820b003266165b801df236544b03b234420b152764565234520b00326
6062636820b003266165b076236544b0522344b10076455458b176406544
b25240524523614459b34f673f6c456523456023456560234560b0897668
18b080622020b13f674565234520b003266062636820b003266165b06723
6544b03f234420b14f6c4565234520b003266062636820b003266165b06c
236544b04f2344b1006c455458b16c406544b24f404f4523614459456953
42014b5058b108004259435c58b108004259b3020b0a124358601b215942
1610703eb0124358b93b21187e1bba040001a8000b2b59b00c2342b00d23
42b0124358b92d412d411bba04000400000b2b59b00e2342b00f2342b012
4358b9187e3b211bba01a80400000b2b59b0102342b011234200b0372b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b4544454445444544454445444544
454445444544454445444544454445444544454445444544454445444544
454445444544454445444544454445444544454445444544454445444544
454445444544454445447474747474747373737373737373737373737373
737373737373737373737373737373737373737373737474747474747373
737373737373737373737373737373737373737373737373737373730074
7373737373737374184569444569444569444569444569442b2bb0372b2b
742b73742b732b75747474737373737373742b7373747400737474747373
737374732b00435c58400c6027602c604703601e60210273735900435c58
bd000f02c90001000f02c800017373590174002b2b012b2b2b2b2b2b2b74
732b2b2b2b2b2b2b2b7373732b2b2b2b2b2b0073737473002b2b2b737474
73012b2b7374747373737300435c58ba0000037e00017359017374752b2b
2b75007374752b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b7374
752b2b2b2b2b7374752b2b2b7374752b73747573747374752b7374757374
752b000000>
[8795 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 6086 83 <0002ffeffe54049503a70026003401d8402ffd1ff422fd29fd2df430f434
06061b0a2602b621c621d829d72de829e62d061f1b10262f1b202604122d
800a0b3430b8ff8040180a0b341e401d2b1b4032242c080008090a0b0c0d
0e0f1011bf029a029b029c001e0049ffc00009ffc0400c0a020908070605
0403020100ba029a029b029c400d1e490019181716151413121110ba029a
029b029c401a1e4919180086242b211d1af519781d0718063221240a0908
0e27b80255402330204020502003002010202020e02004b02001201a361b
7a1a1a19190026f2302f2e01b80257401911001020103010cf10df10ef10
ff10079f1001101935637c182b4e10f4715d3c4dfd3c3c3ce63c3c103c10
e44e10f6715d5d4ded003f3c3fed3f3ff4e410ed10ec103c2b2b2bb10602
435458b500400b10341ab8ffc0b20b1034002b2b5931304379401e333428
2a1e23292622262a1e271f013323271f01281f2b1f013421321f00002b2b
012b2b2b2b81818100495479401030312526302632230431252f23002600
01103c2b002b81810049547940122c2e1b1c2d252e1b2b23052c1c2f2300
1b1a01103c2b002b2b8181002b2b435c58b90030ffc0b30a113f30b8ffc0
4017090f3f2d400a113f2e400a113f2d40090f3f2e40090f3f2b2b2b2b2b
2b595d015d00715d25113332161514062321222635343633331123222635
343633331536363332001514070623222601342626232207061514163332
3601687b4a3f3f4afe954a3f404923234a3f3f4af0489a51d20128af92b7
4f9a0214448d5f995a3daf8182ae71feb0392e2d39392d2e39039e392e2d
39463130fee3b8cb846e2e018e2b8559734f49529b9a>HIBBAA+CourierNew AddT42Char 
1 8410 88 <0001001effdf0499038c0029010840220a220e133f09400e133f0a0e1a0e
690a6920f62005290e380e7e26df01d80fe80f06b8ffc0400c1601080706
05040302010100ba029a029b029c400f1e49401d011a1918171615141312
11bd029a029b029c001e0049ffc040220d40164015401440134012401140
174018401c401d400f0c00292827262524232221ba02d7029b029c400a1e
49211e291906070a21b801a9400a09f51e210c0b08222221b80260400f00
7001af01e00103800101011a2b21bb0209001a001b0257400e1111801201
1f120112192a4f67182b4e10f45d713c4d10fd3ce64e10f6715d3c4dfd3c
103c003fedf4ed3f3f3c12392b2b2bb10602435458b409400b0f34002b59
3130015d005d2b2b01113216151406232335060623222627263511232226
3534363333111416333236371123222635343633041a413e3f4ac358a048
65942b1f234a3f3f4af03f413e8f694a4a3f3f4a038cfd413a2d2d392f28
28554b365101b9392e2d39fd9e413d314001a2392e2d3900>HIBBAA+CourierNew AddT42Char 
1 960 69 <0002ffebffdf04960511001e002a01904031050209090a0c03b608c608e7
08fa09041f02100c1f2410262f02200c2f242026eb26eb2afc06fc20ff24
0d2440090f3f26b8ffc04009090f3f24400a0b3426b8ffc040180a0b341b
4004221b40280a2608000e0f1011121314151617ba029a029b029c400d1e
4900001e1d1c1b1a19181716ba029a029b029c40191e490d200d280f8001
0101041e00222104070f0a28210a0b1fb802554014000710072007300740
07500706b00701e0070107b8ffc04009110a3f071a2c00250eb802574014
17001620163016cf16df16ef16ff16079f160116b8ffc04009110a3f1619
2b637c182b4e10f42b715d3c4dfd3c3c4e10f62b5d715d4ded003fed3f3f
ed3f113971111239382b2bb10602435458b50d400b103401b8ffc0b20b10
34002b2b5931304379401a292a2021050921051f1f0129091f1f01200622
1f012a08281f00002b2b012b2b81818100495479401026270b0c260c2823
04270b2523000c0d01103c2b002b81810049547940102324020324022223
052303252300020101103c2b002b8181002b2b2b2b5d015d007101113636
333200151400232226271523222635343633331123222635343633013426
23220615141633323601644b9b4fd50128fee6e7529847f04a3f40492323
4a3f3f4a0355b28180b2a09292a10511fe343131fedad0c7fef52a293239
2e2d390377392e2d39fc9a7fb0b07c719191>HIBBAA+CourierNew AddT42Char 
1 5170 79 <000100810000044c05110018007e400b0008090a0b0c0d0e0f1011ba029a
029b029c400d1e490009080706050403020100ba029a029b029c400d1e49
0000181716151413121110ba029a029b029c40091e49180009080a0001b8
0257401a111040120b3f1040140c3f201030106010a010041019195aa418
2b4e10f45d2b2b3c4dfd3c003f3c3f2b2b2b313001113332161514062321
22263534363333112322263534363302cdf64a3f3f4afd474a3f3f4af6a5
49403f4a0511fbbc392e2d39392e2d390377392e2d39>HIBBAA+CourierNew AddT42Char 
1 3256 76 <000200800000044b05110003001c00c3b90001ffc0b30b0d3e02b8ffc040
150b0d3e500901400d400e020c0d0e0f101112131415bf029a029b029c00
1e0049ffc0000dffc0400c16020d0c0b0a090807060504ba029a029b029c
400d1e4900041c1b1a191817161514ba029a029b029c400a1e492f023f02
4f020302ba02570003ffc0400d0e393f030103001c060d0c0a05bb025700
1400020257b2017804b80257400f15152014301460140314191d5aa4182b
4e10f45d3c4d10fdf4ed10ed003f3c3f3f712bed5d2b2b2b3130015d002b
2b0115233501113332161514062321222635343633331123222635343633
02b0f40110f64a3f3f4afd474a3f3f4af6a549403f4a0511d9d9fe7bfd41
392e2d39392e2d3901f2392e2d39>HIBBAA+CourierNew AddT42Char 
1 1488 70 <00010072ffde048b03a7002b00ef404dd911d314d724d927e912e614e624
e927fb14fb230a081409230236126511671265156628fb0c060b0c011249
124d275912dd14d924eb14e924071a190d0c00050613191b160c0d100910
1b011bb80121b422007a290eb802fab41021290709b8014a400902061621
220b064e1eb8ffc040101935701ee01e02501ed01e021e1a2d13b8025540
1270260100262026302670260426192cce7c182b4e10f45d714ded4e10fe
725d2b4de4003fed3fed3ffde410e410ed5d111239391112390111121739
3130005d435c58401008400d163f0a400d163f09400d163f1bb8ffc0b217
0e3f2b2b2b2b5901715d00715d0136333216151514062322272626272623
22061514163332373636333216151407062122272635340033321603a625
272c39392e2a1d15182e517e91afa8c380513056232a3d5d8afef6ef85b4
0124eb55920367233f49844a3e18126f1b30aa82788b1a104d3e2a443d5b
6385e7db011f2000>HIBBAA+CourierNew AddT42Char 

1 0 3 <> HIBBAA+CourierNew AddT42Char 
1 5372 81 <000100330000049803a700350115401b06061606971d03df09df1f024009
400a020f101112131415161617ba02d7029b029c400d1e4900262728292a
2b2d2e2e2fbd029a029b029c001e0049ffc0400c1601100f0e0d0c0b0a09
0908bd029a029b029c001e0049ffc0400c1601272625242322201f1f1eba
02d7029b029c400d1e4900003534333231302f2f2eba029a029b029cb21e
491eb801a9401101f51b210407350627262610100f0a1716b80257b50809
401d3509b8ffc0401219357009af09e009030f0901091a371e001fb80257
400e2e2e802f011f2f012f19364f67182b4e10f45d713c4d10fd3c3c4e10
f6715d2b2b3c4dfd3c003f3c103c103c3f3fedf4ed2b2b2b2b2bb1060243
5458b90001ffc0b20b1b34002b59313001015d005d011536363332171615
113216151406232322263534363311342726232206071132171615140623
232226353437363311222635343633019738874fb66a54413e3f4ab94a3f
3e41242f5e476b524f17313f4ae94a3f30184f413e3f4a038c453030715a
92fe83392e2d39392e2d390183431f283759fe830f1e3a2d39392e381f0f
01f23a2d2d39>HIBBAA+CourierNew AddT42Char 
1 8112 87 <00010094ffdf04ba04ce002c00acb2190821b801b2401f25160021262525
1d0609f50521110b7019011919142d292901700ce00c020cb8ffc040093a
350c1a2e25240001b8025740261d1e15001420143014501460147014b014
c014e014f0140a101420146014701480140514192dba0101013500182b4e
10f4715d3c3c3c4dfd3c3c3c4e10ee2b5d11392f1112392f5d003f4dfde4
3f3c103cfd3c10e43130437940101213020403260412011d000213051d00
2b012b2b8181011114171633323736333216151407060423222635112322
26353436333335343633321615152132161514062302341b2a6c9d85331d
283b2031fedf63bfbf4a4a3f3f4a4a392e2d39017b4a3f3f4a02bffe6542
1521431a3c2b281d2f4fa57801c3392e2d39b94a3f3f4ab9392e2d39>HIBBAA+CourierNew AddT42Char 
1 2860 75 <0001001a000004ac0511003800ec4019df0901060616062706034009400a
0210111213141517181819ba02d7029b029c400d1e490028292a2b2c2d2f
303031bd029a029b029c001e0049ffc0400c160111100f0e0d0c0a090908
ba029a029b029c400d1e490029282726252422212120ba02d7029b029c40
0d1e490000383736353433323130ba029a029b029cb41e49380020b801a9
400f01f51d2104072928281111100a1918b802574010084f09017009af09
e00903091a3a0021b80257400e30308031011f31013119394f67182b4e10
f45d713c4d10fd3c4e10f65d713c4dfd3c003f3c103c103c3fedf4ed3f2b
2b2b2b2b3130005d015d0111363633321616151132171615140623232226
353437361711342726232206071132171615140623232226353437361711
2322263534363301934083436aa66d4e18303e4aea493f30194d242f5c44
69594f17313f4ae94a3f31184e234a3f3f4a0511fe4b2625489b76fe7f0f
1f392d39392e381f100101734f202b3558fe800f1f392d39392e381f1001
0377392e2d39>HIBBAA+CourierNew AddT42Char 
1 486 68 <00020059ffde049803a700290037013d40352a0501302e01053616362336
3f2a3f2b3f2c3d2d6d0e7c0e09052015209708c306c920d406e406f63608
0000292827262524232221ba029a029b029c40141e491113302a37220001
862901292a37340c120ab8ffc0402f1e2034100a500a02400a800a020a21
5f2c014f2c012c2c2914402d323414651210211e07290a8034013421040b
0d00b80257b4215f220122b8ffc04009120b3f221a39178730b802554012
0740170e3f1f0720073007030719383fb6182b4e10f45d2b4dfded4e10f6
2b5d3c4dfd3c003fed713f3fed435c58400f10402d5a3f10400f1e3f1040
0f143f2b2b2b59ed2b12392f7172ed71722b435c58b9000affc0b32d5a3f
0ab8ffc0b30f1e3f0ab8ffc0b3101b3f0ab8ffc0b310153f0ab8ffc0b20f
143f2b2b2b2b2b5939123939113910ec01111239391239392b3130005d71
01715d213506062322263534243332173534262322070623222635343636
373636333216151133321615140623032623220706151417163332363703
1f4dba4ca5ce0107e85d7a4f6f5b91361e29391424394c9e40bfd3234a3f
3f4af07b687d5a381b32574abb49302929af6a81dd14312e3a240d3b2e1a
2617101519a58ffe5a392e2d39016f183d27281d12213a32>HIBBAA+CourierNew AddT42Char 
1 6708 85 <0001006c0000049503a700290178b72001019806011201b8ffc040251a35
0a104a1002af10af11021f40040e4009400a400b400c400d05191a1b1c1d
1e1f202122410c029a029b029c001e0049ffc0000bffc0000cffc0000dff
c0400c16041a191817161514131211ba029a029b029c400d1e4900002928
27262524232221ba029a029b029c40191e490c0d081211202d2f34114041
47341140212534110e1a01b8ffc0b330323401b8ffc0b31e263401b8ffc0
b614193401290e0bb8011d40210e21040729061a190a0008200830085008
6008700806900801081a2b0100001112b802574011220021202130215021
602170210621192ab80101b17c182b4e10f45d3c4dfd3c3c103c4e10e672
5d003f3c3f3f4deded1112392b2b2b1112392b2b2b01111239392b2b2bb1
0602435458b90001ffc0b20b1334002b5931300049547940120f10020310
020e23050f031123001011020101103c103c2b002b8181005d712b435c58
40141040190f3f1140190f3f1040140c3f1140140c3f2b2b2b2b59005d71
011536363332171615140623222623220607112132161514062321222635
343633331123222635343633023c819541645e403d2b2654212bab800124
4a3f3f4afd954a3f3f4a7a4a4a3f3f4a038c805d3e4a32342c3d4c6c6cfe
cb392e2d39392e2d3901f2392e2d3900>HIBBAA+CourierNew AddT42Char 
1 178 62 <000101fefec003d0050e0011005d400b000a0b0c0d0e0f10110001ba029a
029b029c400d1e490009080706050403020100ba029a029b029c400a1e49
0b0a100908120001b8025a400f0909000a200a300a030a191297b5182b4e
10f45d3c4d10fd3c003f3c3f3c2b2b313001113332161514062321112132
161514062302cb7c4a3f3f4afeb701484a3f3f4a0441fb4c382e2e39064e
392e2d39>HIBBAA+CourierNew AddT42Char 
1 332 64 <000100fdfec002cf050e0011005e400b000a0b0c0d0e0f10110001ba029a
029b029c400d1e490009080706050403020100ba029a029b029c400a1e49
0b0a120908100100b8025a400a09091f0a2f0a5f0a030ab80214b31397b5
182b10f65d3c10fd3c003f3c3f3c2b2b3130051123222635343633211121
22263534363302027c4a3f3f4a0149feb84a3f3f4a7304b4392d2e39f9b2
392e2d39>HIBBAA+CourierNew AddT42Char 
1 2386 73 <000100950000049305110033014d4021071b171b271b371b04992601020f
10123300400b400c0219181716151413121110ba029a029b029c40151e49
400a4009400b400c0408090a0b0c0d0e0f1011410c029a029b029c001e00
49ffc0000affc00009ffc0000bffc0400c0c042c2d2e2f303132330001bf
029a029b029c001e0049ffc0000bffc0400c0c0209080706050403020100
ba029a029b029c40411e49244045473424404d53342440353a3424402d32
34246528211d0012642d3300642d2c2c1018301840185018601880180618
060f6409090264080a002b30f505b801ea400c2021302102211a352b0111
01b8025740201a1015780cfe1040140c3f6f109f10af10bf100400105010
bf10cf1004101934b80101b17c182b4e10f45d712b4df4e4103ced3c103c
4e10f65d4de4e4103c003fed3c10ed3f713c103cfd3c10ed3feded2b2b2b
2b2b2b2b2b00103c3c103c3c313000725d01112132161514062321222635
343633331123222635343633333534363332161615140623222726232206
151521321615140623026501244a3f3f4afd954a3f3f4a7a624a3f3f4a62
c9bf55df3f382913267f62664d013c4a3f3f4a02bffe0e392e2d39392e2d
3901f2392e2d394e86b11f382c2f3b07193d2d4e392e2d39>HIBBAA+CourierNew AddT42Char 
1 5798 82 <00020056ffdf047b03a7000f001c00c2405eb702b806d60ad90eda12d515
d618d519da1bd81ce70ef702f9060dc619c61b0212ed13e415e619eb1b04
da18d61ce902e706e60aeb0ee9120764186a1ca505a709a60baa0da80f07
69026606650a6b0e6a1264160614210c071a21040b10b80255400a000010
002000e0000400bb02f5001e00170255b71f08300870080308b902f5001d
10f65ded10f65ded003fed3fed3130015d5d5d5d435c58400b1b220f093f
12220f093f15b8ffdeb30f093f19b8ffdeb20f093f2b2b2b2b59005d015d
011406042322242635343636333204160734272623220615141633323604
7b83fefd8d8cff008688ff8b8c010384cd47619e8bbabc898abc01b576dd
8381de797bed888beb7d635370b27560a7a7>HIBBAA+CourierNew AddT42Char 
1 100 17 <000101cfffdf030300ef000b0021400c09bf030b10000100d406190cba01
05012e00182b4e10f44ded5d003fed313025140623222635343633321603
035248485252484852673a4e4e3a3a4e4e00>HIBBAA+CourierNew AddT42Char 
1 1856 72 <00020042ffdf046a03a7001d0024019b400ab812b814b71bc71b040db8ff
e040491c1e3464026c14c706d706d814d819e706e814e819f302f506f312
fc14f81ff9230f360647060212691469186a1a6a1f662394029f1f9023ac
1fa423fa190b1d0705030b13241e0108b8ffc0b32a3a3408b8ffc0400c19
22348008d00802f0080108b80116b5121e401d351eb8ffc0400f1d203410
1e01401e801e028f1e011eb801184035004012233f0040213500401c351f
00010f004f00cf0003ff000100400c0f3400000421400f1e3f21400f143f
212116070421100b1eb80260b200770bb8ff80b323463f0bb8ff80b34b26
3f0bb8ffc0400c232434e00b010b1a26247701b802604014134023351f13
70130213400d0f34131925496c182b4e10f42b5d2b4dfde44e10f65d2b2b
2b4df4ed003fed3ffd2b2b11392f2b5d71722b2b2bed5d71722b2b435c58
b51e4019213f1eb8ffc0b314283f1eb8ffc0b312233f1eb8ffc0b323123f
1eb8ffc0b228143f2b2b2b2b2b59ee5d712b2b3c103c0111121739313001
5d435c58b90002ffd4400911173f1f2c11173f23b8ffd4b211173f2b2b2b
5900715d012b5d0121161633323736333216151407060423220035340033
32161716171615272626232206070469fcb720a38b72bd4e1e29381e28fe
ca8ff6fed9013fd07dd133482f20e32f9869689830015e506231143a2c28
1c25430116cbd8010f58334a6d4c647658575758>HIBBAA+CourierNew AddT42Char 
1 7204 86 <00010097ffdf043c03a7004702c140350912063519121635663086309630
a42eb42ec32ed609d40ad631e609e731f40cf62f110a0107050709073628
30362f4729462f0824b8ffc040700b0f3f00400b0f3f0a000f0108233700
3e294600062f00232428352f462f4787319731f900ff01f8230a12050b03
0c092f0c30170b140c1d181f191a30123a850b8b30d20bdb2f0ee639e13a
f92f0320170130241703332e0c0a00042b072421160c1930022e20303234
30203032340cb8ffe0b32e32340ab8ffe0b32e32340cb8ffc0b23a350ab8
ffc0b23a350cb8ffe0b33639340ab8ffe0b33639340cb8ffc0b35053340a
b8ffc0b35053340cb8ffe0b34a4f340ab8ffe0b34a4f340cb8ffc0b24735
0ab8ffbab247350ab8ffe0400b4335302e0c0a042700453ab8ffe0b32e32
343ab8ffe040091a27343a3c030c0a0ab8026c4045302e1430302e032137
071f457f45ef45030f454f45021f450145402325344540363545d63d3d3c
0617401b2d34177810217021e0210300213f210221d61a0a2721140b4000
b80260b2414e2bb802554011701080109010b010c010e01006101a4907bb
0255003300240260400b1e1d4e1f33203330330333b8ffc0400921233433
19484f8f182b4e10f42b5d4df43ced10ed4e10f65d4dedf4ed3c003fed3f
ed715de42b3f3c10ed2b2b72715d3fed870e2e2b7d10c4001112392b2b12
391217392b2b2b2b2b2b2b2b2b2b2b2b2b2b2b7211390111121739121739
713130005d71435c58401a00400a0d3f43400a0d3f46400a0d3f45400a0d
3f44400a0d3f22b8ffc0b30a0d3f24b8ffc0b30a0d3f20b8ffc0b30a0d3f
21b8ffc040090a0d3f3040160d3f0ab8ffc04009170e3f2f220f193f0db8
ffdeb30f193f23b8ffc0b30a113f22b8ffc0b30a113f21b8ffc0b30a113f
20b8ffc040170a113f43400a113f47400a113f46400a113f45400a113f2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b59015d712b2b00715d01
262623220706151417161716171616151407062322262706062322263535
343633321617161633323736353427262726272635343736333216173636
33321615151407062322260344326e3c77461f2a206fcc506972618bde59
973f0f22123039392e25320e2f84568d4e253535a6f753535d7ecc47833c
13210e2a381020372538029c1f1f2711141716100f1c1c2592516e4a6b1f
1e0d0e3f4a454a3f293228292c1618281a1a121a4a496b6e49641b1c0e0e
3f4a3243182e2e00>HIBBAA+CourierNew AddT42Char 
1 0 0 <0002006700000467050000030007003b401e0607f00201000504f003000a
0605f00303021a090704f0010019084b7b182b4e10f43c4dfd3c4e10f63c
4d10fd3c003f3cfd3c3f3cfd3c31303311211125211121670400fc2003c0
fc400500fb002004c000>HIBBAA+CourierNew AddT42Char 
HIBBAA+CourierNew /CharStrings get begin
/g83 83 def
/g88 88 def
/g69 69 def
/g79 79 def
/g76 76 def
/g70 70 def
/;### 3 def
/g81 81 def
/g87 87 def
/g75 75 def
/g68 68 def
/g85 85 def
/g62 62 def
/g64 64 def
/g73 73 def
/g82 82 def
/;################# 17 def
/g72 72 def
/g86 86 def
end
HIBBAA+CourierNew /Encoding get
dup 1 /g83 put
dup 2 /g88 put
dup 3 /g69 put
dup 4 /g79 put
dup 5 /g76 put
dup 6 /g70 put
dup 7 /;### put
dup 8 /g81 put
dup 9 /g87 put
dup 10 /g75 put
dup 11 /g68 put
dup 12 /g85 put
dup 13 /g62 put
dup 14 /g64 put
dup 15 /g73 put
dup 16 /g82 put
dup 17 /;################# put
dup 18 /g72 put
dup 19 /g86 put
pop
end
%ADOEndSubsetFont
reset_gvm
/TMZDSR+CourierNew /HIBBAA+CourierNew findfont ct_VMDictPut
/TMZDSR+CourierNew*1 
[/.notdef /g83 /g88 /g69 /g79 /g76 /g70 /;### 
/g81 /g87 /g75 /g68 /g85 /g62 /g64 /g73 
/g82 /;################# /g72 /g86 236{/.notdef}rp]
TMZDSR+CourierNew nf
TMZDSR+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
84.8391 342.926 mo
(\001\002\003\004\005\006\007\005\010\011)
[-6.6044 -6.5936 -6.60437 -6.71899 -6.599 -6.599 -6.5993 -6.71899 -6.59897 0 ]ysh
true set_gvm
%ADOBeginSubsetFont: QJJAAA+CourierNew Initial
ct_T42Dict begin
-0.121 -0.68 0.621 1.02
 256 array 0 1 255 {1 index exch /.notdef put} for  /QJJAAA+CourierNew
Type42DictBegin
[<00010000000c000c000c000c4f532f3200000000000000cc000000566376
7420aa0e6514000001240000078c6670676db1123632000008b0000005d8
676c7966000000000000333c00002d9068656164cf8a813700000e880000
0036686865610aae0d5c00000ec000000024686d74780000000000000ee4
000000c46c6f63610000000000000fa8000018a06d61787010a6072f0000
2848000000206e616d6500000000000028680000001d70726570bca08f1f
0000288800000ab167646972000000000000000000000000000100000190
000500000000000000000000000000000000000000000000000000000000
00000000000000000000000000080000000000000000000000000000f000
f0ff000000000000000000000000000100000000000004e700000492001b
04e7001e0362001e0000ffdf0000ffdf0000ffe2fe7e000004e70000fefd
ffff02d70000005400000054000000000000000000540054009500540054
0054014d005400540054006400d4006d009100970054013301ce00a90040
000f005400d4000301000158003c0093007700d50055fff10054002100a3
00ef002c00390068fffe0011007f00fe017d00a301020002000f003800d3
00650090023c032b04eb0001002a013003ab0182002d003c005400960017
00cf0158002aff0a003c00b3021d023c0002005400cb035f082cff30fff2
01c004c9ff6200a2013c02d604ae00cc00ed01220400fe83ff8bff9bff9c
000e00f4031dfdc3ff31ff6d0054005500600075007c007f0080009e00cd
0159023d02bfff89001100580065007f00b700cb012b0400046000120052
00550084009800b900be00cf00d800e50101010f0128018001d301d40500
fdc4fec4ff49ff62ff6f0045004e00500080010f011d01250141025a035a
03ad03d7fde3fee0ff1e0011005400760078007b008f009000ab00d700d9
00db0103020a0254025503ad001b003d005a006200910093009e00a900c9
00df01080134013a0140018601ac02760403fdc400030004001500390048
005400640091009b00a300a500af00c400d000d100d700f100fe01030119
012b0155015c017d0185018e019401a501ac01ae01eb020502d803030381
04c604ebfed6ff0aff9affa9001b001b001c00200029002c0038004c006d
00cd00ea0128012a012c013f01d2022b022c0301040cfdfefe33ff47ff7f
ffc5ffd7002300270038003d00440045004d005700620079008300bb00c6
00cd00cd00ce00e600f701010103010a0112011d01200123015201530175
01ac01ad01ef01fd0216021d0238026c02b202d4032b03cd045704aefdb4
fe15feb2feeffeffffabffb0ffc3ffcc000200540036003800430055005d
00700073007c007f00b500bb00c500e400e900f501010106011f01280148
014b0155019801ac01df01fc02000208027e02ac02ff033d039003c90419
0498fe4efe6dfe98feb3ff34ff4d000100030005001900340034003a003c
0055005900730082009100a300aa00ab00b300cc00d600ee0118011e0130
01490156015801600168016f01700171017b017c018501a901b401bb01d6
01db01ee020402060215022b022b02630282029302b402c402d602e40300
035303580371037b039303b403d003e80410042c0430044d04600479047a
05000503061608ccfc17fc6dfd62fd9afdc3fe2efe44fe6bfe8bfec1fed6
fee2ff0bffbfffe500060030003c005900670073007d007f0086008e009f
00a900aa00d600e100e700eb00f100f200f501030109011a011e011f012c
013f01430149014d015601570159016601660168016a0175018001ab01b2
01bc01c001c101c901cb01d201dc01ef02010215022e022e023b023d0255
02660282029a02ab02b002d902d902f502f90326032c03320333033e0360
0371038703880393039703dc03e50402041504310453047f04c705030564
0596059b05c405c805ea0610065b00540054005400540000000000000000
0000000003cc02c1043e036c00a00050020303ea02d2023c017d02fb01a7
021d01c102f5021d035003500243023b000201bb0048006d0014079b0621
0621021400100760000000000299022d03570426030c007400500000025a
0286026000a601bc00fb02480152017603cd02a0025f039b0492043e01d7
007f02c10400020d01f600410041013e01a901d3007102d6022d03af04ce
00000000050803fc056d020dff8704e7050203d20000043d010203ca015a
01ed0150021601c1013b028e0023015a011001ed00230149003900d9004d
00b90157003804e0038c024a02db0039006c009301c103cc02bb006c02bb
01a200f2003800fe01720150019c0331007e017100540039006a02940022
02700222007c005500f30182011500d700fb01ab012402660004030d0263
00d40259003c00d00112022e017e0034006d008b018a002c01fd01c000cc
02910036016503befc19fd280201fced01b1034800b101fb04c904c90204
00fb01c1021d01300108014000e100a3009b005500c60021032600a90038
0005022c0003005d0060004c001102f5017c026c0069019803e901a50241
004f0065037302460196fef504410333004100ba0119014306390800053c
051d0434041504e7003e006700670000066804df05820067006703d303f4
ff59ff21fe5f050efedc007a00d9004800db018b00b3004800da0116015e
015104ff024b04ffff5600ab02af04dcff17010c012100d1ff300149feb5
013c0124ff200171ff0b01510086005e06a9fd99048b04850475047c0000
fffb007b00860092009a00c200d500a4001e00270039004c0054005c0062
0069002d0030003200350038003e004200440049004c00500056005a0060
00640066006e00710078009d00ac00b10040004b0055005e00620066006a
007100730077007b007e00820087008c0091009600a600d102aa029f0321
028802c50276026900da00da03c70340015600d40489047f005300240051
011300690037003c001f008c008cffd3005a0029001b010f0134007f0054
0054ffebffd6ffa8fdcf00a600a600920092064200eb06430028004f01f6
041a0105404154403f3e3d3c3b3a3938373534333231302f2e2d2c2b2a29
2827262524232221201f1e1d1c1b1a191817161514131211100f0e0d0c0b
0a090807060504030201002c4523466020b02660b004262348482d2c4523
46236120b02661b004262348482d2c45234660b0206120b04660b0042623
48482d2c4523462361b0206020b02661b02061b004262348482d2c452346
60b0406120b06660b004262348482d2c4523462361b0406020b02661b040
61b004262348482d2c0110203c003c2d2c20452320b0cd442320b8015a51
582320b08d44235920b0ed51582320b04d44235920b09051582320b00d44
235921212d2c20204518684420b001602045b04676688a4560442d2c01b1
0b0a432343650a2d2c00b10a0b4323430b2d2c00b0172370b101173e01b0
172370b10217453ab10200080d2d2c45b01a234445b01923442d2c2045b0
0325456164b050515845441b2121592d2cb00143632362b0002342b00f2b
2d2c2045b0004360442d2c01b00643b00743650a2d2c2069b04061b0008b
20b12cc08a8cb8100062602b0c642364615c58b00361592d2c45b0112bb0
172344b0177ae4182d2c45b0112bb01723442d2cb01243588745b0112bb0
172344b0177ae41b038a45186920b01723448a8a8720b0a05158b0112bb0
172344b0177ae41b21b0177ae45959182d2c2d2cb0022546608a46b04061
8c482d2c4b53205c58b002855958b00185592d2c20b0032545b019234445
b01a23444565234520b00325606a20b009234223688a6a606120b01a8ab0
00527921b21a1a40b9ffe0001a45208a54582321b03f1b235961441cb114
008a5279b31940201945208a54582321b03f1b235961442d2cb110114323
430b2d2cb10e0f4323430b2d2cb10c0d4323430b2d2cb10c0d432343650b
2d2cb10e0f432343650b2d2cb11011432343650b2d2c4b525845441b2121
592d2c0120b003252349b04060b0206320b000525823b002253823b00225
6538008a63381b212121212159012d2c4bb06451584569b00943608a103a
1b212121592d2c01b005251023208af500b0016023edec2d2c01b0052510
23208af500b0016123edec2d2c01b0062510f500edec2d2c20b001600110
203c003c2d2c20b001610110203c003c2d2cb02b2bb02a2a2d2c00b00743
b006430b2d2c3eb02a2a2d2c352d2c76b8026923701020b802694520b000
5058b00161593a2f182d2c21210c6423648bb84000622d2c21b08051580c
6423648bb82000621bb200402f2b59b002602d2c21b0c051580c6423648b
b81555621bb200802f2b59b002602d2c0c6423648bb84000626023212d2c
b4000100000015b00826b00826b00826b008260f10161345683ab001162d
2cb4000100000015b00826b00826b00826b008260f1016134568653ab001
162d2c4b53234b515a5820458a60441b2121592d2c4b545820458a60441b
2121592d2c4b53234b515a58381b2121592d2c4b5458381b2121592d2cb0
134358031b02592d2cb0134358021b03592d2c4b54b012435c5a58381b21
21592d2cb012435c580cb00425b00425060c6423646164b807085158b004
25b00425012046b01060482046b0106048590a21211b2121592d2cb01243
5c580cb00425b00425060c6423646164b807085158b00425b00425012046
b8fff060482046b8fff06048590a21211b2121592d2c4b53234b515a58b0
3a2b1b2121592d2c4b53234b515a58b03b2b1b2121592d2c4b53234b515a
b012435c5a58381b2121592d2c0c8a034b54b00426024b545a8a8a0ab012
435c5a58381b2121592d2c462346608a8a462320468a608a61b8ff806223
2010238ab9032603268a70456020b0005058b00161b8ffba8b1bb0468c59
b0106068013a2d2cb1020042b123018851b1400188535a58b91000002088
5458b202010243604259b12401885158b920000040885458b20202024360
4259b12401885458b2022002436042004b014b5258b2020802436042591b
b940000080885458b202040243604259b94000008063b80100885458b202
080243604259b94000010063b80200885458b2021002436042595959592d
0001000000050000b1b0afba5f0f3cf50809080000000000a32551610000
0000c142e81dff07fa9004fb082b00000009000100000000000000010000
06a9fd9900000513ff07ffd204fb00010000000000000000000000000000
000104cd00670067006700000000000000000000000000fe01e1025d012d
00e20090009000900090009000e500e400ab00c300d600c400c400d300d3
011301130138006200650065006500650065006500650065006500650065
006500650065006500800018001800180018001800180018008f008f008f
008f008f008f008f023d00e3013c013c013c013c0090009000ab00ab0080
00d7007d005500bd00bd00bd00bd00bd006c006c006c006c006c00cf0092
009200920092009200920092019501950194000000370037003700370037
00370037003700370110013a019101e802c7032503250325032503250446
04cb059c0673071007bf07bf0823082309170917096d09d00a180a180a18
0a180a180a180a180a180a180a180a180a180a180a180a180a800be30be3
0be30be30be30be30be30c5f0c5f0c5f0c5f0c5f0c5f0c5f0ca10ce50d22
0d220d220d220e200e200ed70ed70f76102410fc12031270127012701270
12701381138113811381138114d9157d157d157d157d157d157d157d1613
161316c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c816c816c816c816c8
16c816c816c816c816c816c816c816c816c816c816c8000100000c4f0122
00490083000500020010002f00550000039fffff00040002000000010012
0002000200000006000b0000436f7572696572204e6577000000ba0054ff
c003c0b2553340b803c0b23a3340b803c0b30e243280b803c0b30b0d3280
b803c0b209333f412f03c0007003c000af03c000cf03c00004005f03c000
7f03c000af03c00003001f03c0003f03c0005f03c0008f03c0000400a003
bb00b003bb00c003bb00d003bb000400a003ba00b003ba00c003ba00d003
ba0004003f03b8000103b703b6b2241f40b803b4b3192432ef411a03b300
ff03b300020391038b0021001f035e038b0021001f035f038b0021001f03
8f038b002a001f0390038b002a001f038d038bb23b1f0f4109038b000100
ef038b00ff038b0002ffc0039cb2474f32b9ffc0039cb2373c32b9ffc003
9bb2474f32b9ffc0039bb3373c321f4119039c00b0039c00c0039c00d003
9c000400ef039c0001001f039b00b0039b00c0039b00d0039b000400ef03
9b0001ffc0039cb2212932b9ffc0039bb2212932b9ffc0039cb20f1632b9
ffc0039bb20f1632410a035903560032001f035803560032001f03570356
b2321fbf41600355000100af0355000100a003540001008f03540001005f
03540001004f03540001007f03550001007f03540001006f03550001006f
03540001003f03550001003f03540001003f03540001002f03540001002f
03540001001f03540001000f03540001035203530029001f0351034a0029
001f035003450025001f034f034a0025001f034e03490025001f034d0347
0025001f034c034a0018001f034b03450012001f034a03460018001f0349
03450044001f034803460044001f03470346b2441f3041700346005f0345
0002000f0344001f0344002f0344003f03440004000f0344008f034400a0
034400df03440004005f0344007f034400cf03440003002f034400010344
03440343034303410341000f0340001f0340002f0340000303400340033f
033f033e033e000f033d0001033d033d0040033c0001001f033c002f033c
003f033c004f033c005f033c00c0033c00d0033c0007033c033c00200335
003003350040033500500335006003350005000f032c002f032c008f032c
0003032c032d0024001f0321028c0014001f0320028c0014001f031f028b
001e001f031e028bb21e1f40410902b4005002b4006002b4007002b40080
02b4b205120f4114028b001f028b002f028b004f028b005f028b007f028b
009f028b00af028b0008003f028b004f028b400b023f023f034f024f0304
40b80329b33c3c3240b80329b333363240b80329b31c1d3240b80329b30c
1a320f41720329007f0329009f03290003000f0329002f0329003f032900
03000f0329001f0329000200af032700bf032700cf032700df0327000400
0f0327004f0327005f0327008f0327009f032700af0327000600bf032700
ef032700ff03270003006f0327007f0327008f0327009f032700af032700
05000f0327001f0327002f0327004f0327005f03270005000f0328002f03
28005f0328007f032800af0328000500df03280001000f0327000f032800
500328008f032800bf0328000500df03220001008f03220001003f032200
4f03220002002f0322003f03220002000f0322001f0322b202090fb8028b
b2013a0f4137028c004f028c0002000f028d002f028d003f028d0003002f
028b0001002f028c003f028c004f028c008f028c00af028c000503b903b9
032903290327032703280328032203220321032103200320031f031f031e
031e02900290028f028f028e028e028d028d028c028c028b028b4014af2b
bf2b025f356f357f358f359f35af35bf3507bb0261026102600260400a00
16160000001211081a41100204005c000d01fa005c000d01ad005c000d01
72005c000d0140005c000d0117401a5c0de45c0dc85c0d995c0d955c0d58
5c0d4e5c0d465c0d2f5c0db8016240172b0ddb2b0d902b0d562b0d362b0d
352b0d332b0d292b0d411101590157000d00be0157000d00420157000d00
320157000d00220157000d001d0157b20d0009bc015b00210801001f0127
b421811fe521b80401b21f8321b80801b21f8221b80401b21f5b21b80401
b21f3b21b80801b61f3021671f2c21b80401b21f2621b80401b21f2421bd
0401001f005501ac0007012b402c07c9075f07400739072e072d07280727
0723071f071408120810080e080c080a080808060804080208000814b8ff
e0402b000001001406100000010006040000010004100000010010020000
01000200000001000002010802004a00b013034b024b5342014bb0c06300
4b6220b0f65323b8010a515ab005234201b0124b004b544218b0372b4bb8
07ff52b0382b4bb009505b58b101018e59b0382bb00288b801005458b801
ffb101018e851bb0124358b90001012c858d1bb90001012c858d59594bb0
095058b104018d8d590016763f183f123e113946443e113946443e113946
443e113946443e11394660443e11394660442b2b2b2b2b2b2b2b2b2b2b18
2b2b2b2b2b2b2b2b2b2b2b2b18b0372b1db0964b5358b0aa1d59b0324b53
58b0ff1d594bb8040153205c58b9023802364544b90237023645445958b9
0a800238455258b902380a804459594bb8040153205c58b9002002384544
b90021023845445958b90a800020455258b900200a804459594bb8040153
205c58b9001e02374544b90025023745445958b90a80001e455258b9001e
0a804459594bb8040153205c58b13d214544b1212145445958b90a80003d
455258b9003d0a804459594bb8040153205c58b167214544b12121454459
58b90a800067455258b900670a804459594bb8030153205c58b121214544
b1212145445958b907e00021455258b9002107e04459594bb8030153205c
58b121214544b11e2145445958b907e00021455258b9002107e04459594b
b8030153205c58b121214544b1252145445958b907e00021455258b90021
07e04459592b2b2b2b2b2b2b2b2b2b2b65422b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b01b9004a01d6b1437a4565234560
23456560234560b08b766818b080622020b9004301d64565234520b00326
6062636820b003266165b801d6236544b043234420b14a7a4565234520b0
03266062636820b003266165b07a236544b04a2344b1007a455458b17a40
6544b24a404a4523614459b347612aad456523456023456560234560b089
766818b080622020b12a614565234520b003266062636820b003266165b0
61236544b02a234420b147ad4565234520b003266062636820b003266165
b0ad236544b0472344b100ad455458b1ad406544b247404745236144594b
5342014b5058b108004259435c58b108004259b3020b0a124358601b2159
421610703eb0124358b93b21187e1bba040001a8000b2b59b00c2342b00d
2342b0124358b92d412d411bba04000400000b2b59b00e2342b00f2342b0
124358b9187e3b211bba01a80400000b2b59b0102342b011234200184569
444569447373184569444569444569444569444569444569444569444569
44456944456944456944456944456944456944456944737373745e735e73
7373737473737473737374757373742b2b2b2b007300737400435c58410c
001f028b001f028d0002000f028b000f028c000f028d000373735974002b
2b2b2b2b7375004569447374456944734569444569444569447345694445
69444569447574737301732b2b2b2b2b2b2b2b2b2b2b2b00737373737373
73737373737373737373732b2b2b012b002b012b002b017375007375012b
2b002b2b0073752b2b2b2b2b2b0173012b012b73017300737374752b2b2b
2b2b2b00000000>
[11665 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 6086 55 <0001008f0000043c04920023008e402a0f090c3510101d09221c1f362323
1d1c0208053501011d081319163612121d1923121e1b1a0209080819b801
6fb61010111e000001b8016f4020101c2f1c601ccf1c040f1c3f1c4f1c5f
1c701c8f1caf1cdf1c081ce925c26f182b10f65d71f43c10fd3c10e4003f
3c3f3cfd3c0110ed0010f5d43c10ed0110f5d43c10ed0010f5d43c10ed01
10f5d43c3130011133321615140623212226353436333311211114062322
2635112111140623222635110290da1e1a1a1efdf71e1a1a1edafea81713
121803ad17131317043efc16171312181812131703eafedd1f1a1a1f0177
fe891f1a1a1f0123>QJJAAA+CourierNew AddT42Char 
1 7598 72 <00020080ffdf042f03800019002000d040690a1699150232024202520263
02c602c613ca19da12da19dc1be318e51ffa160d191c2a1c3402381e4a1b
4c1f5c1b5a1f6f1b6c1f7e1b8c1b991c991eb7050f7516ba1cc403c412c9
1cc91e0608c5111a2020000101111d2117070421110b0c541a3ba0000170
000100b801e5401722203b013ba014016f14bf14cf14df14041419212aac
18b8012c852b4e10f45d714deded10f65d71ede4003fed3fed12392f3cfd
3c10ed3130004bb00c534bb024515a58b2161406b8fff0b41b141f1e02b8
ffec383838383859005d71015d7101211616333236373633321615140706
0623220035340033320007262623220607042dfca816e5a95ece41130e10
181030f581d8fedf010fc8ce010a5719d59393d41a019da3c73e330f1911
11103257011bc9b70106fef3818baeac8d00>QJJAAA+CourierNew AddT42Char 
1 9986 86 <000100cfffdf03fe0380004401f14088143f1c4102124c0059006944ac20
ac37a138cc13c942de13d616d63edb42eb13e434e842fc13f434f842120b
130616053e09421f131516153e1b428b229534bb0f0b57135a3869386a3b
7a387e3b8938893ba514b2140a8e3bb51f0251082b29232631403d3c341a
180f0e07150c390034323023042e360f0e0c030a000311193b3d3d211121
430ab80135b403202e012eb80196401c26362121003b075539214f1e5f1e
6f1e031e1a463154233b29152140b8ffc040160f193f40596f2901291945
43070306260a210b5e8018b8012c852b003f3f3f3f014e10f45d4df4012b
ed10fde44e10f65d4dfdfded0010ed10ed5d10ed10fd11392fed11123912
17391112173901111239121739111239391239313043794038374212201c
251325173e151f003b1b391f013720391f011242151f00163f181f001718
3e3d3a1d3c1f011b1a3b3c381f361f001441111f01002b2b103c103c2b10
3c103c2b012b2b2b2b2b2b8181004bb011534bb024515a58b43b14340a1c
bcffe70017ffec0044ffecb23e1437b8ffecb322163c1c38383838383838
383859015d7100715d435c58b90038ffec40090d163f3b140d163f38b8ff
ec401810153f3b1410153f44140f143f44140c103f44140b0f3f1cb8ffec
b30f193f38b8ffecb70f193f00140f193f002b2b2b2b2b2b2b2b2b2b5900
5d0134363332161515140623222627262726232207061514171617161716
161514062322271406062322263535343633321615141716163332363534
27262426263534363332037c181213181813111702063852878d4e3b4630
86af44615fcec7c77f08150d1218171312191723996fa4a05152fec7884c
d493ae032b1d1a1a1f901e1a16193c2738392b353c281c0f1318237c486b
a76522140e1a1ead1e1a19152e1f303f7a444e2f2f2034683c6c7f00>QJJAAA+CourierNew AddT42Char 
1 10674 87 <00010092ffdf043b0492002c00c94024fb1b010d1b1a1b02a40ab50ac20a
d30ae40a05760e860e950ea60ec60bd60b0617080107ba02ae0004017240
150804040708220110140915110f1011121405190c29b801a340111e3b24
24073b010100060c21190b148804b801a940142c2c0809202621c6001c10
1c201c701cbf1c051cb802e5b32d2aad182b10f65de43cfd3c3c10f4e400
3fed3f3c10ed3c10fded111217391239011112390010fd3d12392f180110
f5f4c431304379400e1a1b0a0b0b1a091f000a1b0c1f00002b012b818100
715d01715d01213216151406232111141633323637363332161514070606
232226351123222635343633333534363332161501ba01c81e1a1a1efe38
757155c637140d10180d20f77193ae9b1e1a1a1e9b181213180362181312
18fdd1496233200d19110f0d214d8a75022f18131218f81e1a1a1e00>QJJAAA+CourierNew AddT42Char 
1 5376 48 <00010018000004c0049200380227403ae21de61e0246004a38c000d000d3
01d81cd11df600f601f61d0a2500271d271e2638471c571ca81eb91ed400
d401d41dea01e81d0d581e010c12b802a440139f0f010f0f1f0f020f2913
0f0f12131d0c1f25b802a440100022502202222926222225261d1f2f35b8
02a4400b323336323235361d2f0b05b802a4400b083304080805041d0b1b
15b802a440139f18010f181f1802182914181815141d1b2e28b802a4400e
002b502b022b29272b2b28271d2eb8ff8b401c1d0100201c1d1d1e010214
011d1e01021e3800001e1d1e141d1d1e00b8021d400b1e25261f1f1e1e1c
1d2601b8021d404a1c1c1b3837020315261b022e2f2736262f2f0b0b0c04
13260c08262738381d1e1e1d37361e274000cf011f275f276f27af27bf27
052740272934274012350f278f27d027e027f0270527b802e140151d1f01
5f01028f01cf01020101041c1c040202041db8027940161320030414041e
4f13cf13df13ef1304131939c26f182b4e10f45d4ded3c103c1a1910ed18
11392f11392f11392f5d711910ed5d2b2b711810e61a10fd3c11392f1139
2f103c003ffd3c103c103c10fd3c103c3ffd3c3c3c3c103c10fded103c10
3c10ed10ed87052e2b877dc487082e182b057d10c42b180010fd3d12392f
180110f55df4c40010fd3d12392f180110f55d71f4c40010fd3d12392f18
0110f5f4c40010fd3d12392f180110f5f4c40010fd3d12392f180110f55d
f4c40010fd3d12392f180110f55d71f4c431300172715d00710123012311
333216151406232122263534363333112322263534363333010133321615
14062323113332161514062321222635343633331123029e60febd109b1e
1a1a1efeca1e1a1a1e47351e1a1a1ece013e0139ce1f1a1a1f34461f1a1a
1ffecb1e1b1a1f9b12015f02dffc16171312181812131703ea17131317fd
2c02d417131317fc16171312181812131703ea00>QJJAAA+CourierNew AddT42Char 
1 628 11 <0001025dfefc03af04e7001b00504027290c2a100205170e130a12160606
0510171613153e13054d090913a00e24000010000200191ccaba01050018
0119852b4e10f45d4dfdf43c10ed10e4003f3c3f3c111239390111123939
3130015d0134121237363332161514070602151412171615140623222726
0226025d3caa270c0e1219076e5e5e6e0719120e0c25a84001f273010201
52230b18110a0ccafeb8a4a5feb8c90c0a11190b22014afe>QJJAAA+CourierNew AddT42Char 
1 7232 70 <000100abffdf044b0380002a00f0b5210a0b0f3f15b8fff6402c0b0f3fc7
15dc25d927e01fe021eb25ea27072415271644204d254d2755205d255a27
6a0f6a19692589190c16b8fff240731314591356156b256627f61a05061a
1910151a29102912251a8a109b109618951aa515a5190c16232612110f19
141b010003080e191c170f0d0003110b0088112129070bb304061ca21721
230b0e3b0859a01f01901fc01f021f1a2c142126400f093fa026010f261f
2690260326192bc48e18b8012c852b4e10f45d71012b4ded4e10f65d714d
f4ed003feded3fed3fede411121739111239011112173912393911391112
39313000715d383801715d012b2b01353436333216151506062322262726
26232206151416333236373633321615140706232200353400333203c518
12131801171311170206af94bbc2d6aa62cb521510111765a3c8cbfefb01
0bcbc1030d1c1f1a1a1fbe1f1a171b4780ea97a3d448501417112b426b01
03c7cb010c00>QJJAAA+CourierNew AddT42Char 
1 802 12 <0001012dfefc027f04e7001b005040290902091a1902191a0405170e1309
1206171610050613054d0a0a153e13a00e240f001f0002001a1da4ba014d
00180119852b4e10f65d4dfdf4e43c10ed003f3c3f3c1239390111123939
3130015d0114020207062322263534373612353402272635343633321716
1216027f3caa270c0e1219076e5e5e6e0719120e0c25a84001f173fefffe
ad220c19110a0cc90148a4a50148ca0c0a11180b22feb6fe>QJJAAA+CourierNew AddT42Char 
1 11002 94 <00010195fefd033a04e700310098b5d512d5220207b8ffdeb71e3516221c
22341eb8ffde40141c22342322242e111210030f052c5b403f240124b802
18b50020085b400fb80218402100201a0027d42e0cd4040524131314d41a
2f2e24212120d4001a101a021a1932fab9017d00182b4e10f45d4df43c10
fd3c10f43c10fd3ce410e400192f2f1a10fd181aed191a10fd5d181aed01
11121739111239393130002b2b012b710116171615111416171617161514
062322272635113426272626353436373636351134363332161514070607
060615111406023632121742311f0a0d1a194f354742331c16161c344178
54181a0d092032412801f226222d3efe9939490503090c12131732456301
68374b04031614131603044b3701685e7d1812120c0a03054a37fe983f4d
>QJJAAA+CourierNew AddT42Char 
1 2188 20 <000100e4000003e804f8001b00b1b212081bb8fff8400f11060008091b40
1b5012501b04090fba02a9000c019b4009100c0c0f10be090802ba02a900
05019b40120105050201be081918171615141307121b14ba02d700110267
b7000509080c190214bb02810011001702ce400a00671111016700100110
bd0270001c00a101ce0018012c852b10f65ded3c10fded10f4ed003f3c3f
eded01111217390010fd3d12392f180110f5f4c40010fd3d12392f180110
f5f4c43130005d3838383801112132161514062321222635343633211105
062322263534373637029001201e1a1a1efd6c1e1a1a1e0120feee14090f
190a081904f8fb5c17131218181213170430560619110f0d0809>QJJAAA+CourierNew AddT42Char 

1 0 3 <> QJJAAA+CourierNew AddT42Char 
1 9222 76 <000200bd0000041605110003001c007f402a221932194019521963197419
841907130d10581414220d060c09580505220c161c19951515221c03c502
b80194b61c060d0c0a0001bb015f0003000201e0400e04040520154f1401
14191d517f182b4e10f45d3c4dfd3c10fd3cfd3c003f3c3ff6ed10ed0110
f5d43c0010ed0110f5d43c0010ed0110f5d43c3130015d01152335131121
3216151406232122263534363321112322263534363302907c7f014a1f1a
1a1ffd181e1a1a1e014af51e1b1a1f0511d9d9fe51fcf217131218181213
1702b91812131800>QJJAAA+CourierNew AddT42Char 
1 9440 81 <0001006c000004570380003801874037d506d50802c406c40802a308b206
b20803710780070263076408641b039b1ba506027b1fb301b402031c1f6a
1f0200010402021e081218b802ae40100f151f1502154619151518192212
292fb802ae400b2c5c302c2c2f302229110bb802ae400e000e010e460a0e
0e0b0a22112822b802ae40100025102502255c212525222122283832b802
ae400d3546313535323122323b380601ba01e00020016340131d21040729
28281212110a090a201adf190119b802a340103a002120319030a0300230
19394761182b4e10f45d3c4dfd3c10f45d3cfd3c003f3c103c103c3ffdf4
ed3fedfd3d12392f180110f5f4c40010fd3d12392f180110f55df4c40010
fd3d12392f180110f55df4c40010fd3d12392f180110f5f4c40010fd3d12
392f180110f55df4c4b10602435458b90001ffc0b31b243401b8ffe0b211
1a34002b2b593130437940141b1c05080708060802061c051a1f011b081d
1f01002b012b2a8181004bb01b534bb024515a58b21f1401b8ffdeb11b14
38383859007171715d0171715d5d5d011536363332171616151133321615
140623232226353436333311342623220607113332161514062321222635
3436333311232226353436330157588e59604f385b471e1a1a1ee11f1a1a
1f46826d537a715f1e1a1a1efeee1e1a1a1e5f471e1a1a1e03627f594429
1e8b49fdef17131218181213170203597b4385fdf1171312181812131702
b91813121800>QJJAAA+CourierNew AddT42Char 
1 6724 68 <00020090ffdf045603800028003601624051aa07a41faa2e032607251f3b
047413771a761b8014851a9214951aab07a014a41aae2fb507bc0eb114b4
1ab91ecb0ef431150a0119012a01039a11941a027b2e8a2e9b2eaa0eab2e
c531d531e531082822b802ae401a252f21252522212228121d1317293621
0036290103330c092c36b801e0405a018828000a3321030b0921002c102c
702c032c293b0c0c28149c10211d073321030b0d00202021400d163f0f21
012f213f214f215f219f21af21bf21df2108211a38178f302106400d163f
6f069f06bf06df06040619372abb18b8012c852b4e10f45d012b4dfde64e
10f65d71012b3c4dfd3c003fed3feded12392fed2f5ded3fed3f3cf4ed11
12391217390111123939123911390010fd3d12392f180110f5f4c4313000
4bb019534bb024515a58bf0007fff80034fff00035fff00019fff4b31208
2e0838383838383859005d71004bb00b534bb014515a58bb001efff00013
ffc038385900715d015d2135062322263534363332161735342623220706
232226353437363736333216151133321615140623032626232207061514
16333236370358b7d097aae0d73a884f808062b1200910170a0e639c509f
b2701f1a1a1fc53b8449b7674e77726dbb63799a996f7ab60f1088456639
0a1812110a0f1a2a9d63fdd41713121801a211104f3b524c68575f00>QJJAAA+CourierNew AddT42Char 
1 5024 32 <00020065018a0469030c000d001b0037b2072401b802f8401b15240f0b19
1a1d044f12014f12010f122f123f120312191c4f7b182b4e10f45d5d713c
10f63c002f4dfdf6ed313001212226353436332132161514060321222635
3436332132161514060431fc6c1e1a1a1e03941e1a1a1efc6c1e1a1a1e03
941e1a1a02b71813121818131218fed31713131717131317>QJJAAA+CourierNew AddT42Char 
1 1610 19 <000200e5ffe203e805050019002f01adb312020a23bafff20003fff4b22d
08294109fff20028fff40027fff70016fff70015fff7b61c0e090e080e02
bafff80010fff2b21d0e2dbafff2002afff2402329051c0e1f0e22126d08
1e1c12002e0127050d22230e213d122c3d051205050d1a3d00b802ccb631
243d0e1930a1ba01060018012c852b4e10f44ded10f6ed003f3f10ed10ed
12393911123911391112393931304379405a022e10261819171916191519
141905061c1b1d1b1e1b1f1b04062726282629262a2604060b0c0a0c090c
080c070c05060326221124400020131a40012b062540002d042f4001230f
2140011b19214001260c2c40002e022c40002b2b2b2b012b2b2b2b2b2a2a
2a2a2b810038383838383838380138383838383838383838383838435c58
4015111e13193f141e11173f111e11173f161e1e123f22b8fffb40401e12
3f27141c113f27141b103f2714190f3f2714170e3f2314170e3f2714160d
3f2314160d3f03141e123f031e120b3f2d0a120b3f161e120b3f1d141921
3f22b8ffec401719213f0f14171f3f2314171f3f020a10113e170a10113e
012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b002b2b2b590115100706
232226272626272635351037363332161716161716073426272627262322
0215151416171617163332123503e881659a4a832e1d450f1781659a4b82
2e1e44101654432a192839478da0432b182839488ca002dbd0fef19e7c3b
3521923d5673d001109e7c3b3522923c567f77cd3d231923fee0c0b977ce
3d2219240121c000>QJJAAA+CourierNew AddT42Char 
1 4654 30 <00020138ff2a03000362000d001800584011c00ed00ed810e00ee910f00e
f910071713b801aab3300f010fb8011a400908b2000ff310c11604b80116
400d0b340ed20f160116da1900066db9011e00182b003f0110f45df4f4ed
10fde40010edf45df4393130015d01333216151406232322263534360321
010606232226353437025425384f503725384f515c0108fee51519111820
06036250373b4e50373b4efdccfe3022121e150c1300>QJJAAA+CourierNew AddT42Char 
1 2454 21 <000100ab000003d70505002b0120b10602435458b71b0b2b0504140000b8
015bb50a0c143d2205003fed3ffd1112173931301bb90016ffde402c1b24
34480f7a0e862786288629a628a629bb0cb42a090d120a16350c382a0429
232a1e2b14271e28230c140bb8ffec400dea12ed16fa12fd160428080802
ba02a9000501dcb70105050201be0805bd01e40009000b010d0001015bb4
09090a0c1ab801f9b4143d220500bb015b000b0002015bb408e1113d2541
0d026f002d0017015b001e010d000b026d002c019101060018012c852b10
f6f4ed10f6edf4ed10ed003feded3f3c10fde410ed0110fd3d12392f1800
10f5f4c431304379401c1f2412181625202615211840001323114001171f
14400112241440012b2b012b2b2b2b8181005d3838383838383800710171
2b5937213534363332161515213524373e02353426232206070607062322
263534363633321615140606070007fd028518131218fcd40100f271541f
ae7b6eaa1906090c10111769b9619de2265b76fed8ba54211e1a1a1e757c
e6ee6f684f286ca67e5d18070a171030a45eda8a3a617374fedca100>QJJAAA+CourierNew AddT42Char 
1 4826 31 <0001006200410439044d00110083401eb106010809092400011400090a00
010a0909240011140009080011085b01b801aab3000a5b11410901aa000a
01bc000c0296001102ab000801bcb206b901b802ab400a2f000100191200
4f8118b80123852b00192f01184e10f45d4de4edede4eded0019f418ed19
10f418ed87082e2b0e7d10c487082e182b0e7d10c43130015d1301363332
1615140701011615140623222762038c160b111922fcf603092219110b16
024701fa0c19111913fe50fe50131911190c>QJJAAA+CourierNew AddT42Char 
1 5168 47 <000100800000045804920021006c4038110b0e3512121d0b211b1e350000
1d1b030906db02021d09141a173513131d1a02260b1b1a020b080f090109
1a2300011e13121922a579182b4e10f43c4dfd3c4e10e65d003f3f3c4d10
ed10ed0110f5d43c10ed0010f5d43c10ed0110f5d43c0010ed0110f5d43c
313001112111343633321615112122263534363333112322263534363321
32161514062301d5022e18131218fc601e1a1a1ec8c81e1a1a1e01e51e1a
1a1e043efc16014e1e1a191ffe5e1812131703ea1713131717131317>QJJAAA+CourierNew AddT42Char 
1 8264 74 <0002007dfe7e047e038000270033011e40314514701402dc21d325ec21e4
25fb21f424066b296d2d632f63337a0d7c2971338c2980339d299133ab29
a033ba1e0e0208b802ae4062000501052f09050508092202001e2b311820
1017201111100e1e933121200a2b2100932607083b0206010601281d2001
200a0a1009a009b009030f094f095f09af09cf0905091a352e2180239023
a023b02304bf23cf23e023f023042319342a6118b8012c852b4e10f45d71
4ded4e10f65d713c4d10edfd3c3c003f3fed3fe4ed3fede43f3c10ed10ed
1112393910fd3d12392f180110f55df4c43130004bb00c534bb024515a58
bb001bfff4001afff4b22a0832b8fff8b21e0800b8fff4b22c0830b8fff4
b2290c33b8fff8b22d162fb8ffea3838383838383838383838385900715d
015d013533321615140623231114070e0223232226353436331732363736
35350623220235341233321334262322061514163332360381c51e1a1a1e
712418705c4dee1e1a1a1ef14a77271687d5adfbfbadd587cb8d8dcaca8d
8dcb02c89a18131218fcb954422c5e2817131318014c492a41fcb90101b5
b50100fe4b94cccd9394cdcd>QJJAAA+CourierNew AddT42Char 
1 8696 75 <000100550000046d04e700380172402d991afb2002040115016406750690
019402a001a402b001b3020aa506a607b405b507c607d807df1a071a0811
17b802ae40100f141f1402145c18141417182211292fb802ae400b2c5c30
2c2c2f302229100ab802ae400e000d010d5c090d0d0a0922102822b802ae
400b255c212525222122283832b802ae4023352f31353532312238012029
1c210429282811111038000407100a08092019df180118b802a3400b3a00
212031bf30cf300230b801ebb339476118b8012c852b10f65d3cfd3c10f4
5d3cfd3c003f3f3f103c103c103c10ed11393910fd3d12392f180110f5f4
c40010fd3d12392f180110f5f4c40010fd3d12392f180110f55df4c40010
fd3d12392f180110f5f4c40010fd3d12392f180110f55df4c4b106024354
58b90001ffc0b31b243401b8ffe0b2111a34002b2b593130437940101a1b
050706251b05191f011a071c1f01002b012b2b8181004bb012534bb02451
5a58b90006fff4b5200c1f141e163838383859015d00715d011136363332
161615113332161514062321222635343633331134262322070607113332
161514062321222635343633331123222635343633015250935b62895c5e
1f19191ffeef1f1a1a1f5e83755c412f6c5f1e1a1a1efeee1e1a1a1e5f71
1e1a1a1e04e7fdfb5747458f4ffdf7171312181812131702035b7a2d2077
fdec1713121818121317043e18131218>QJJAAA+CourierNew AddT42Char 
1 1422 14 <000100900043043d044d001f005b4031195b1f1f00000814a7105b04a708
0f5b0909081cdc005b08175b1111185b101008015b070708dc300c010c19
20085081182b002f014e10f45d4df43c10ed103c10ed3c10ed10fde40010
3c10ed10e4fde4103c103c10ed3130011114062322263511212226353436
3321113436333216151121321615140623029118131218fe8c1e1a1a1e01
741813121801741e1a1a1e021ffe5c1e1a1a1e01a41713131701a21e1a1a
1efe5e1713131700>QJJAAA+CourierNew AddT42Char 
1 2872 22 <000100c3ffe20401050500380111b36c380100b8fff24033323235113a24
49244a2543387200067f218638950493359638a535a638b913ba17cb13cb
14cd17db13dd17ec13fa17ff2f1100b8fff2b514221b243411b8ffde401c
1b243429080f0b2b2811032f211e1a180005231c00191e2028262c19b801
5bb32020122cb8018db3263d330eb8018db5123d06233d36b8010d400a15
3d031c1c39031a3a2fba010d001c0281b70b19393305060decba01800018
012c852b003f3f014e10f44de4e44e10e612392f4d10edf4ed0010fde410
fde412392fed111239123911390111121739121739113931304379401c34
352425131404052534234001130515400124352640011404124000002b2b
012b2b81818181012b2b385d713800387101161615140623222627263534
363332171633323635342626232226353436331732363534262322060706
06232226353437363332161514060313747af5b86ce82e0f171010149bad
92c561b65d1e1a19194871939a7c57922c10110b111857799a9fcc6202ab
34b56297e75c30101210180f73b7704b905317131218018a5b5e903c3414
091710283d55bf845496>QJJAAA+CourierNew AddT42Char 
1 6334 62 <0001023dfefd039504e7001100464026110b0ef20000320b020805f20101
32080b0a10081200012409100a300a500a030a191265a9182b4e10f45d3c
4dfd3c003f3f3c10ed0110f5d43c0010ed0110f5d43c3130011133321615
1406232111213216151406230291cc1e1a1a1efee001201e1a1a1e0492fa
bf1713131705ea1813121800>QJJAAA+CourierNew AddT42Char 
1 6602 64 <0001013cfefd029404e70011003e4020110b0ef20000320b020805f20101
3208100b12090a24013f000100191265a9182b4e10fc5d3c4dfd3c003f3f
ed0110f5d43c0010ed0110f5d43c31300511232226353436332111212226
35343633023fcb1e1a1a1e0120fee01e1a1a1eaf054118121318fa161713
1218>QJJAAA+CourierNew AddT42Char 
1 544 10 <000101e1028f02eb04e700080029401005b6000001ae029200ae8f08ff08
0208bc024d000900fe014e00182b10f65de4fde4003fed31300121030606
2322262701e1010a4606211819200604e7fdf32a21212a00>QJJAAA+CourierNew AddT42Char 
1 110 9 <000200feffdf03fe04360038004100f6403a7c077c097c39ca01cc20053b
2a56306723672f7b07843e8941a907a23ec33e0a242f2940352f3a405d26
553a0624303131233941010000093832b802b8403135359b313535323132
383123233131240009140000094124013004092339032a06412401300409
2339030f032e5b272726b8011ab41e2c400f24bb018f0020000103054017
38000a3f2c030b2a351a43215b0cb13c2c061942f1bc18b80124852b4e10
f44dedf4ed4e10f63c003f4ded3f3cf41a19ed182f1aedf43c10ed111217
39173901111217391739872e2b0e7d10c418000810fd3d12392f180110f1
2ff4c4870e7d10c4c4c4870e10c43c313001715d005d2127062322263534
363726263534363332161736333216151406070726262322061514171336
373332161514060623060717333216151406230106061514163332370354
405a8e78b67b6c4a1d96692244222b0a11190e15411f412245675ae83d23
521e1a0f1427303e39471e1a1a1efe435463855370496384be896aa42077
4b28639514151619120c140b231c1b663f418ffe8f739718120d1608a95d
5617131218020a147b55658e7e00>QJJAAA+CourierNew AddT42Char 
1 3616 24 <000100c4ffe2040104e7002c00de40220b1b091c220929193a18052d294c
295f296e299829c919db18eb180819221b243416b8ffde40131b24341b20
230814102024161f1a011f1d2100bd015b00250001015b002101e440091d
3d04040a00262513b801e34009173d0a1a3d10070107ba02850029026cb5
250001672524b801ddb710192d25040a0decba018000180124852b003f3f
014e10f44df43cfd3c10edfd5ded0010fde4103c1112392fedfded10ed11
1239011112393912391139313043794018181c05091c051a400118091a40
011b061d40011908174000002b2b012b2b81810038012b2b5d7101113636
333216151406232227262726353436333217163332363534262322070623
2226351121321615140623017f4a883d9ed5f0b4776e4e40261810111397
b293c0a6808383200d1216024a1e1a1a1e0492fe651f1fdeb5c8f8352537
21161219128dc9a78ead45101816022d18131218>QJJAAA+CourierNew AddT42Char 
1 3966 26 <000100d3fffe03d604e700150080b10903ba02a900060160402a02060603
02be090c0d0d67150014151500150900010c170b150c0003100102670b0a
110f100a04100c0bba015b000102a8b417091916ecba01060018012c852b
4e10e44d10f4ed003f3f103c3c103cfd3c1117390111123912391139870e
2e2b0e7d10c4180110fd3d12392f180010f5f4c431300135211514062322
26353521150106062322263534370381fda6171312180303feae08160e12
1806046c264a1e1a1a1e9f86fbc81a1118100a12>QJJAAA+CourierNew AddT42Char 
1 4166 28 <00020113ffe204170505002500330150402d0708042a072b002eaa24ba24
062622142434232c1424340e181424340d0e1e32340c221e32343216332c
272c15b8fff2400f5b31e512f923f32af42e05bf000131b8ffdeb3142434
23b8ffeab2271622baffea0032ffe8402d1e32340614b531c431d331045e
080d2400260e0c270b28092a080c070e0c270d2600260e0d040f24293d0a
0500b802a5400a2f3d03030a213d160d26ba0124000d02a6400a243d0f1a
351ae1073d2cbd02a80034013801810018012c852b10f4fde44e10f64ded
f4e5003fed12392fede43fed011112173911123939111217393130437940
27272e222304150d0e0c0e02061110121013101410040605252a092c4000
280b2640012726221524b801ac4013012e042c40002b08294001270e2940
01231021b801acb5002d062f4000002b2b2b2b012b2b103c2b2b2b2a2a81
8181005d2b3838382b71015d383838382b2b2b2b2b710106062322262635
343633321617161514070606070623222726353436333217163332003534
272626232206151416333236373603bf41b35e57a360bfa072bc34433926
935c7e885a391a18110c172733d5013214359d696ba2a2663b73332102c6
737464c16a9afd8e87ade5b27650962f3f22101811170b130133e72ad8cb
93b48d89b340402b>QJJAAA+CourierNew AddT42Char 
1 6466 63 <000100e3ff5103e70567000f004cb509280b193401b8ffd8400d0b193409
0919096e016908040eb801c8b4064d015b08b801b2400c005b09bd2f0e01
0ed71006c7b901cb00182b002f0110f45dfdedf4edfd00ed3130015d2b2b
01011615140623222701263534363332013a02a30a19111c11fd5d0a1911
1b0542fa58160a10192505a9150b1018>QJJAAA+CourierNew AddT42Char 
1 3302 23 <000200d6000003d704e7001d002100d1400d00030020021e21051d1f1c16
19b801e6b61d1dbe160f1512b8016040120e0ebe15202121670203140202
0302211f20b8015bb703030405211e0d1eb8015bb2000e00b802f2b21d1d
1cbb015b0016000f015bb2161503b80283400f01050e671d1d1f000f1e01
001e011eba026e0021015b400b0001010119220404150ca1ba01d2001801
24852b003f3f014e10f4714dfdf65d713c3c3c10fd3c10e400103ced10fd
3c10ee3c10ed3c103c3c103c10fd3c113905872e2b7d10c4180010ed0110
f5d43c0010ed0110f5d43c0f313071012135013311333216151406232311
333216151406232122263534363333111123010303fdd301d3af461f1a1a
1f46461f1a1a1ffec81f1a1a1f9d2cfe57015f610327fccc17131218fef5
1713121818121317015f02dffd21>QJJAAA+CourierNew AddT42Char 
1 976 13 <000100e2020703e304e7002d01344083141c1023401cf51af82405431987
138014031f1b1f244c24032a24600d64136d24cc17f312f41bf024082c2a
220300280a140e081421122c2a270f0a050425002d2d2425241425252424
23242523241c1b141c1c1b1b1a1b1c1a2413121413131209080824121114
1212112d2524231c0500281a13121109050e08240012092d040025b80303
40121107125b08080007244d1b2012bd000e010eb8019a400f08401b4d12
200708240004f9280100b8013d400b4f286f280228192ec7bc18b8012485
2b4e10f45d4df43c10ed10fd3c1a1910ed1a1810ed5ded1a1910ed18003f
3c1910ed183fe43f393911123901111217391112173904872e2b0e7d10c4
870e2e182b087d10c4870e2e182b087d10c4870e2e182b047d10c4001112
17391133330111123939111217393130015d5d00715d0111343633321615
112536333216151406070517161514062322272707062322263534373725
26263534363332170238181312180111130a1018111afeefa91019111615
a9a91515121911a9feee1911180f0b13038f011f1f1a1a1ffee159061911
0f160859e8170d12191de9e91d19120d17e85a08150f11190600>QJJAAA+CourierNew AddT42Char 
1 0 0 <00020067000004670500000300070046b10607b8010cb40201000504b801
0cb403000a0605b8010cb60303021a090704b8010cb6010019084f7b182b
4e10f43c4dfd3c4e10f63c4d10fd3c003f3cfd3c3f3cfd3c313033112111
25211121670400fc2003c0fc400500fb002004c0>QJJAAA+CourierNew AddT42Char 
QJJAAA+CourierNew /CharStrings get begin
/g55 55 def
/g72 72 def
/g86 86 def
/g87 87 def
/g48 48 def
/;########### 11 def
/g70 70 def
/;############ 12 def
/g94 94 def
/;#################### 20 def
/;### 3 def
/g76 76 def
/g81 81 def
/g68 68 def
/g32 32 def
/;################### 19 def
/;############################## 30 def
/;##################### 21 def
/g31 31 def
/g47 47 def
/g74 74 def
/g75 75 def
/;############## 14 def
/;###################### 22 def
/g62 62 def
/g64 64 def
/;########## 10 def
/;######### 9 def
/;######################## 24 def
/;########################## 26 def
/;############################ 28 def
/g63 63 def
/;####################### 23 def
/;############# 13 def
end
QJJAAA+CourierNew /Encoding get
dup 1 /g55 put
dup 2 /g72 put
dup 3 /g86 put
dup 4 /g87 put
dup 5 /g48 put
dup 6 /;########### put
dup 7 /g70 put
dup 8 /;############ put
dup 9 /g94 put
dup 10 /;#################### put
dup 11 /;### put
dup 12 /g76 put
dup 13 /g81 put
dup 14 /g68 put
dup 15 /g32 put
dup 16 /;################### put
dup 17 /;############################## put
dup 18 /;##################### put
dup 19 /g31 put
dup 20 /g47 put
dup 21 /g74 put
dup 22 /g75 put
dup 23 /;############## put
dup 24 /;###################### put
dup 25 /g62 put
dup 26 /g64 put
dup 27 /;########## put
dup 28 /;######### put
dup 29 /;######################## put
dup 30 /;########################## put
dup 31 /;############################ put
dup 32 /g63 put
dup 33 /;####################### put
dup 34 /;############# put
pop
end
%ADOEndSubsetFont
reset_gvm
/TMZDSS+CourierNew /QJJAAA+CourierNew findfont ct_VMDictPut
/TMZDSS+CourierNew*1 
[/.notdef /g55 /g72 /g86 /g87 /g48 /;########### /g70 
/;############ /g94 /;#################### /;### /g76 /g81 /g68 /g32 
/;################### /;############################## /;##################### /g31 /g47 /g74 /g75 /;############## 
/;###################### /g62 /g64 /;########## /;######### /;######################## /;########################## /;############################ 
/g63 /;####################### /;############# 221{/.notdef}rp]
TMZDSS+CourierNew nf
TMZDSS+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
84.8391 269.96 mo
(\001\002\003\004\005\002\006)
[-6.599 -6.59897 -6.599 -6.599 -6.599 -6.7189 0 ]ysh
TMZDSR+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
84.8391 223.641 mo
(\006\012\013\014\015\016)
[-6.599 -6.59898 -6.59901 -6.71896 -6.599 0 ]ysh
TMZDSS+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
84.8391 177.321 mo
(\007\010)
[-6.71899 0 ]ysh
98.0391 342.921 mo
(\011)sh
111.239 342.921 mo
(\012\013\013\013\013\014\015\004\003\004\016\004\002\013\017\013\020\021)
[-6.599 -6.599 -6.599 -6.71899 -6.5993 -6.599 -6.599 -13.3189 -6.71896 -6.599 -6.599 -6.599 
-6.599 -6.599 -6.599 -6.71899 -6.599 0 ]ysh
124.439 342.921 mo
(\022\013\013\013\013)
[-6.599 -6.599 -6.599 -6.71899 0 ]ysh
TMZDSR+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
124.439 309.8 mo
(\017\020\014\007)
[-6.599 -6.599 -6.71899 0 ]ysh
TMZDSS+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
124.439 283.28 mo
(\006)sh
TMZDSR+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
124.439 276.56 mo
(\005\010\011)
[-6.599 -6.59897 0 ]ysh
TMZDSS+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
124.439 250.161 mo
(\014\017\013\020\021\013\014\023\013)
[-13.199 -6.71899 -6.599 -6.599 -6.59898 -6.59892 -13.3189 -6.599 0 ]ysh
TMZDSR+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
124.439 177.321 mo
(\006\021)
[-6.71899 0 ]ysh
TMZDSS+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
124.439 164 mo
(\024\002\015\025\004\026\021\013\014\027\027\010)
[-6.71899 -6.599 -6.59897 -6.599 -6.599 -6.59894 -6.599 -6.7189 -6.599 -6.59897 -6.599 0 
]ysh
137.639 309.8 mo
(\011)sh
150.599 342.921 mo
(\030\013\013\013\013\013\013\013\013\013\013\013\013)
[-6.599 -6.59897 -6.599 -6.71899 -6.599 -6.599 -6.599 -6.71899 -6.599 -6.71896 -6.599 -6.599 
0 ]ysh
TMZDSR+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
150.599 256.76 mo
(\005\017)
[-6.599 0 ]ysh
TMZDSS+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
150.599 236.96 mo
(\006)sh
TMZDSR+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
150.599 230.241 mo
(\006)sh
TMZDSS+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
150.599 223.641 mo
(\031\014\032\013\017\017\013\033\031\033\013\034\034\013\003\004\016\004\002\013\017\017\013\020\010\013)
[-6.599 -6.59898 -6.59901 -6.71896 -6.599 -6.599 -6.599 -6.71899 -6.59897 -6.71899 -6.599 -6.599 
-6.599 -6.599 -6.599 -6.599 -6.71899 -6.599 -6.599 -6.599 -6.599 -6.71899 -6.599 -6.599 
-6.599 0 ]ysh
164.039 179.841 mo
(\003\004\016\004\002\013\017\013\012\021)
[-6.599 -6.599 -6.599 -6.59897 -6.599 -6.599 -6.71899 -6.599 -6.59897 0 ]ysh
176.999 342.921 mo
(\035\013\013\013\013\013\013\013\013\013\013\013\013)
[-6.599 -6.59897 -6.599 -6.71899 -6.599 -6.599 -6.599 -6.71899 -6.599 -6.71896 -6.599 -6.599 
0 ]ysh
TMZDSR+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
176.999 256.76 mo
(\022\004\023\022\007\005\017\007)
[-6.599 -6.59898 -6.599 -6.71899 -6.59898 -6.599 -6.599 0 ]ysh
TMZDSS+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
176.999 203.84 mo
(\006)sh
TMZDSR+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
176.999 197.121 mo
(\006)sh
TMZDSS+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
176.999 190.521 mo
(\031\014\032\013\017\017\013\033\011\033\013\034\034\013\003\004\016\004\002\013\017\017\013\012\010\013)
[-6.599 -6.599 -6.71899 -6.59897 -6.71899 -6.599 -6.599 -6.599 -6.59897 -6.599 -6.599 -6.71899 
-6.599 -6.599 -6.599 -6.599 -6.71899 -6.599 -6.599 -6.599 -6.71899 -6.599 -6.71893 -6.59894 
-6.599 0 ]ysh
190.439 179.84 mo
(\003\004\016\004\002\013\017\013\022\021)
[-6.599 -6.599 -6.599 -6.59897 -6.599 -6.599 -6.71899 -6.599 -6.59897 0 ]ysh
203.399 342.92 mo
(\036\013\013\013\013\013\013\013\013\013\013\013\013)
[-6.599 -6.59897 -6.599 -6.71899 -6.599 -6.599 -6.599 -6.71899 -6.599 -6.71896 -6.599 -6.599 
0 ]ysh
TMZDSR+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
203.399 256.76 mo
(\022\004\023\022\007\005\017\007)
[-6.599 -6.59898 -6.599 -6.71899 -6.59898 -6.599 -6.599 0 ]ysh
TMZDSS+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
203.399 203.84 mo
(\006)sh
TMZDSR+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
203.399 197.12 mo
(\006)sh
TMZDSS+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
203.399 190.52 mo
(\031\014\032\013\017\017\013\033\006\033\013\034\034\013\003\004\016\004\002\013\017\017\013\022\010\013)
[-6.599 -6.599 -6.71899 -6.59897 -6.71899 -6.599 -6.599 -6.599 -6.59897 -6.599 -6.599 -6.71899 
-6.599 -6.599 -6.599 -6.599 -6.71899 -6.599 -6.599 -6.599 -6.71899 -6.599 -6.71893 -6.59894 
-6.599 0 ]ysh
216.839 179.84 mo
(\003\004\016\004\002\013\017\013\030\021)
[-6.599 -6.599 -6.599 -6.59897 -6.599 -6.599 -6.71899 -6.599 -6.59897 0 ]ysh
229.799 342.92 mo
(\037\013\013\013\013\013\013\013\013\013\013\013\013)
[-6.599 -6.59897 -6.599 -6.71899 -6.599 -6.599 -6.599 -6.71899 -6.599 -6.71896 -6.599 -6.599 
0 ]ysh
TMZDSR+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
229.799 256.76 mo
(\022\004\023\022\007\005\017\007)
[-6.599 -6.59898 -6.599 -6.71899 -6.59898 -6.599 -6.599 0 ]ysh
TMZDSS+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
229.799 203.84 mo
(\006)sh
TMZDSR+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
229.799 197.12 mo
(\006)sh
TMZDSS+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
229.799 190.52 mo
(\031\014\032\013\017\017\013\033  \033\013\034\034\013\003\004\016\004\002\013\017\017\013\030\010\013)
[-6.599 -6.599 -6.71899 -6.59897 -6.71899 -6.599 -6.599 -6.59924 -6.59897 -6.599 -6.599 -6.71899 
-6.599 -6.599 -6.599 -6.599 -6.71899 -6.599 -6.599 -6.599 -6.71899 -6.59894 -6.71896 -6.59897 
-6.59894 -6.599 0 ]ysh
243.239 179.84 mo
(\003\004\016\004\002\013\017\013!\021)
[-6.599 -6.599 -6.599 -6.59897 -6.599 -6.599 -6.71899 -6.599 -6.59897 0 ]ysh
256.439 349.52 mo
(\012\012\013\013\013\013\013\013\013\013\013\013\013\013)
[-6.599 -6.599 -6.599 -6.599 -6.71896 -6.599 -6.599 -6.599 -6.71899 -6.599 -6.71899 -6.599 
-6.599 0 ]ysh
TMZDSR+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
256.439 256.76 mo
(\022\004\023\022\007\005\017)
[-6.599 -6.59898 -6.599 -6.71899 -6.59898 -6.599 0 ]ysh
TMZDSS+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
256.439 203.84 mo
(\006)sh
TMZDSR+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
256.439 197.12 mo
(\006)sh
TMZDSS+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
256.439 190.52 mo
(\031\014\032\013\017\017\013\033"\033\013\034\034\013\003\004\016\004\002\013\017\017\013!\010)
[-6.599 -6.599 -6.71899 -6.59897 -6.71899 -6.599 -6.599 -6.599 -6.59897 -6.599 -6.599 -6.71899 
-6.599 -6.599 -6.599 -6.599 -6.71899 -6.599 -6.599 -6.599 -6.71899 -6.599 -6.71893 -6.59894 
0 ]ysh
269.639 256.76 mo
(\011)sh
282.839 236.96 mo
(\003\004\016\004\002\013\017\013\035\021)
[-6.71899 -6.59898 -6.599 -6.599 -6.599 -6.71899 -6.59897 -6.599 -6.599 0 ]ysh
gsave
287.159 349.521 mo
287.159 236.961 li
297.479 236.961 li
297.479 349.521 li
cp
clp
TMZDSS+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
296.039 349.521 mo
(\012\022\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013)
[-6.59897 -6.599 -6.59903 -6.59897 -6.71899 -6.599 -6.599 -6.599 -6.71899 -6.59897 -6.71902 -6.59897 
-6.599 -6.59897 -6.599 -6.599 0 ]ysh
grestore
gsave
287.159 236.961 mo
287.159 217.041 li
297.479 217.041 li
297.479 236.961 li
cp
clp
true set_gvm
%ADOBeginSubsetFont: QJJAAA+CourierNew AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal QJJAAA+CourierNew gcheck setglobal} if
1 7916 73 <000100d70000045a04e7003400cb4025400c50058005830c8131a00cb20c
b42bc22bd42b0a17080f090cc810102209342e00310131b80204b6000022
2e020805b80140401a0101220824282200255d29211d00001220192e2d18
0609080a22b8018c400a36002c01201acf100110b80195400d2f15401570
15d0150415193575b901cc00182b4e10f45d4df45d3cfd3c3c10e6003f3c
3f3c3c3cfd3c3ffde401111239390010ed0110f5d43c0010ed0110f55dd4
3c0010ed0110f5d43c31304379400e2a2b1b1c2a1c2c1f002b1b291f0100
2b012b8181015d0111213216151406232122263534363333112322263534
363333353436333217161615140623222726232206151521321615140623
022f01711e1a1a1efd6f1e1a1a1ecbb61e1a1a1eb6ac8e77873315181408
1397686e7701891e1a1a1e030dfd47171312181812131702b9181312187f
6a9c16081612121703176c457f1813121800>QJJAAA+CourierNew AddT42Char 
QJJAAA+CourierNew /CharStrings get begin
/g73 73 def
end
QJJAAA+CourierNew /Encoding get
dup 35 /g73 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/TMZDSS+CourierNew*1 
[/.notdef /g55 /g72 /g86 /g87 /g48 /;########### /g70 
/;############ /g94 /;#################### /;### /g76 /g81 /g68 /g32 
/;################### /;############################## /;##################### /g31 /g47 /g74 /g75 /;############## 
/;###################### /g62 /g64 /;########## /;######### /;######################## /;########################## /;############################ 
/g63 /;####################### /;############# /g73 220{/.notdef}rp]
TMZDSS+CourierNew nf
TMZDSS+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
296.039 236.961 mo
(\014#\013)
[-6.71899 -6.59898 0 ]ysh
grestore
gsave
287.159 217.041 mo
287.159 210.441 li
297.479 210.441 li
297.479 217.041 li
cp
clp
TMZDSS+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
296.039 217.041 mo
(\006)sh
grestore
gsave
287.159 210.441 mo
287.159 203.841 li
297.479 203.841 li
297.479 210.441 li
cp
clp
TMZDSS+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
296.039 210.441 mo
(\007)sh
grestore
gsave
286.799 203.841 mo
286.799 197.121 li
297.479 197.121 li
297.479 203.841 li
cp
clp
TMZDSR+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
296.039 203.841 mo
(\021)sh
grestore
gsave
287.159 197.121 mo
287.159 157.281 li
297.479 157.281 li
297.479 197.121 li
cp
clp
TMZDSS+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
296.039 197.121 mo
(\024\002\015\025\004\026)
[-6.599 -6.599 -6.599 -6.71896 -6.599 0 ]ysh
grestore
gsave
287.159 150.681 mo
287.159 117.561 li
297.479 117.561 li
297.479 150.681 li
cp
clp
TMZDSS+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
296.039 150.681 mo
(\017\017\013\035\010)
[-6.599 -6.599 -6.599 -6.59897 0 ]ysh
grestore
gsave
297.479 403.041 mo
297.479 -316.959 li
567.479 -316.959 li
567.479 403.041 li
cp
eclp
27.4789 403.041 mo
567.479 403.041 li
567.479 -316.959 li
27.4789 -316.959 li
cp
1 1 1 rgb
ef
grestore
gsave
297.479 349.521 mo
297.479 236.961 li
299.039 236.961 li
299.039 349.521 li
cp
clp
TMZDSS+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
296.039 349.521 mo
(\012\022\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013)
[-6.59897 -6.599 -6.59903 -6.59897 -6.71899 -6.599 -6.599 -6.599 -6.71899 -6.59897 -6.71902 -6.59897 
-6.599 -6.59897 -6.599 -6.599 0 ]ysh
grestore
gsave
297.479 236.961 mo
297.479 217.041 li
299.039 217.041 li
299.039 236.961 li
cp
clp
TMZDSS+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
296.039 236.961 mo
(\014#\013)
[-6.71899 -6.59898 0 ]ysh
grestore
gsave
297.479 217.041 mo
297.479 210.441 li
299.039 210.441 li
299.039 217.041 li
cp
clp
TMZDSS+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
296.039 217.041 mo
(\006)sh
grestore
gsave
297.479 210.441 mo
297.479 203.841 li
299.039 203.841 li
299.039 210.441 li
cp
clp
TMZDSS+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
296.039 210.441 mo
(\007)sh
grestore
gsave
297.479 203.841 mo
297.479 197.121 li
299.399 197.121 li
299.399 203.841 li
cp
clp
TMZDSR+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
296.039 203.841 mo
(\021)sh
grestore
gsave
297.479 197.121 mo
297.479 157.281 li
299.039 157.281 li
299.039 197.121 li
cp
clp
TMZDSS+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
296.039 197.121 mo
(\024\002\015\025\004\026)
[-6.599 -6.599 -6.599 -6.71896 -6.599 0 ]ysh
grestore
gsave
297.479 150.681 mo
297.479 117.561 li
299.039 117.561 li
299.039 150.681 li
cp
clp
TMZDSS+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
296.039 150.681 mo
(\017\017\013\035\010)
[-6.599 -6.599 -6.599 -6.59897 0 ]ysh
grestore
true set_gvm
%ADOBeginSubsetFont: HIBBAA+CourierNew AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+CourierNew gcheck setglobal} if
1 3540 78 <00010045000004990511003105d340a1001356136213751380138a17862d
c52dc92fd313db17d22dd931e513e9310faa2fb013ba17b42dba2fc213c5
15c9170804139a17952da013a415aa17a52d07651370138f008a228f3191
130610132b313a315f0055135a225f3107e013ea31f51303092215213021
362265218622c922ec22ea23f7300a14239023020021043053216b148631
c923c830d321f5210900219b149b229830ad14ba23b930cf140822b8ffe0
b2473522b8ffc0b24a3521b8ffc0b24a3522b8ffc040184c4d3414555335
120f000e311f001c312f002513f6130713b8ffc0b32b433413b8ff80b350
523413b8ffc0b24b3513b8ffc0b3444f3413b8ff49403653352220473520
21412044214e3050215f308f1b8f1c8f1d8f1e8f1f0b14402b43341b141c
18021212401d010102030405060708090a4118029a029b029c001e0049ff
c00020ffc00021ffc0000dffc0000cffc0000bffc0000effc0001fffc000
1dffc0001cff80400c190a191a1b1c1d1e1f202122ba029a029b029c400f
1e49401d011211100f0e0d0c0b0a09ba029a029b029c40171e492e404735
102e202ea02eb02ef02e05002edf2e022eb8ffc040224235df2e012e2e30
6f169f16df1603a016b016df16e016041f168f16af16ff160416b8ff8040
1626351640093516402a2c341640393516801935161614410dffc0001fff
c00020ffc00021ffc0000cffc0000bffc0001dffc0b21c4013b8ffc0400c
11092b2a2928272625242322ba029a029b029c400e1e4921000040444f34
0040533500b802574009131414131314232222b802574039313014313130
222130401c253414401c2534144819350c31011914761476300313003122
1421232e30310a331300312214212e303109011930bf016b002202960031
0161000000140295b41212130001b80257400e0a0940140c3f0009600970
090309b8ffc0b30f193f09b8ffc0b30a113f09b8ffc0400a0c103f091932
22221331ba02fa000001f7401913201e216419241e236430e12b0964020a
64111440120b3f14ba01ea001302a64011120011001a0619062a0a2b0a01
0a020ad3b901dc00182b003f3f3f3f3f3f3f3ff4e42b10ed10ed10ededed
10eded10fdf411392f014e10f42b2b2b5d2b3c4dfd3c3c3c10e610f6edec
0011121739011117395d712b2b2b08872e2b057d10c404872e182b2b2b05
7d10c4182b10332f2b2b2b2b2b5d717210332f5d2b71722b2b2b2b435c58
400d242320212222233131300000218710083c083c00103c103c59b10602
435458b90014ffc0b30b1b3413b8ffc0b20b1b34002b2b59313001435c58
b90021ffc040090d163f31400d163f21b8ffc0b30f193f21b8ffc0400e0e
173f14400f193f14400e173f1cb8ff80b30f193f1cb8ff80b30e173f1eb8
ff80b30f193f1eb8ff80b30e173f1db8ff80b30f193f1db8ff80b30e173f
28b8ff80b30f193f28b8ff80b30e173f26b8ff80b30f193f26b8ff80b30e
173f27b8ff80b30f193f27b8ff80b30e173f23b8ffc0b30f193f23b8ffc0
b30e173f22b8ffc040130f143f2740140c3f2340140c3f2240140c3f22b8
ff80b30f193f22b8ff8040220e173f30400d163f14400d163f14400c143f
30400c143f30800b123f14800b123f22b8ffc0b30b123f27b8ffc0b30a11
3f23b8ffc0b30a113f22b8ffde40090a113f30220a113f22b8ffde400e09
0f3f3022090f3f14400e133f23b8ffc040090c103f14400c103f22b8ffc0
406c0b0f3f2680120b3f2880120b3f2780120b3f1e80120b3f1d80120b3f
1c80120b3f2240120b3f3140120b3f2240160d3f3140160d3f2240170e3f
3140170e3f1e40170e3f1d40170e3f1c40170e3f1e40190f3f1d40190f3f
1c40190f3f2640190f3f2840190f3f2740190f3f2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b59722b5d002b
2b2b2b2b2b5d435c58b531220d163f13b8ffc040090e133f22220c103f20
b8ffc0b7170e3f00400d163f2b2b2b2b2b59012b2b2b2b2b7171725d005d
727271717101112322263534363333112322263534363333113726353436
3333321615140623230701333216151406232322263534372701bef04a3f
404923234a3f3f4af0a0193e4aea4a3f3f4a39f9014f3c4a3f3f4aec4a3f
22d90155feab392e2d390377392e2d39fd4d812b1b2e39392e2d39cafed8
392e2d39392e2726c000>HIBBAA+CourierNew AddT42Char 
HIBBAA+CourierNew /CharStrings get begin
/g78 78 def
end
HIBBAA+CourierNew /Encoding get
dup 20 /g78 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/TMZDSR+CourierNew*1 
[/.notdef /g83 /g88 /g69 /g79 /g76 /g70 /;### 
/g81 /g87 /g75 /g68 /g85 /g62 /g64 /g73 
/g82 /;################# /g72 /g86 /g78 235{/.notdef}rp]
TMZDSR+CourierNew nf
TMZDSR+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
309.239 210.446 mo
(\003\014\022\013\024)
[-6.60439 -6.71899 -6.599 -6.599 0 ]ysh
true set_gvm
%ADOBeginSubsetFont: QJJAAA+CourierNew AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal QJJAAA+CourierNew gcheck setglobal} if
1 11302 96 <00010194fefc033904e7003100d540132a22017a22ca22ea2203aa22011c
2c252d3418b8ffd4400e252d341d22252d341f22252d3417b8ffc0b3252d
3415b8ffdeb3252d3416b8ffde4021252d341e2c252d3404121412022322
242e110f051e4d164d0020075b403f0f010fb80218b500202b5b4024b802
18401d00201a0027d42f2e24212120d41a0cd4040524131314d40f1a1f1a
021abc02b6003301bb01cb00182b10f65df43c10fd3ce410f43c10fd3ce4
00192f2f1a10fd181aed191a10fd5d181aed191a10eded01111239111239
393130005d2b2b2b2b2b2b2b2b015d717201262726351134262726272635
343633321716151114161716161514060706061511140623222635343736
373636351134360298331117423120090d191950344743331b17171b3442
785319190c0a2032412801f226222c3e0168384a0403090d121218334464
fe98374b04031613141603044b37fe985e7d1813120c0903054b3701673f
4e00>QJJAAA+CourierNew AddT42Char 
QJJAAA+CourierNew /CharStrings get begin
/g96 96 def
end
QJJAAA+CourierNew /Encoding get
dup 36 /g96 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/TMZDSS+CourierNew*1 
[/.notdef /g55 /g72 /g86 /g87 /g48 /;########### /g70 
/;############ /g94 /;#################### /;### /g76 /g81 /g68 /g32 
/;################### /;############################## /;##################### /g31 /g47 /g74 /g75 /;############## 
/;###################### /g62 /g64 /;########## /;######### /;######################## /;########################## /;############################ 
/g63 /;####################### /;############# /g73 /g96 219{/.notdef}rp]
TMZDSS+CourierNew nf
TMZDSS+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
309.239 177.321 mo
(\021)sh
322.439 256.76 mo
($)sh
335.639 316.4 mo
($)sh
TMZDSR+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
348.839 316.4 mo
(\014\022\011\002\014\010)
[-6.599 -6.599 -6.599 -6.71899 -6.59897 0 ]ysh
TMZDSS+CourierNew*1 [0 -11.04 -11.04 0 0 0 ]msf
348.839 269.96 mo
(\003\004\016\004\002\021)
[-6.599 -6.59897 -6.599 -6.599 -6.599 0 ]ysh
362.039 342.921 mo
($)sh
1 0 0 rgb
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT Initial
ct_T42Dict begin
-0.566 -0.305 2 1.004
 256 array 0 1 255 {1 index exch /.notdef put} for  /TimesNewRomanPSMT
Type42DictBegin
[<00010000000c000c000c000c4f532f3210732def000000cc000000566376
7420f32cda8100000124000007c66670676dc3a61d01000008ec00000631
676c796660978a9e00006fd0000485d668656164cf5b1d8300000f200000
00366868656112ef12f600000f5800000024686d7478b14216ca00000f7c
00001a286c6f63611181f1ae000029a400001a2c6d6178700d0110ae0000
43d0000000206e616d650035b207000043f000001cc970726570e43894a4
000060bc00000f1367646972000000000000000000000000000103350190
00050000059a053300000125059a0533000003a000660212010502020603
05040502030400007a878000000000000008000000004d6f6e6f00400020
fffc058cfe460133072101bb400001ffffff00000000058e0000054c001f
054c001c0394001b0000ffe10000ffe40000ffe8fe4afffc056b0023fe6a
ffe00313000000ad000000ad0000000000250096009f002400f0013100c2
00c0004a00a6004100500094004700cf00af000e007901cb000400230044
00a80025011f0002004600170105009900d9005c007200e500e00028004b
00de011200240045007000160039ffe90016004b0088ffb900d9000a0043
00ae00ba016c0153002f00430048022c012b0025008fffc000170028ffcd
ffd80025009d00e50124ffb10048009d00e600110027007f00910012006a
00cafffc00000024006200a7017c01e900210060008b0434048aff6b003b
00b500d5014bff6b004d007905d809b5006c009100a3011701c0ffdfffe7
00be04010065007f00820088009900b200c0022e034305a000200026003d
004e00610065007b00d9011301310340ff27ff42ff99004e00a700f2022b
02c603070011002b0049005f008d00a100af00d600e400f5010b0135019d
01ab01ab01d101ee05d80000004b0075007a0080009d00a600a700ac00b9
013101310217021700020017002900550080008f00a500b200b300d0014b
015901c001c103a50530fe3fff14ff15ffe7ffff002a00580099009f00c1
00e400f40130015901ab01ab03220374041e04740532fd81004d0064009c
00d000d100d600de00e500f500f8012a012a01e1027e027fff57ffa8ffe5
00000008001f00380051005a006f0076007700a200c000c200c400f101fb
0209027e02cf04c5057a05f0ff92001200260042004b004f005100530064
008b00ae00b200b800b800d600f50111012001310138014e01520167018f
019601b801d901d902060221027102ea03b003cb03dc04360505ff3a0012
0016001e001f002300570068006c007e0088009200a500a800c500c90115
0126012d013001d601d901f6023b0244024402a302cf02de0385038f04fc
0586fee0feebfefbff8a0007004400470058007500aa00e400ef01160120
0129016a017301e3027e029002b4030e0310032303350341035403590388
039403c803ce047204ab04da0549056105ab0761fe6efed1ff4bff840000
00010006001e0027002c0034003700620066006a006b006c007000700072
007c0081008a008e0091009200a000ab00b800bf00c900d500dd00ec00f4
0100012101300169016a016d017c0185018e018e019901ac01c101c501c9
01e101f601f601f60222022202280236023f024302460267028502850294
02d002d602e8031c0363037f03800380039e03b603d90400040404ff0532
05320548058b05a706cb07280748076208ccfcedfd2afd59fddefe00fe1a
fe5bfe96fec1fee7ff56ff7900010025002d002e007c00870091009900a1
00a500a500aa00af00b600c600cc00d700dd00ec00f20102010501170118
0123012a012c0131013f014701490149014d01510151015501550157015a
015a0161016201680168017f0180018201830184018d0195019501950198
019901a501a901b601b601b701ba01ba01d501df01e601ea01f202000200
0203021702250227022f0239024302430247024f025202520267026f026f
027002720276027e02a702b302b902d603130325032d03610371039903ae
03c203d403f90402042c042f043c04560467048304cf04d104d804fb051f
05450568059e05c2061b06340655066a069806af06e806fc070607500762
077c07d407ff082500ad00c700aa00b5000000000000000000000000002f
06cf01730514047802df009c0018037005870155002500060254036c038e
03d2056601f0032001da018a0369036bffa3034602f8036f015602bf0122
031f053a0366008c00ff01ab02e102f402e70415015402e90128049101b7
026f034302060000000005d30415048305e8000002d7003a027d01c002c5
03830383ffbd003a059e01df059e02d1002004e0021300df01c001870297
000000ce0269028b0058043405fb0069015a01a905780182013e0288012a
03d4049e00e5032302f301f00196007a00cd014a0424025e023901ab00cf
00fd011e00ed017100700195004001bb01dd01b8000101a803a7014c020c
018d01b0020d0137010000cd032101d4030a005900000000012602150150
02f0025503bc06d00335010100d000d2007a01030130007c000000000000
000000fe006e006600940227002b0045004d00d3013200180097004100f4
febcffe9001605d8058b009100a1032c00520030005d02cb003a009200e5
00e500580086003200ba0099008800300298007cff8001640028004d0065
000200b8016a002f010b001100170100007f00040016022200a6005f0000
00f8000a00ca0043004b01ee0077012000f401c00028045f0000008c0445
00c20060007b008b008b0064005d00c2009c009206b505d3004f01170000
0420fe9e00cc00dc005e004600e30032001a003c0091005a00a1042c0041
002000490071009c009cfe4800400040008600cb0102007d003a003e006a
0050044800290096ff6a0097006900e0004c001b00c90069ff970043ffbd
0052ff83ff8b005fffa1ff5c00670053ffa8002a0076ffb2003600870559
0256052b043400de00c901c4004800db018b00b3004800da011601250118
00ea00ea00ae0000003e05bb008a04d70053003fff8cffd5001500280022
00990062004a00e4006d00ee00e5004803c00033fe4e02b1ff4603700079
05df0051ffa7ff1f010a0068ff6c004f00bc00a5070500ab0080001e05a5
0025000040425554403f3e3d3c3b3a393837363534333231302f2e2d2c2b
2a292827262524232221201f1e1d1c1b1a1918171614131211100f0e0d0c
0b0a090807060504030201002c4523466020b02660b004262348482d2c45
2346236120b02661b004262348482d2c45234660b0206120b04660b00426
2348482d2c4523462361b0206020b02661b02061b004262348482d2c4523
4660b0406120b06660b004262348482d2c4523462361b0406020b02661b0
4061b004262348482d2c0110203c003c2d2c20452320b0cd442320b8015a
51582320b08d44235920b0ed51582320b04d44235920b09051582320b00d
44235921212d2c20204518684420b001602045b04676688a4560442d2c01
b10b0a432343650a2d2c00b10a0b4323430b2d2c00b0172370b101173e01
b0172370b10217453ab10200080d2d2c45b01a234445b01923442d2c2045
b00325456164b050515845441b2121592d2cb00143632362b0002342b00f
2b2d2c2045b0004360442d2c01b00643b00743650a2d2c2069b04061b000
8b20b12cc08a8cb8100062602b0c642364615c58b00361592d2c45b0112b
b0172344b0177ae4182d2c45b0112bb01723442d2cb01243588745b0112b
b0172344b0177ae41b038a45186920b01723448a8a8720b0a05158b0112b
b0172344b0177ae41b21b0177ae45959182d2cb0022546608a46b040618c
482d2c4b53205c58b002855958b00185592d2c20b0032545b019234445b0
1a23444565234520b00325606a20b009234223688a6a606120b01a8ab000
527921b21a1a40b9ffe0001a45208a54582321b03f1b235961441cb11400
8a5279b31940201945208a54582321b03f1b235961442d2cb11011432343
0b2d2cb10e0f4323430b2d2cb10c0d4323430b2d2cb10c0d432343650b2d
2cb10e0f432343650b2d2cb11011432343650b2d2c4b525845441b212159
2d2c0120b003252349b04060b0206320b000525823b002253823b0022565
38008a63381b212121212159012d2c4bb06451584569b00943608a103a1b
212110592d2c01b005251023208af500b0016023edec2d2c01b005251023
208af500b0016123edec2d2c01b0062510f500edec2d2c20b00160011020
3c003c2d2c20b001610110203c003c2d2cb02b2bb02a2a2d2c00b00743b0
06430b2d2c3eb02a2a2d2c352d2c76b802b023701020b802b04520b00050
58b00161593a2f182d2c21210c6423648bb84000622d2c21b08051580c64
23648bb82000621bb200402f2b59b002602d2c21b0c051580c6423648bb8
1555621bb200802f2b59b002602d2c0c6423648bb84000626023212d2cb4
000100000015b00826b00826b00826b008260f10161345683ab001162d2c
b4000100000015b00826b00826b00826b008260f1016134568653ab00116
2d2c4b53234b515a5820458a60441b2121592d2c4b545820458a60441b21
21592d2c4b53234b515a58381b2121592d2c4b5458381b2121592d2c014b
53234b515ab00225b00425b006254923451869525a58b00225b00225b005
25462345696048592121212d2cb0134358031b02592d2cb0134358021b03
592d2c4b54b012435c5a58381b2121592d2cb012435c580cb00425b00425
060c6423646164b807085158b00425b00425012046b01060482046b01060
48590a21211b2121592d2cb012435c580cb00425b00425060c6423646164
b807085158b00425b00425012046b8fff060482046b8fff06048590a2121
1b2121592d2c4b53234b515a58b03a2b1b2121592d2c4b53234b515a58b0
3b2b1b2121592d2c4b53234b515ab012435c5a58381b2121592d2c0c8a03
4b54b00426024b545a8a8a0ab012435c5a58381b2121592d2c462346608a
8a462320468a608a61b8ff8062232010238ab9035803588a70456020b000
5058b00161b8ffba8b1bb0468c59b0106068013a2d2cb1020042b1230188
51b1400188535a58b910000020885458b202010243604259b12401885158
b920000040885458b2020202436042b12401885458b2022002436042004b
014b5258b2020802436042591bb940000080885458b202040243604259b9
4000008063b80100885458b202080243604259b94000010063b802008854
58b202100243604259b94000020063b80400885458b20240024360425959
5959592d2cb0024354584b53234b515a58381b2121591b21212121592d00
000000010000000300001baaf9b55f0f3cf50819080000000000a2e31dc2
00000000b9d5b528fb74fd8c1000080e0000000900010001000000000001
00000721fe4500571000fb74fe2610000001000000000000000000000000
0000068a0639011c00000000020000000200000002aa00e4034400850400
00250400006c06aa00480639004b0171005102aa005402aa002e04000091
048300250200006e02aa005302000091023900030400004a040000f00400
002c040000530400002004000062040000580400004c0400007c04000051
023900b00239008e048300250483002504830025038d005c075e006105c7
0010055600220556004a05c7002304e3002a0473002105c7004805c70023
02aa0033031d002a05c7002204e30029071d002205c7ffe505c700480473
002205c70048055600230473008004e3003e05c7000b05c70012078d001b
05c7000f05c7001304e3001a02aa00a80239000302aa004b03c100250400
ffef02aa0076038d00490400fffb038d004604000044038d004c02aa004f
0400003d0400000d0239003c0239ff63040000110239003d063900110400
000c040000450400fff90400004402aa000d031d00640239001404000002
0400001105c7000d0400001b0400000c038d002903d7011b019a00a103d7
00b10454001405c7000e05c7000e0556004a04e3002a05c7ffe505c70048
05c7000b038d0049038d0049038d0049038d0049038d0049038d0049038d
0046038d004c038d004c038d004c038d004c0239003c0239003c0239000d
023900020400000c04000045040000450400004504000045040000450400
00020400000204000002040000020400006503330062040000810400003d
0400009c02cd007003a0fff204000023061400450614004507d7001e02aa
00ec02aa003904640019071dffe805c7004905b400350464000804640018
0464001804000002049c008603f4004005b4002b0696002e0464003e0231
00000235fffa027b001d062500470556004904000027038d005902aa00e4
0483002404640053040000020464001e04e5001a04000040040000400800
00e605c7000e05c7000e05c70048071d004b05c700430400ffee0800ffed
038d0043038d004302aa00b902aa00c10464001703f4002f0400000c05c7
00130156feab0400ffe902aa007702aa007304730019047300170400008b
0200009102aa00c1038d00430800004105c7000e04e3002a05c7001004e3
002a04e3002a02aa003302aa003202aa003202aa003205c7004805c70048
05c7004805c7000b05c7000b05c7000b0239003c02aa003c02aa001602aa
001702aa003702aa00e902aa009602aa00bb02aa004e02aa009402aa003c
04e300160239001e0473007e031d006404e3001a038d0029019a00a105c7
00230400004405c700130400000c047300240400fff904830025048300a5
02660088026600140266002c06000086060000860600002a0400002105c7
00480400003d02aa003304730080031d00640556004a038d00460556004a
038d0046040000260400ffef02aa01ef05c70010038d004905c70010038d
004905c70023052c004405c7002304e3002a038d004c04e3002a038d004c
04e300290239003d04e300290340003c04e3002902c0003605c7ffe50400
000c05c7ffe50400000c05c70048040000450556002302aa000d05560023
02aa000d04730080031d006404e3003e0239001404e3003e036b001305c7
000b0400000205c7000b0400000204e3001a038d002904e3001a038d0029
04a0002505c7004c05d900470431005703c50046035c0047045000460337
000c049e00450400ffef049500e40285000207c0002c0800004f04000099
0800004f040000990800004f040000980400009807d5016a05c700c00483
002604cd00990483002604d5022204d5010505abffe905ab027e05ab027e
05abffe905ab027e05abffe905ab027e05abffe905abffe905abffe905ab
ffe905abffe905ab01c005ab027e05ab01c005ab01c005abffe905abffe9
05abffe905ab027e05ab01c005ab01c005abffe905abffe905abffe905ab
027e05ab01c005ab01c005abffe905abffe905abffe905abffe905abffe9
05abffe905abffe905abffe905abffe905abffe905abffe905abffe905ab
ffe905abffe905abffe905abffe905ab02d605ab006605abffea05d5ffff
04d500920800000007eb013007eb012007eb013007eb012004d500b204d5
008004d5002a082b0198086b01b807550010060000f40600006f0440003a
0540003704c0003f04150040040000250600005505ab002f046b003b04d5
000301c00089035500a206ab003403d5006404d5009202d6008302d60083
04d500b202d6007005c70010038d00490556004a038d00460556004a038d
004604e3002a038d004c04e3002a038d004c04e3002a038d004c05c70048
0400003d05c700480400003d05c700480400003d05c700230400000d05c7
00230400000d02aa00160239ffde02aa00170239ffdf02aa00330239fffe
02aa003302390039031d002a0239ff6305c70022040000110400001104e3
00290239003d05c7ffe50400000c059d002603f5000c05c7004804000045
05c70048040000450556002302aa000d04730080031d006404e3003b0239
001005c7000b0400000205c7000b0400000205c7000b0400000205c7000e
04000002078d001b05c7000d05c700130400000c0239001605c7000f038d
0049071dffe80556004905c7004904000027023900b2078d001b05c7000d
078d001b05c7000d078d001b05c7000d05c700130400000c02aa00b802aa
ffdb0400003d04cd005a060000860600002a060000310600002502aa00c3
02aa00bb02aa00ec02aaffea05c70010058dff5c0677ff5c034aff5c05c7
ffb60687ff5c05f2ffb30227ffb105c70010055600220525003204e3002a
04e3001a05c7002302aa003305c7002205cd001c071d002205c7ffe50525
004f05c7004805c700250473002204a8002004e3003e05c7001305c7000f
05e7001805f2003c02aa003205c7001304310057035c0047042f000b0227
002503f6fffa0412006e0389000003500046042f000b03d5005102270025
0408001503e10019044a0074039effd3039100460400004503fe0059032b
004603f6fffa038d00180502001c0544004b0227000003f6fffa04000045
03f6fffa0544004b04e3002a0604003704a000250548004b0473008002aa
003302aa0032031d002a06fa000d06fa002705ee00360556002505aa001a
05c7002505c70010049800240556002204a000250575001a04e3002a072b
00120402002b05c7002505c7002505560025056d0012071d002205c70023
05c7004805c70025047300220556004a04e3003e05aa001a0652004c05c7
000f05c700250533fffa081200390812003905a6003606fa002504980024
0548003a083900260556ffee038d00490412004e03c700300348001f0412
001a038d004c05870017032900180448002e0448002e03e3002e03fe000c
0510002e0448002e040000450448002e0400fff9038d0046037f000c0400
000c052f00570400001b0448002e0406001e0629002e0629002e0423000c
0560002d03a6002e036f001b05fa002d03aeffff038d004c03dd00110348
001f036f0046031d00640239003c023900020239ff6305d1000c05c9002d
0400000d03e3002e0400000c0448002e039a002502cf001f0800004107a2
0010040a000d02aa010102aa001c02aa003202aa001202aa010202aa008f
02aa008f02aa008f02aa009002aa010202aa001c02aa010202aa012102d9
005602aa008f025400e002be02af02beff6b023900b003da005f03a40033
02af0021035a004303c5004e023b0043024a004e03d0005803ce00430222
0043039e0043037600330374000f040f006403e2004e0232004302700021
03cd005f03a2004303a200430386005803dc004303ae003d03ca006903c0
004304e200430400002104750043045d00430444004301ac006b02f9006b
06360096023bff9d039e0043039e00430374ff5b0374ff5b03a2003304e2
004304e2004304e2004304e2004303da005f03da005f03da005f03a40033
02af0021035a004303c5004e023b00430279000c03ce004302220043039e
0043037600330374000f03e2004e0270002103cd005f03a2004303860058
03ae003d03ca006903c0004304e2004304000021023b004303a400330376
0033038600580404000f0000ffdc0000ff250000ffdc0000fe51028d00ab
028d00a002da0043034d007901a8ffba019c004601e50046019c0046019c
004601ad0048019c004601b10046015100460435017c0435012e043500b7
043500810435012c043500be043500af043500810435009a043500db0435
0085028d00c1043500b3060001000600010002420036060001000435009e
04350098043500cb060001000600010006000100060001000600010001b1
004606000100060001000600010006000100060001000600010006000100
06000100051bffba06000100060001000600010005b5003a05b5003a01f4
ffba01f4ffba060001000600010006000100060001000481003604350036
043dffba043dffba03e9004a03e9004a067f0014077600140327ffba041e
ffba067f0014077600140327ffba041effba051b003204b5002406000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
01cf003001b1004601b1004601b1004001b1004606000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
01000400001b080000000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
0100028d007f028d005d0600010004ee0015034d007901a8000e01d6ffdc
01a8005601d60010037500320375003201a8002d01d60013051b003204b5
002401f4ffba01f4ffba01a8009301d6001305b5003a05b5003a01f4ffba
01f4ffba024200000300fff705b5003a05b5003a01f4ffba01f4ffba05b5
003a05b5003a01f4ffba01f4ffba0481003604350036043dffba043dffba
0481003604350036043dffba043dffba0481003604350036043dffba043d
ffba02b3005f02b3005f02b3005f02b3005f03e9004a03e9004a03e9004a
03e9004a0692003e0692003e043fffba043fffba0692003e0692003e043f
ffba043fffba08c9003e08c9003e06c5ffba06c5ffba08c9003e08c9003e
06c5ffba06c5ffba04a7ffba04a7ffba04a7ffba04a7ffba04a7ffba04a7
ffba04a7ffba04a7ffba045a002a039a00360435ffba0327ffba045a002a
039a00360435ffba0327ffba064f0027064f00270224ffba021affba04a7
004604a700460224ffba021affba04cf002d04cf002d0327ffba0327ffba
040d0047040d004701a8ffba01a8ffba02b4002302b400230327ffba0327
ffba043500450435004501f4ffba01f4ffba024200360300fff7039affba
0327ffba0375003203750032051b003204b50024051b003204b5002401f4
ffba01f4ffba045a004004ce0040045a002604ce0030045a005304ce0041
045a005304ce00410600010006000100019c0046019c0046060001000600
0100060001000151004601b10046060001000600010001ad004801e50046
06000100060001000600010001b1004601b1004601b1004601b1004601b1
004001cf003006000100019c0046019c0046060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100028d00ca028d
00c7028d00c6060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
0600010006000100060001000100ffba0800ffba1000ffba05c70048043b
00450635000b045600020000fdcc0000fc140000fd130000fe420000fce0
0000fdd40000fe620000fe2b0000fdb70000fc980000fd880000fc080000
fcfe0000feff0000ff030000fe9e041a00a206000088060000140000fe70
0000fdd40000fdf60000fd770000fe620000fdbb0000fbd80000fbd80000
fb740000fcfe0000fc8c0000fc460000fd270000fcb40000fca80000fcae
0000fc440000fe140000fe700000fd910000fc710000fdc30000fe470000
fe620000fcc30000fde10000fd870000fd4b0000fd970000fd4b0000fc8a
0000fc620000fc090000fbd70239003c05c70010038d004905c70010038d
004905c70010038d004905c70010038d004905c70010038d004905c70010
038d004905c70010038d004905c70010038d004905c70010038d004905c7
0010038d004905c70010038d004905c70010038d004904e3002a038d004c
04e3002a038d004c04e3002a038d004c04e3002a038d004c04e3002a038d
004c04e3002a038d004c04e3002a038d004c04e3002a038d004c02aa0033
0239003c02aa00330239003c05c700480400004505c700480400004505c7
00480400004505c700480400004505c700480400004505c7004804000045
05c700480400004505c70048043b004505c70048043b004505c70048043b
004505c70048043b004505c70048043b004505c7000b0400000205c7000b
040000020635000b045600020635000b045600020635000b045600020635
000b045600020635000b0456000205c700130400000c05c700130400000c
05c700130400000c05c70010038d004902aa00330239000605c700480400
004505c7000b0400000205c7000b0400000205c7000b0400000205c7000b
0400000205c7000b040000020000ff090000ff090000ff090000ff0904a0
00230348001f072b0012058700170556002503e3002e0556002503e3002e
05c700230448002e05c700130400000205c700130400000205c7000f0400
001b0533fffa0406001e053300250400000d05c7002b038d004c05c70048
0400004505b5003a01f4ffba0224ffba021affba04a7004601f4009e01f4
001001f4001b01f4001001f4006b01f4fff90227ffce01a8000f01a8fff5
02aa00a402aa00a401a8000e01a8005601a800560000ffcf01a8000f01d6
ffbf01a8fff501d6ffcd01a8001d01d6fff501a8009301d6001303750032
037500320375003203750032051b003204b5002405b5003a05b5003a01f4
ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a
01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5
003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a
05b5003a01f4ffba01f4ffba0481003604350036043dffba043dffba0481
003604350036043dffba043dffba0481003604350036043dffba043dffba
0481003604350036043dffba043dffba0481003604350036043dffba043d
ffba0481003604350036043dffba043dffba02b3003202b3003202b3005f
02b3005f02b3005f02b3005f02b3003202b3003202b3005f02b3005f02b3
005f02b3005f02b3005f02b3005f02b3003802b3003802b3004902b30049
03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9
004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a
03e9004a0692003e0692003e043fffba043fffba0692003e0692003e043f
ffba043fffba0692003e0692003e043fffba043fffba08c9003e08c9003e
06c5ffba06c5ffba08c9003e08c9003e06c5ffba06c5ffba04a7ffba04a7
ffba045a002a039a00360435ffba0327ffba064f0027064f0027064f0027
0224ffba021affba064f0027064f00270224ffba021affba064f0027064f
00270224ffba021affba064f0027064f00270224ffba021affba064f0027
064f00270224ffba021affba04a7004604a7004604a7004604a70046067f
0014077600140327ffba041effba067f0014077600140327ffba041effba
04cf002d04cf002d0327ffba0327ffba04cf002d04cf002d0327ffba0327
ffba04cf002d04cf002d0327ffba0327ffba067f0014077600140327ffba
041effba067f0014077600140327ffba041effba067f0014077600140327
ffba041effba067f0014077600140327ffba041effba067f001407760014
0327ffba041effba040d0047040d004701a8ffba01a8ffba040d0047040d
004701a8ffba01a8ffba040d0047040d004701a8ffba01a8ffba040d0047
040d004701a8ffba01a8ffba043500450435004501f4ffba01f4ffba0435
0045043500450435004504350045043500450435004501f4ffba01f4ffba
04350045043500450481003604350036043dffba043dffba024200360300
fff7031a001a031a001a031a001a03750032037500320375003203750032
037500320375003203750032037500320375003203750032037500320375
003203750032037500320375003203750032051bffba04b5ffba051b0032
04b5002401f4ffba01f4ffba0375003203750032051b003204b5002401f4
ffba01f4ffba051b003204b50024067f0045067f0045067f0045067f0045
01a800280000fe290000fea20000ff300000ff1d0000ff120000ff920000
fe7e08fc003208ad00320000ffb50000ffb60000feed0000ff640000fe7e
0000ff9f018d000002f6fffd0000fe820000ff1004cd00320000ff580000
ff580000ff640692003e0692003e043fffba043fffba08c9003e08c9003e
06c5ffba06c5ffba045a002a039a00360435ffba0327ffba034d007902b4
00230242003601f4ffba0290ffba01f4002f01f4003b01f4001201f400b1
01f4006d067f001407760014022200430000fee702bc000004440043045a
fff504cefff5045a005304ce0041045a005304ce0041045a005304ce0041
045a005304ce0041045a005304ce0041045a005304ce0041043500710435
00ad045a000f04ce000f0000000000000076000000760000007600000076
0000013000000228000003f60000062e0000083a00000a6e00000af20000
0b7600000bf800000dd000000ea000000f3e00000f9800000ff000001062
0000119400001278000014480000162600001738000018c400001a3e0000
1b3400001d4800001ece00001f5e0000202c0000214a000021ec0000231c
0000248c0000276e000029f600002d1a00002e9400003006000031d80000
338800003582000037bc000038de00003a3200003da800003ebe0000411a
00004354000044700000466a000047f200004a9200004d8c00004ee20000
50ea0000536c0000574200005b3a00005da000005eea00005f9200006014
000060be000061a6000061e200006238000066320000687600006ad40000
6da6000071860000740a000078a200007bd200007e88000080ca00008534
0000871000008bda00008f42000091ae0000947a000096d4000099040000
9dc80000a01e0000a2c20000a5f00000aa520000aeec0000b1aa0000b3a6
0000b49a0000b5080000b5fa0000b6b80000b7080000b73a0000b7860000
b7bc0000b7f80000b82e0000b8780000b8ae0000b8ee0000b9360000b976
0000b9a40000b9da0000ba060000ba3a0000ba760000bab80000baee0000
bb280000bb580000bb900000bbc80000bc040000bc3c0000bc6e0000bcac
0000bce80000bd260000bd600000bd960000bddc0000be200000bf7c0000
c0540000c24a0000c4b40000c71c0000c7780000c8140000c9b00000ccc8
0000ceca0000d1360000d18e0000d2240000d3880000d5a40000d7480000
d89c0000d99e0000dada0000dc360000de6c0000dfee0000e1160000e1f0
0000e2da0000e4040000e4ea0000e6800000e76e0000e9020000ec6c0000
ee8e0000efea0000f0920000f0ea0000f1b00000f3320000f49a0000f548
0000f5e00000f67c0000f77e0000f7ba0000f7f80000f82e0000fa6e0000
fe020000fe3a0000fe720000ff780000ff9e0001004a000100ec000101d0
000102e20001032c0001035e000103ba0001052000010584000105e40001
084800010a7000010d0a00010d5a00010d7c00010e9000011168000111b0
000112040001124200011282000112b2000112e60001133a000113800001
13b2000113e60001141e0001145000011480000114c6000114f600011664
000116e0000117a2000117de0001185a000118b4000119ce00011aa40001
1b4200011bc600011c3000011da800011fae00011fec0001202a00012062
000120ac0001213000012276000124ba000124ea0001252c000126a80001
289c000128e200012a0400012abc00012bda00012d0000012efe0001308e
0001327c000134400001347a000134b6000134e60001352c000135800001
35bc000135fc000136380001366c000139100001394e000139b8000139f6
00013a3800013a6600013aae00013ae600013d9400013ebe00013eea0001
3f1c00013f5400013f9200013fc200013ff600014124000142c8000142fc
0001433000014366000143a4000143e600014422000144540001449a0001
44d0000145060001454400014578000145bc000145f8000147680001497a
000149be00014c0a00014c4c00014c7e00014cb600014ce800014d180001
4d4e00014d8e00014dce00014e7000015038000151c0000152d000015472
000155d6000156c0000157cc00015932000159a4000159d800015b240001
5e4600015ef200015fb600016064000161220001623e00016356000164b2
0001650e0001664a000167300001680e0001686c000168f0000169760001
69b8000169f400016a4400016a9400016ae400016b3600016b9600016bf6
00016c5800016cbe00016d4800016db000016e1600016e8c00016f020001
6f90000170060001707a000171060001717c000171f600017284000172fc
00017372000174000001748400017508000175c60001764e000176de0001
779800017826000178b00001796e000179fe00017a8a00017b4800017c22
00017d0200017e2400017e6800017ea400017ee200017f2600017f6a0001
839200018b260001925400019290000192ce000193140001935c000193a2
000193e8000194d00001955800019626000197d20001993400019b6c0001
9c5a00019d8400019e7e00019f960001a0340001a0b80001a1660001a234
0001a28e0001a33c0001a3be0001a42a0001a45e0001a5e80001a7420001
a7ba0001a8080001a8880001a8ec0001a9720001a9ae0001a9e00001aa16
0001aa540001aa960001aac40001ab080001ab360001ab700001ab9e0001
abd60001ac040001ac500001ac980001acd80001ad080001ad340001ad6a
0001ad9a0001add00001afbe0001b2720001b2a20001b2ec0001b31e0001
b3640001b3940001b3ce0001b3fa0001b4280001b4660001b6080001b63e
0001b66e0001b8900001b8b60001b9060001b9300001b9600001baaa0001
bc4e0001bc840001bcba0001bcee0001bd320001bd580001bd880001bdb8
0001bdea0001bf420001c12e0001c15e0001c1920001c1c40001c1f80001
c2280001c2580001c2860001c2b40001c2e40001c3180001c3480001c378
0001c4660001c4a60001c4e60001c5160001c5460001c5760001c5a60001
c5f00001c6200001c6500001c6800001c6b00001c6e40001c7180001c74e
0001c7880001c7fe0001c8380001ca100001cade0001cce80001cf680001
d1b60001d3bc0001d4360001d4d00001d4e00001d5f40001d6200001d7a2
0001d9080001d9ca0001da040001db780001dbb20001dbee0001dbfe0001
dc0e0001dd260001dd360001dd460001dd560001dd660001dd760001dee0
0001def00001df000001e0840001e0940001e19a0001e1aa0001e2b20001
e2c20001e2d20001e2e20001e4500001e60a0001e63e0001e6700001e6a0
0001e6d00001e7000001e72e0001e7640001e9000001e9f60001eb960001
ecbc0001edee0001eeec0001f09a0001f1dc0001f3420001f4480001f642
0001f6520001f7ac0001f8fa0001fa1a0001fb9e0001fd2a0001febc0001
fef40001ff2a0001ff620001ff920001ffc20001fff60002016800020198
000202be000202ce000202de000203120002032200020488000206640002
07f20002082200020a0200020b6000020b7000020c9200020ca200020d44
00020e7200020e820002112a000212c60002143e0002161e000217980002
188a0002189a000218aa000218ba000218ca000218da000218ea000218fa
00021a6400021c1200021c2200021d5600021ea60002208e0002229a0002
23d60002254e0002264600022680000227c2000227f2000228020002296e
00022b0a00022bf000022d6600022d760002303e0002319e0002337e0002
35d4000237e60002394a00023b9200023d3e00023d4e00023eb000023ec0
00023ed000023fda00023fea00024202000242120002439e000245160002
46f80002491000024a9200024c8a00024dcc00024e0600024fc00002516e
000251b4000253c4000253f2000255340002554400025554000255900002
55a00002577e0002599400025bdc00025c0c00025e7800026018000260b6
00026194000261da0002639800026522000265c000026728000267f00002
69140002696a00026a0400026af000026b2400026bca00026c2000026d1e
00026d7400026db400026df600026e3200026e6400026eae00026ef60002
6f7e0002716e0002724400027352000274280002754e000275e2000276b0
000277d20002795e000279f800027ab200027b6600027c9800027d7c0002
7eca00027f780002805200028142000282fa0002841000028536000286ee
000288b8000289f800028aa200028cc000028de200028efe000290240002
914a000291a4000292540002938c000293be000294040002945200029496
0002950600029684000296b2000296e00002970e0002973c0002976a0002
979800029a4000029a7800029ac600029b0400029b5000029bb000029cba
00029cee00029df000029e2800029e6200029ea800029eec00029f300002
9f5e0002a0f80002a2a00002a2e60002a33c0002a3740002a5fc0002a630
0002a65e0002a68c0002a6b80002a6ea0002a9340002a95e0002aa7a0002
ab2c0002abd80002ac5a0002ad160002ae2e0002af3c0002af700002aff6
0002b1520002b1d40002b21e0002b3280002b3700002b4740002b4f00002
b5480002b5ca0002b6b60002b7cc0002b8ba0002b9640002ba640002bb44
0002bc340002bd1c0002bdcc0002be4e0002c0ac0002c0d60002c1000002
c1b80002c1e20002c3240002c42a0002c5140002c53e0002c5680002c592
0002c5bc0002c5e60002c7660002c7900002c7ba0002c7e40002c80e0002
c8380002c8620002c88c0002c8b60002c8ea0002c9140002c93e0002c968
0002cae20002caf20002cc0c0002cc1c0002cc460002cc700002cc9a0002
ccc40002ce6c0002d07c0002d1aa0002d1ba0002d3360002d3460002d48c
0002d6580002d75e0002d8de0002da860002dcb20002de140002dffe0002
e1420002e2700002e29a0002e2c40002e2ee0002e3180002e3420002e36c
0002e3960002e3c00002e3ea0002e4140002e43e0002e4680002e4920002
e4bc0002e4e60002e5100002e74c0002e8c80002ea0c0002ebf40002ed3c
0002ed660002ed900002edba0002ede40002ee0e0002ee380002ee620002
ee8c0002eeb60002eee00002ef0a0002ef340002ef5e0002ef880002efb2
0002efdc0002f0060002f0300002f26c0002f5b20002f5dc0002f6060002
f6300002f65a0002f6840002f6ae0002f6d80002f7020002f72c0002f756
0002f7800002f7aa0002f7d40002f7fe0002f8280002f8520002f87c0002
f8a60002f8d00002f8fa0002f9240002f94e0002f9780002f9a20002f9cc
0002f9f60002fa200002fa4a0002fae40002fafa0002fb240002fe040002
fe140002ff2e000300500003018e000302d00003047600030486000305c8
000307180003090800030adc00030bf400030c0400030c8600030d140003
0e1400030e2400030ec400030ed400030fea0003113e0003126e0003127e
0003134c0003135c000314d2000314e2000315f6000316060003173a0003
18d00003198c0003199c00031a9a00031bf400031c8000031c9000031dba
00031f460003200200032012000320aa000320ba00032186000321960003
226e0003227e00032386000323960003255c0003256c000326c4000326d4
0003293e0003294e00032b4800032b5800032cc200032cd200032dc20003
2dd200032f6a00032f7a00033098000330a8000331e8000331f800033208
0003321800033390000333a0000333b0000333c000033512000336620003
3730000338140003399400033b1800033c1800033d2c00033e7000033e80
00033f6e00034048000341e4000341f40003431200034418000346100003
462000034630000346400003478a0003479a000348520003486200034970
0003498000034a6c00034a7c00034b9a00034baa00034c4800034c580003
4c6800034d5600034eca00034ff6000350f0000351000003511000035120
000352be000354780003554600035556000357b600035a0000035c860003
5eee00036174000363ea000365ba000367740003679e000367c8000367d8
000367e8000368120003683c000368660003687600036886000368b00003
68da000368ea000368fa000369240003694e000369780003698800036998
000369a8000369b8000369c8000369d800036a0200036a1200036a220003
6a4c00036a7600036aa000036aca00036af400036b1e00036b4800036b72
00036b9c00036bc600036bf000036c1a00036c4400036c6e00036c980003
6cc200036cec00036d1600036d4000036d6a00036d9400036dbe00036de8
00036e1200036e3c00036e6600036e9000036eba00036ee400036f0e0003
6f3800036f6200036f8c00036fb600036fe00003700a000370340003705e
00037088000370b2000370dc00037106000371300003715a000371840003
71ae000371d8000372020003722c0003725600037280000372aa000372d4
000372fe0003739e000373e20003745800037482000374ac000374d60003
75000003752a000375540003757e000375a8000375d2000375fc00037626
000376500003767a000376a4000376ce000376f8000377220003774c0003
7776000377a0000377ca000377f40003781e000378480003787c000378b0
000378e400037a9200037ca200037e92000380a0000381320003818c0003
81f600038290000383200003839000038464000385520003862600038716
000387b0000388840003891e000389cc00038a7200038ac400038c220003
8c7000038cbe00038d1600038d6e00038dc000038e1200038ece00038f8a
00039020000390b60003914c000391e80003928400039320000393320003
934400039356000393680003937a000393d400039434000394d0000394e2
000394f4000395040003951400039526000395380003954a0003955c0003
956e000395800003961c000396b20003974e000397e40003990000039926
0003994c000399720003999c000399d800039a4600039a8e00039b040003
9b4400039bb000039bec00039c5000039c8800039cec00039d2c00039d82
00039dc200039e2e00039e7800039ed000039f0800039f5a00039f920003
9fe60003a0140003a03a0003a0640003a09e0003a0ce0003a0fe0003a154
0003a1b60003a21a0003a2820003a2ea0003a34a0003a39c0003a3f40003
a44e0003a4a60003a4d60003a5140003a53a0003a56e0003a5980003a5be
0003a5e40003a60a0003a6460003a69e0003a6fa0003a75c0003a7ae0003
a80c0003a8440003a8940003a8d00003a9200003a9500003a9880003a9b8
0003a9ec0003aa120003aa380003aa680003aa980003aabe0003aae40003
ab0e0003ab3a0003ab600003ab9c0003abcc0003abfc0003ac2c0003ac5c
0003ac820003acbe0003acee0003ad2e0003ad580003ad840003adb60003
ade00003ae0c0003ae3a0003ae700003aeae0003aef60003af340003af64
0003afb40003afee0003b0300003b0600003b0b60003b0e00003b1ac0003
b1d60003b2960003b2c00003b3760003b3a00003b4640003b5580003b686
0003b7ee0003b91e0003b9fa0003bb1e0003bdda0003c0ce0003c27e0003
c4b00003c6d20003c9c20003cb6e0003cd6a0003cd7a0003cede0003d14c
0003d2d20003d6c60003d9dc0003db8a0003dd7e0003dee60003def60003
e05c0003e1d00003e2e00003e4520003e52c0003e5a20003e6580003e6fe
0003e86e0003e8a60003e9200003e9e20003ea9c0003eb040003ec0a0003
ed400003ee0e0003ef6c0003efe60003f0600003f1280003f1e20003f296
0003f2f20003f34c0003f3940003f4040003f4800003f4ca0003f5040003
f54a0003f58e0003f5e00003f6320003f6b40003f7360003f7780003f7b8
0003f7ee0003f8240003f8520003f8800003f8b40003f8e80003f92a0003
f96c0003f9a80003f9e40003fa1e0003fa580003fa8a0003fabc0003faee
0003fb200003fb5a0003fb940003fbd60003fc180003fc5a0003fc9c0003
fcea0003fd380003fd7a0003fdbc0003fdfc0003fe3c0003fe760003feb0
0003fefc0003ff480003ff860003ffc60004000c000400520004008e0004
00e4000401200004015c0004019c000401dc000402180004025400040294
000402d4000403180004035c000403b00004043e00040480000404c20004
052a00040592000405c4000405f60004062e00040666000406fc00040792
000407dc00040826000408620004089e000408f40004094a000409940004
09de00040a3600040a8e00040ace00040b0e00040b4600040b7e00040bc8
00040c1200040c5000040c8e00040cd000040d1200040d6600040dba0004
0e0000040e4600040e8c00040ed200040f2800040f7e00040fd40004102a
00041076000410c20004110e0004115a000411ce00041242000412b60004
132a00041368000413a6000413e400041422000414600004149e000414e2
0004152600041572000415be0004161e0004166a000416a8000416f60004
180600041856000418a6000418de000419160004196c000419c200041a36
00041a9a00041adc00041b1e00041b7400041bc200041c0e00041c5a0004
1c9a00041cda00041d2200041d6a00041dd600041e3000041e6800041ea0
00041ee000041f200004203a000421800004227000042380000423d60004
242c0004247e000424d2000425360004259a000425f000042646000426bc
0004273200042774000427b6000427f80004283a0004287c000428be0004
29140004296a000429bc00042a1000042a9800042b1a00042bba00042c5c
00042c9a00042cd800042d1600042d5200042d9000042dce00042e0c0004
2e4800042f2c000430180004312e0004324a00043314000433de000434d8
000435d2000436d0000437ce000438ec00043a0a00043b3000043c560004
3d5800043e5a00043eec00043f7e00043fbc00043ffa00044054000440ae
000440e60004411e0004422e0004423e00044286000442ce000443260004
437e000443b0000443e20004442400044466000444a0000444da0004451e
00044562000445da00044654000446e40004472800044768000447ea0004
486c000449c4000449d400044a2200044a7000044aac00044ae800044b2e
00044b7400044bc200044c1000044c6000044cb000044d0c00044d680004
4ede000450460004507e000450b80004510400045150000451a2000451f4
000452460004529c000452d8000453140004536a000453be000454f60004
5596000455e4000456240004565e000457f400045a5c00045b2000045cb6
00045e1400045ee200046088000462dc000465140004655a0004658c0004
66360004675a0004677e000468180004692400046a3400046b4400046c52
00046dd800046e0a00046eac00046ed400046f3600046f9800046ffa0004
705c0004709a000470d8000471120004714c00047178000471c4000471fe
0004723800047394000474e8000474f8000475b6000476ec0004774a0004
7862000479f000047a9600047bdc00047c1a00047c5800047c9000047ce8
00047d1400047d5600047dba00047e0200047e6400047ec400047f360004
7fb20004802e000480b00004813c000481c800048252000482d20004830c
00048348000484ac00048576000485a6000485d600010000068a00f2003c
0076000700020010002f0056000005ca0f130003000200000047035a0000
00030000000000fe00000000000300000001001e00fe0000000300000002
000e02080000000300000003007201d60000000300000004001e00fe0000
000300000005001802180000000300000006002202480000000300000007
00d800fe0000000300000008002602f600000003000000090086091e0000
00030000000a055609a4000000030000000b00720efa000000030000000c
00660f6c000000030000000d06b4026a000000030000000e005c0fd20001
000000000000007f102e0001000000000001000f10ad0001000000000002
000711320001000000000003003911190001000000000004000f10ad0001
000000000005000c113a0001000000000006001111520001000000000007
006c10ad0001000000000008001311a90001000000000009004314bd0001
00000000000a02ab1500000100000000000b003917ab000100000000000c
003317e4000100000000000d035a1163000100000000000e002e18170003
000104030002000c18450003000104050002001018550003000104060002
000c18650003000104070002001018710003000104080002001018810003
00010409000000fe00000003000104090001001e00fe0003000104090002
000e02080003000104090003007201d60003000104090004001e00fe0003
000104090005001802180003000104090006002202480003000104090007
00d800fe0003000104090008002602f600030001040900090086091e0003
00010409000a055609a4000300010409000b00720efa000300010409000c
00660f6c000300010409000d06b4026a000300010409000e005c0fd20003
0001040a0002000c184500030001040b00020010189100030001040c0002
000c184500030001040e0002000c18a10003000104100002000e18b10003
000104130002001218bf0003000104140002000c18450003000104150002
001018450003000104160002000c18450003000104190002000e18d10003
0001041b0002001018a100030001041d0002000c184500030001041f0002
000c18450003000104240002000e18df00030001042a0002000e18ed0003
0001042d0002000e18fb00030001080a0002000c18450003000108160002
000c1845000300010c0a0002000c1845000300010c0c0002000c18450003
00010f0000070066190900540079007000650066006100630065002000a9
00200054006800650020004d006f006e006f007400790070006500200043
006f00720070006f0072006100740069006f006e00200070006c0063002e
00200044006100740061002000a900200054006800650020004d006f006e
006f007400790070006500200043006f00720070006f0072006100740069
006f006e00200070006c0063002f005400790070006500200053006f006c
007500740069006f006e007300200049006e0063002e0020003100390039
0030002d0031003900390032002e00200041006c006c0020005200690067
00680074007300200052006500730065007200760065006400540069006d
006500730020004e0065007700200052006f006d0061006e00ae00200054
0072006100640065006d00610072006b0020006f00660020005400680065
0020004d006f006e006f007400790070006500200043006f00720070006f
0072006100740069006f006e00200070006c006300200072006500670069
00730074006500720065006400200069006e002000740068006500200055
005300200050006100740020002600200054004d0020004f00660066002e
00200061006e006400200065006c0073006500770068006500720065002e
004d006f006e006f0074007900700065003a00540069006d006500730020
004e0065007700200052006f006d0061006e00200052006500670075006c
00610072003a00560065007200730069006f006e00200033002e00300030
00200028004d006900630072006f0073006f00660074002900540069006d
00650073004e006500770052006f006d0061006e00500053004d0054004e
004f00540049004600490043004100540049004f004e0020004f00460020
004c004900430045004e00530045002000410047005200450045004d0045
004e0054000d000a000d000a005400680069007300200074007900700065
00660061006300650020006900730020007400680065002000700072006f
007000650072007400790020006f00660020004d006f006e006f00740079
007000650020005400790070006f00670072006100700068007900200061
006e00640020006900740073002000750073006500200062007900200079
006f007500200069007300200063006f0076006500720065006400200075
006e00640065007200200074006800650020007400650072006d00730020
006f0066002000610020006c006900630065006e00730065002000610067
007200650065006d0065006e0074002e00200059006f0075002000680061
007600650020006f0062007400610069006e006500640020007400680069
007300200074007900700065006600610063006500200073006f00660074
007700610072006500200065006900740068006500720020006400690072
006500630074006c0079002000660072006f006d0020004d006f006e006f
00740079007000650020006f007200200074006f00670065007400680065
00720020007700690074006800200073006f006600740077006100720065
002000640069007300740072006900620075007400650064002000620079
0020006f006e00650020006f00660020004d006f006e006f007400790070
0065002700730020006c006900630065006e0073006500650073002e000d
000a000d000a005400680069007300200073006f00660074007700610072
006500200069007300200061002000760061006c007500610062006c0065
0020006100730073006500740020006f00660020004d006f006e006f0074
007900700065002e00200055006e006c00650073007300200079006f0075
0020006800610076006500200065006e0074006500720065006400200069
006e0074006f002000610020007300700065006300690066006900630020
006c006900630065006e00730065002000610067007200650065006d0065
006e00740020006700720061006e00740069006e006700200079006f0075
0020006100640064006900740069006f006e0061006c0020007200690067
006800740073002c00200079006f0075007200200075007300650020006f
00660020007400680069007300200073006f006600740077006100720065
0020006900730020006c0069006d006900740065006400200074006f0020
0079006f0075007200200077006f0072006b00730074006100740069006f
006e00200066006f007200200079006f007500720020006f0077006e0020
007000750062006c0069007300680069006e00670020007500730065002e
00200059006f00750020006d006100790020006e006f007400200063006f
007000790020006f00720020006400690073007400720069006200750074
00650020007400680069007300200073006f006600740077006100720065
002e000d000a000d000a0049006600200079006f00750020006800610076
006500200061006e00790020007100750065007300740069006f006e0020
0063006f006e006300650072006e0069006e006700200079006f00750072
002000720069006700680074007300200079006f0075002000730068006f
0075006c0064002000720065007600690065007700200074006800650020
006c006900630065006e00730065002000610067007200650065006d0065
006e007400200079006f0075002000720065006300650069007600650064
00200077006900740068002000740068006500200073006f006600740077
0061007200650020006f007200200063006f006e00740061006300740020
004d006f006e006f007400790070006500200066006f0072002000610020
0063006f007000790020006f006600200074006800650020006c00690063
0065006e00730065002000610067007200650065006d0065006e0074002e
000d000a000d000a004d006f006e006f0074007900700065002000630061
006e00200062006500200063006f006e0074006100630074006500640020
00610074003a000d000a000d000a0055005300410020002d002000280038
0034003700290020003700310038002d0030003400300030000900090055
004b0020002d002000300031003100340034002000300031003700330037
0020003700360035003900350039000d000a0068007400740070003a002f
002f007700770077002e006d006f006e006f0074007900700065002e0063
006f006d004d006f006e006f007400790070006500200054007900700065
002000440072006100770069006e00670020004f00660066006900630065
0020002d0020005300740061006e006c006500790020004d006f00720069
0073006f006e002c00200056006900630074006f00720020004c00610072
00640065006e007400200031003900330032005400680069007300200072
0065006d00610072006b00610062006c0065002000740079007000650066
006100630065002000660069007200730074002000610070007000650061
00720065006400200069006e0020003100390033003200200069006e0020
005400680065002000540069006d006500730020006f00660020004c006f
006e0064006f006e0020006e00650077007300700061007000650072002c
00200066006f007200200077006800690063006800200069007400200077
00610073002000640065007300690067006e00650064002e002000200049
00740020006800610073002000730075006200730065007100750065006e
0074006c00790020006200650063006f006d00650020006f006e00650020
006f0066002000740068006500200077006f0072006c006400730020006d
006f007300740020007300750063006300650073007300660075006c0020
00740079007000650020006300720065006100740069006f006e0073002e
002000200054006800650020006f0072006900670069006e0061006c0020
00640072006100770069006e00670073002000770065007200650020006d
00610064006500200075006e0064006500720020005300740061006e006c
006500790020004d006f007200690073006f006e00270073002000640069
00720065006300740069006f006e00200062007900200056006900630074
006f00720020004c0061007200640065006e007400200061007400200054
00680065002000540069006d00650073002e002000200049007400200074
00680065006e002000770065006e00740020007400680072006f00750067
006800200061006e00200065007800740065006e00730069007600650020
006900740065007200610074006900760065002000700072006f00630065
0073007300200069006e0076006f006c00760069006e0067002000660075
0072007400680065007200200077006f0072006b00200069006e0020004d
006f006e006f007400790070006500270073002000540079007000650020
00440072006100770069006e00670020004f00660066006900630065002e
00200020004200610073006500640020006f006e00200065007800700065
00720069006d0065006e007400730020004d006f007200690073006f006e
002000680061006400200063006f006e0064007500630074006500640020
007500730069006e00670020005000650072007000650074007500610020
0061006e006400200050006c0061006e00740069006e002c002000690074
00200068006100730020006d0061006e00790020006f006c006400200073
00740079006c006500200063006800610072006100630074006500720069
007300740069006300730020006200750074002000770061007300200061
00640061007000740065006400200074006f002000670069007600650020
0065007800630065006c006c0065006e00740020006c0065006700690062
0069006c00690074007900200063006f00750070006c0065006400200077
00690074006800200067006f006f0064002000650063006f006e006f006d
0079002e002000200057006900640065006c007900200075007300650064
00200069006e00200062006f006f006b007300200061006e00640020006d
006100670061007a0069006e00650073002c00200066006f007200200072
00650070006f007200740073002c0020006f006600660069006300650020
0064006f00630075006d0065006e0074007300200061006e006400200061
006c0073006f00200066006f007200200064006900730070006c00610079
00200061006e00640020006100640076006500720074006900730069006e
0067002e0068007400740070003a002f002f007700770077002e006d006f
006e006f0074007900700065002e0063006f006d002f00680074006d006c
002f006d0074006e0061006d0065002f006d0073005f00740069006d0065
0073006e006500770072006f006d0061006e002e00680074006d006c0068
007400740070003a002f002f007700770077002e006d006f006e006f0074
007900700065002e0063006f006d002f00680074006d006c002f006d0074
006e0061006d0065002f006d0073005f00770065006c0063006f006d0065
002e00680074006d006c0068007400740070003a002f002f007700770077
002e006d006f006e006f0074007900700065002e0063006f006d002f0068
0074006d006c002f0074007900700065002f006c006900630065006e0073
0065002e00680074006d006c547970656661636520a920546865204d6f6e
6f7479706520436f72706f726174696f6e20706c632e204461746120a920
546865204d6f6e6f7479706520436f72706f726174696f6e20706c632f54
79706520536f6c7574696f6e7320496e632e20313939302d313939322e20
416c6c2052696768747320526573657276656454696d6573204e65772052
6f6d616ea82054726164656d61726b206f6620546865204d6f6e6f747970
6520436f72706f726174696f6e20706c6320726567697374657265642069
6e2074686520555320506174202620544d204f66662e20616e6420656c73
6577686572652e4d6f6e6f747970653a54696d6573204e657720526f6d61
6e20526567756c61723a56657273696f6e20332e303020284d6963726f73
6f66742954696d65734e6577526f6d616e50534d544e4f54494649434154
494f4e204f46204c4943454e53452041475245454d454e540d0a0d0a5468
6973207479706566616365206973207468652070726f7065727479206f66
204d6f6e6f74797065205479706f67726170687920616e64206974732075
736520627920796f7520697320636f766572656420756e64657220746865
207465726d73206f662061206c6963656e73652061677265656d656e742e
20596f752068617665206f627461696e6564207468697320747970656661
636520736f66747761726520656974686572206469726563746c79206672
6f6d204d6f6e6f74797065206f7220746f67657468657220776974682073
6f667477617265206469737472696275746564206279206f6e65206f6620
4d6f6e6f747970652773206c6963656e736565732e0d0a0d0a5468697320
736f66747761726520697320612076616c7561626c65206173736574206f
66204d6f6e6f747970652e20556e6c65737320796f75206861766520656e
746572656420696e746f2061207370656369666963206c6963656e736520
61677265656d656e74206772616e74696e6720796f75206164646974696f
6e616c207269676874732c20796f757220757365206f6620746869732073
6f667477617265206973206c696d6974656420746f20796f757220776f72
6b73746174696f6e20666f7220796f7572206f776e207075626c69736869
6e67207573652e20596f75206d6179206e6f7420636f7079206f72206469
7374726962757465207468697320736f6674776172652e0d0a0d0a496620
796f75206861766520616e79207175657374696f6e20636f6e6365726e69
6e6720796f75722072696768747320796f752073686f756c642072657669
657720746865206c6963656e73652061677265656d656e7420796f752072
6563656976656420776974682074686520736f667477617265206f722063
6f6e74616374204d6f6e6f7479706520666f72206120636f7079206f6620
746865206c6963656e73652061677265656d656e742e0d0a0d0a4d6f6e6f
747970652063616e20626520636f6e7461637465642061743a0d0a0d0a55
5341202d202838343729203731382d303430300909554b202d2030313134
34203031373337203736353935390d0a687474703a2f2f7777772e6d6f6e
6f747970652e636f6d4d6f6e6f7479706520547970652044726177696e67
204f6666696365202d205374616e6c6579204d6f7269736f6e2c20566963
746f72204c617264656e742031393332546869732072656d61726b61626c
6520747970656661636520666972737420617070656172656420696e2031
39333220696e205468652054696d6573206f66204c6f6e646f6e206e6577
7370617065722c20666f7220776869636820697420776173206465736967
6e65642e20204974206861732073756273657175656e746c79206265636f
6d65206f6e65206f662074686520776f726c6473206d6f73742073756363
65737366756c2074797065206372656174696f6e732e2020546865206f72
6967696e616c2064726177696e67732077657265206d61646520756e6465
72205374616e6c6579204d6f7269736f6e277320646972656374696f6e20
627920566963746f72204c617264656e74206174205468652054696d6573
2e20204974207468656e2077656e74207468726f75676820616e20657874
656e73697665206974657261746976652070726f6365737320696e766f6c
76696e67206675727468657220776f726b20696e204d6f6e6f7479706527
7320547970652044726177696e67204f66666963652e2020426173656420
6f6e206578706572696d656e7473204d6f7269736f6e2068616420636f6e
647563746564207573696e6720506572706574756120616e6420506c616e
74696e2c20697420686173206d616e79206f6c64207374796c6520636861
726163746572697374696373206275742077617320616461707465642074
6f206769766520657863656c6c656e74206c65676962696c69747920636f
75706c6564207769746820676f6f642065636f6e6f6d792e202057696465
6c79207573656420696e20626f6f6b7320616e64206d6167617a696e6573
2c20666f72207265706f7274732c206f666669636520646f63756d656e74
7320616e6420616c736f20666f7220646973706c617920616e6420616476
6572746973696e672e687474703a2f2f7777772e6d6f6e6f747970652e63
6f6d2f68746d6c2f6d746e616d652f6d735f74696d65736e6577726f6d61
6e2e68746d6c687474703a2f2f7777772e6d6f6e6f747970652e636f6d2f
68746d6c2f6d746e616d652f6d735f77656c636f6d652e68746d6c687474
703a2f2f7777772e6d6f6e6f747970652e636f6d2f68746d6c2f74797065
2f6c6963656e73652e68746d6c004e006f0072006d0061006c006e007900
6f00620079010d0065006a006e00e9006e006f0072006d0061006c005300
740061006e0064006100720064039a03b103bd03bf03bd03b903ba03ac00
4e006f0072006d00610061006c0069004e006f0072006d00e1006c006e00
65004e006f0072006d0061006c0065005300740061006e00640061006100
720064041e0431044b0447043d044b0439004e0061007600610064006e00
6f0074006801b001a10300006e00670041007200720075006e0074006100
490061006e005000200053007500730061006e004c002000470057006100
6400650020004d0069006b00650044007500200047007200650067004800
200045006c0069004b002000500050006100740068006500200026002000
52006f0062004e006f002e000000ba0054ffc003e1b345453240b803e1b3
2b2e3240b803e1b2282932b9ffc003e1b21a1c32bd03e102ac0027001fff
c003dfb2161b32b9ffc003deb2424232b9ffc003deb2363832b9ffc003de
b32a2d32df410a03de00ef03de000203de03df0028001fffc003dfb3282e
32f0410d03df0001037e000f0101001f00a003dd00b003dd0002004003da
b32426329fbf03cc000103ca03c90064001fffc003c9b20d1132410a03c7
03b70012001f03b603b50064001fffc003b5b30e1132004173038d000100
c0038d00d0038d00e0038d00f0038d0004006f03a7007f03a7008f03a700
af03a70004000f03a7001f03a7002f03a7004f03a7000403ab03ab00ef03
a50001000f03a5002f03a5006f03a5008f03a50004005403aa0001006b03
aa000103a8036a0022001f038c03940015001f038b03930015001f03a403
93001a001f03a20394001e001f03a10393001e001f039f0394001e001f03
9b0394001a001f039a0393001e001f039903940016001f03980394001600
1f03970393001b001f03960394001b001f03950393001b001f0376037500
1a001f03740375001a001f03a00373b21e1f10411e039300200393003003
93000300200394003003940040039400030000039400010383036c001e00
1f03b1036c0032001f036d036c0032001fffc0037db2212332b9ffc0037d
b3171932a0410a037d00b0037d00c0037d00d0037d0004ffc0037cb22123
32b9ffc0037cb3171932a0412d037c00b0037c00c0037c00d0037c000400
300373004003730002000003730010037300200373000300e0037300f003
73000200b0037300c0037300d003730003008403730090037300a0037300
030377036a0029001f0389036ab2281f40b80367b33940323fbb03660001
00400366b3191d328fbb0366000100400366b3090a3240b80366b3090e32
40b80366b3090f323fbb0365000100400365b3090c3240b80365b31a1d32
40b80365b3090e326b410e0363007b036300020014036300240363003403
630044036300040363b2242f1fba034e006d0800400e1f7f027f037f047f
050430440112bf033200500800001f0012032d003c080040291f5f3c0137
6009700980090310092009300940095009056f037f038f03031f032f033f
034f035f0305b8ffc0b2073a33b8ffc04047063a33900ba00bb00bc00bd0
0b05b006c006d006e006f0060520063006400650066006700680069006a0
06099006900702600b700b800b03100b200b300b400b500b051f0701a041
850362000100000362001003620070036200900362000400f0035f000100
20035e0020035f0030035f0040035e00040000035e0000035f0010035f00
d0035e00e0035f00050010030f0020030f0030030f00d0030f00e0030f00
050000030f0010030f0050030f0060030f0070030f00d0030f0006000003
0f0010030f0020030f0030030f00e0030f00f0030f0006030f0027000003
0e0030030e000200e0030e00f0030e0002030e004a00e0030d00f0030d00
02030d002700d002fc0001001002fc002002fc005002fc000300d002fc00
e002fc0002000002fc001002fc002002fc003002fc005002fc006002fc00
0600e002fc00f002fc0002002002fc003002fc004002fc000302fc406127
c02901b02901a02901902901403c3f413240223f41321212125f235f255f
285fa5046f236f256f286fa5044f234f254f284fa5043f233f253f283fa5
042f232f252f282fa5041f231f251f281fa5048f4caf4cbf4ccf4c045f4c
6f4c7f4c0337b8ffc0b3b22b3032b8ffc0b3b2222532b8ffc0b5b2191a32
370f413b02af0001005f02af009f02af00df02af0003001f02af002f02af
003f02af006f02af000402af02af001f02ad002f02ad003f02ad004f02ad
005f02ad000500df02ad0001000f02ad001f02ad003f02ad005f02ad009f
02ad0005005f02ad00df02ad0002000f02ad001f02ad003f02ad00030040
02acb23a334f414a02ac005f02ac009f02ac0003002f02ac003f02ac0002
000f02ac003f02ac00af02ac000300b002ac00e002ac0002004f02ac005f
02ac00a002ac0003001f02ac002f02ac003f02ac0003000f035a0001000f
035a001f035a003f035a005f035a0070035a000500cf035700df03570002
000f0357001f03570070035700af03570004035a035a0357035702ad02ad
02ac02ac032c400d31151f001616000000121108104110020c004a000d01
a8004a000d0198004a000d0189004a000d013f004a000d0124400e4a0df6
4a0dbe4a0d864a0d274a0dbe02280041000d01940041000d0121400b410d
b4410d4f410d29410d411002170021000d02150021000d02060021000d01
eb0021000d014e0021000d012c4014210df9210df3210df1210d9d210d71
210d3d210d4110021c001f000d0214001f000d020b001f000d0196001f00
0d014a001f000d0126400b1f0dc61f0d571f0d371f0d410d019e0141000d
00420141000d001e0141000d001b0141000d01f2b40f440f0009bb01f200
44000d0201b23c291fb80200b23c291fb801ffb23c411fb801feb23c471f
b801fdb23c9e1fb801fab23c931fbc01f9010f0101001f01f6b224e41f41
1501f401490401001f01f301490401001f01f1014900ab001f01f0014900
67001f01a6003c0125001f01a4b23c811f411501a3010f019a001f01a200
220801001f01a100500401001f019f0149019a001f019d01490067001f01
9cb22c621fb8019bb22c791fbc019a002c0101001f0197b22ce41fb80193
b22c891fb80192b22c6c1fb8018fb2259e1fb8016ab23c2a1f4111016700
240201001f0163002502ab001f014c010f019a001f01480149006c001f01
47b22c891fb80145b22c9e1fb80144b22c791fb80143b223311fb80127b2
3c811fbc012300500101001f011fb223e41f4115011d0023019a001f011c
00230801001f011b00250801001f010e010f0401001f010d00220401001f
0108b223811fb80106b425e41ff73cbb0125001f00f5010fb29e1fe3bc01
490156001f00e20149b2ab1fd1b901490401b21fcf2cb80125b61fce23bb
1fc524b80156b21fc02cb80801b21fbf2cb80201b51fb124e41fb0b90149
0201b61faf2c671fad23b80801b21fa523b80201400b1f9f3c2d1f9b235a
1f9925b80201b21f812cbc0401001f006d010f0156400b1f592c3e1f4c3c
ab1f4625b80101b21f403cb80125400a1f3a23721f393cab1f38b80149b3
ab1f3124b80401b21f3025b802abb61f2a24e41f2623b80156b21f5537ba
023500070175402c0774076207560751073b0733072d0720071d071c0714
08120810080e080c080a080808060804080208000814b8ffe0402b000001
001406100000010006040000010004100000010010020000010002000000
01000002010802004a00b013034b024b534201b0124b004b5442b0372b4b
b807ff52b0382b4bb008505b58b101018e59b0382bb00288b801005458b8
01ffb101018e851bb0124358b90001012f858d1bb90001017c858d595901
4bb0c063004b6220b0f65323b8010a515ab0052342180016763f183f123e
113946443e113946443e113946443e113946443e11394660443e11394660
442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b2b2b181db096
4b5358b0aa1d59b0324b5358b0ff1d594bb04753205c58b90271026f4544
b90270026f45445958b9017a0271455258b90271017a4459594bb0475320
5c58b9002202704544b9003c027045445958b901b30022455258b9002201
b34459594bb04c53205c58b9014900224544b1222245445958b901c20149
455258b9014901c24459594bb06753205c58b9002402714544b900500271
45445958b9021e0024455258b90024021e4459594bb8020153205c58b901
0f00224544b1222245445958b90c00010f455258b9010f0c004459594bb0
1c53205c58b125254544b12c2545445958b13725455258b125374459594b
b0ab53205c58b125254544b1232545445958b901590025455258b9002501
594459594bb8010153205c58b125254544b1282545445958b90208002545
5258b9002502084459592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b65422b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b01b361dc6463456523456023456560234560
b08b766818b080622020b164dc4565234520b003266062636820b0032661
65b0dc236544b064234420b161634565234520b003266062636820b00326
6165b063236544b0612344b10063455458b163406544b261406145236144
59b3a67f434b456523456023456560234560b089766818b080622020b143
7f4565234520b003266062636820b003266165b07f236544b043234420b1
a64b4565234520b003266062636820b003266165b04b236544b0a62344b1
004b455458b14b406544b2a640a645236144594b5242014b5058b1080042
59435c58b108004259b3020b0a124358601b2159421610703eb0124358b9
3b21187e1bba040001a8000b2b59b00c2342b00d2342b0124358b92d412d
411bba04000400000b2b59b00e2342b00f2342b0124358b9187e3b211bba
01a80400000b2b59b0102342b0112342002b001845694445694445694445
6944737373747373737475752b7373747475184569447373742b4bb02153
4bb046515a58b03cb03c45b040604459012b2b2b2b757575757575757543
584010bf3ccf3c026f3c7f3c8f3c9f3caf3c0575755943584012bf22cf22
025f226f227f228f229f22af2206757559435c58b6403c9f22ef22037559
2b2b01747474744544737374747575454473454473744544737475737373
737300757575737575752b2b757575752b752b435841220063032d000100
03032d0013032d0023032d0033032d0053032d000500c3032d00d3032d00
e3032d00f3032d00040083032d0093032d00a3032d00b3032d0004032d03
2d4518694474747575592b4358b900180332b330353238b80332b3616632
38b80332b3535a3238b80332b3454e3238b80332b33c413218b80332b23f
330a410f0332000100ba033200ca033200da033200ea033200fa03320005
033203324518694474752b2b2b2b2b2b597300732b012b7575002b2b2b74
002b2b2b732b74012b002b2b017373737474732b2b00732b2b002b2b2b01
7374732b012b2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b0001737500737300
4569440073730173742b2b2b2b2b732b00732b752b2b732b2b2b2b2b2b2b
2b2b2b0000>
[15785 11565 15133 15893 15661 16181 16337 16077 15205 16177 15877 16065 15621
15813 16129 13457 16337 16293 16819 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

1 0 3 <> TimesNewRomanPSMT AddT42Char 
1 2670 10 <000100510323011a056b000c0051401b0a0e801e67360b182a35340c382a
3534b80bc80bd80be80b040c00b80154b706030e17171a0900b80335400a
0c0c096d03800d54a4182b10f6ed392fed4e10456544e6003f4dfd3c3130
01722b2b2b130326353436333216151407039e3617342d2d3b1a36032301
287b2b403a3b302591fed900>TimesNewRomanPSMT AddT42Char 
1 3902 16 <000100530180025802170003003f40200205801d64367f050101000200b0
030300021001500160019001a001d0010601b80134b5008004545a182b10
f6fd5d3c103c002fed3c103c3130015d2b13211521530205fdfb02179700
>TimesNewRomanPSMT AddT42Char 
1 3992 17 <00010091ffe4016f00c2000b002b401c0040060b034009403a3509403f35
5f09019f09af090209850c6a7a182b10f671722b2bed003fed3130253216
15140623222635343601002f40412e2e4141c2412e2e41412e2f4000>TimesNewRomanPSMT AddT42Char 
1 4080 18 <00010003ffe4023e058e0003005240090005cb1f6736000101b80327400d
02031402020303000002010b00b8011f40142003300360037003a003e003
0603bb01ad02cb04b8016fb1df182b10f6edf45ded003f3c3f3c87052e2b
7d10c431302b01012301023efe155001eb058efa5605aa00>TimesNewRomanPSMT AddT42Char 
1 7886 29 <000200b0ffe4019003b0000b00170042b10319b80125401d0d67369019a0
1902064000070c40120b0f4015034009349015a0150215bc0125001800d2
010000182b10f65df4ed10ed003fed3fed3130015d2b0132161514062322
2635343613321615140623222635343601212e41412e2e41412c2f41422e
2e414103b0412e2e41412e2e41fd13422e2e41412e2e4200>TimesNewRomanPSMT AddT42Char 
1 11546 38 <0001004affe1050f056b002401024042091e2f012f022f032f1f960f991e
a30fa312b60fb7120b081e011617017d037b1578168d038a169d03961aac
03bb03090c030e04021d48035903052f081011241b00b80105b5021b0101
ba00b8034bb6209a05281c0301b802dfb5112bb0100110b80341b58f0d9f
0d020db8032f402f140902ac000101013210acaf11011f113f1102111a40
260126093c2018010f181f1802180c0d0d02551849256463182b4e10f42b
5d724ded4e105df672714dedf471ed003ffd71f45df4e63fedecf4ed0110
edf4ed10c9313043794020151b060c07251a260b261625061b092d000c15
092d000819052d010a170d2d00002b2b012b2b2b2b2b2b818101715d0072
715d01132326262322060215141216333236371706042320272635341224
33321716333237363704d11f1f3ee6a187da7d76ed9884ca791f66fef0bb
feafb98ab6013fbd938f2a121b141a0b056bfe33cfb689fed4dfb8fef290
71a814b5a8fabafccb0154bb4816131b3000>TimesNewRomanPSMT AddT42Char 
1 11924 39 <0002002300000579054c00160021010340590b1b0b1d86109510d5100576
107614871098139915c91bc91dd41008181112141d1e03071501871a881e
022808061f1b002122071f1b0d21231721191f280e0e0d02192816160008
1c3c4f1201001210122012301240120512b8ffdeb60d0d0255124923b8ff
c0403e3f354023012023017023a023e023032321170613130255170c0f0f
0255170c0d0d0255172207060c10100255060c0f0f0255061a0d0d025506
9e226163182b4e10f42b2b2b3c4dfd2b2b2b3c4d105d71722bf62b5d724d
ed003f3c10ed3f3c10ed1139392b2b31304379401c1a1e0f15102514261e
0f1c56011a151c56011d111f56011b131956002b2b012b2b2b2b8181005d
7101725d7133353332373635113427262323352120041215100706212716
33320011100023220723335624161c274d3302280130013dc1acc1fe75db
7f56e80132fecef05a7325372173036c7f202c258afebed3fee5bed4621c
01460117011901441d00>TimesNewRomanPSMT AddT42Char 
1 12760 41 <000100210000041f054c002d012ab1282fb8011e40372564360904090ab0
2f03982bba2bc62bd903d32be904e90afb04fb0a09700570067f077f0880
0580068f078f0808070a092a0207210c0cb80126400d081b071d1f1b1721
2206210202b801264029051b060e1f1b1621231e1f1b2621232b2c280a08
0c0405020201230c0d0d172d002326002810280228b802d3402527272602
161708272b28ac002901002930294029702904299006061f07014f0701bf
070107b801b5402e000e06131302550e0c0f0f02550e0c0d0d02550e221e
1d0c101002551d0c0f0f02551d1a0d0d02551d9e2e6163182b4e10f42b2b
2b3c4dfd2b2b2b3cf45d71723c10f65d71fde4003f3c3f3c10ee5d10fd3c
12392f3cfd3c111239111239011112392b2b0110edec0010fd2b0110edec
0010fd313000715d015d712b0111333236373311232e0223231114171617
16333315213533323736351134272627262323352113232e022301a3f755
4f0d252501274544f70d0a202c3031fdba305426180d0a1f2b313003f10d
231a45656a0502fdeb4b6ffe354f4a25fe566721191218252531207a036c
672119121825fed65f592800>TimesNewRomanPSMT AddT42Char 
2 1736 51 <000200220000042b054c001f002c0178b9002effc040933a352f2e751874
1b741c7c28702e951c077918b724ba28db1bdb1cda24061927102e282639
2539273b28302e5a276927702e802e0bc600011a1c291c4b1cd719db1b05
a82801ca24d917da24d927d828eb24061c40231d28080e1f1b082122011f
1b0721230f1f1b152123001d202c2a1d283f234f2302232307152a281616
150208070812001a101a301a401a701a051a492eb8ffc0403e3f35002e01
402eb02e029f2ec02ed02e032e2c010613130255010c0f0f0255010c0d0d
025501220f0e0c101002550e0c0f0f02550e1a0d0d02550e9e2d2eb80177
b3216163182b2b4ef42b2b2b3c4dfd2b2b2b3c4d105d71722bf65d4d4358
b90026032de91bb90026032ded59003f3c3f3c10ed1112392f5ded123939
12392b2b2b31304379401c2429171c182528262917263301241c26330127
192a3301251b2333002b2b012b2b2b2b81810049547940101e22211f233b
04221e203b0021201f0001103c103c2b002b8101715d0071720172005d01
5d2b01111417163333152135333237363511342726232335213216161514
062322262716163332363534262623220701a41c264d34fdbb335625141b
274d3301f1b6d290dbc831724135521d68974884543350027bfe75801f2c
2525381f74036c801f2c254bb27aa6d00e470a0aa18058974b13>TimesNewRomanPSMT AddT42Char 
2 9360 68 <00020049ffed038903af0032003d0349b1020243545840203f400d0d0255
3f4013130255151b072e25080b0b0255250c0d0d025525000c33b8fff040
0b1212025533161313025533b8ffdeb41010025533b8fff440150f0f0255
330c0d0d02553339070c0d0d0255072d2eb8ffc04020091202552e33001e
04292c30340c40090b02550c401d1d02550c40111202550cb8ffd4401e09
1202550c0c047f180118401112025518401d1d02551810251e073c2c0400
2fed3fedc42b2b5d12392f2b2b2b2bcd2ffd11123939d42bcd012f2bcd2f
2b2b2b2b2bc0c0dd2b2bc410d4cd31302b2b1b406f0b1c8a330212533601
12201f39803fa809b60a03122b127d007d3386008b0b8b35061d12163a10
3f803f04091c4c054c06452045224c3a403f891d080a0e0720002249014b
0a490b49354b37433a493d570b670b8509840a840b0f54168316021f3f5f
3f0260083300343c2e292d34bb011b000c000cffc0b609390c280b390cb8
ffc0401a3a35100c500c02400c500c600c03200c500c600c760c040c3c18
b8ffd840290b394f185f186f18032f187f1802187e1f100110251e07303c
403c023c2c04702d802d022d35292c30b803464011040b2ec02d012d6025
00330d0c0c343433b8fffcb41010065533bb016700240025ffc0401a0e39
00251f2580259025044025f0250280250125101010065525bb0243000700
15ffc0b21f3915b80167401e1b2f393107400e3920075007800703100701
f0070150070107433e436e182b4e10f45d7172722b4dedf4ed2b10fd2b5d
71722b3cfd2b3c103c103c103c10f65d3c003ff4fde45d10ed713fed72fd
5d712b11395d71722b2b2b2fb10602435458b2030c01005d59ed11123911
123939313043794047353b1c23051337383638020609080a080206212220
220206350b392000111d131c0012130f1f0d1c0122233b05391c00380834
200135340b121c101c010e22101c013a063c1c002b2b2b3c103c2b012b10
3c2b103c2b2b2a2a2a818181017201710071017172005d4358b23f12015d
59015d2b0072435c58b431400e392eb8ffe0b210392eb8ffe0b60e393720
0e3920b8ffe8b20c3920b8ffe0400b0b3918200b3917200b391cb8fff040
1a0b390a280b3937280b390a280a3937280a390a28093937280939002b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b59005d5925060706232226353437363637
353426232207061517140623222635343633321716171615111416163332
3736371506232226271106070606151416333202478d24363d5f7b1e29cb
ec57533f2526022f26252fb09f7a4e3b1c120a170f100c153c7066313a01
972c4f4456384c846d1119826a433144785624896622222c3a2e32342d56
90291f422b85fec9833b14070d3c38964493015d3c192c6039485f00>TimesNewRomanPSMT AddT42Char 
2 10958 70 <00010046ffe4034a03af002101f5b2080401b102024354584020021a060c
10100255060c0f0f0255060c0d0d02550616250f0907602170210221b8ff
c0b513130255211db8ffd4b4131402551db8ffcab6121202551d3103002f
ed2b2bc42b5d3fc4ed012f2b2b2bcdc431301bb11223b8ffc040732a2d34
0023430d5d36170d5705021c135404530553065407581b581c0767057605
80008021b41bc520d020e000e50509370147015618551c5f236018601c76
18721c8a128e1390119018a601a402af23b301c101c707c719e908e41cea
20f4011806024a1257128b1f8b208023f02307112001bcffe00020ffe000
1fffe0b2001d00b803464030102101602180210200211021202150216021
70219021a021b021c021d021e021f0210d21661ddf0f010fc7162509071d
b8ffd8b214391db8ffd8403812391d31030b21cc1f0c014f0c8f0c020c2f
100030004000600070009000b000c000e00009300040000200aa731a831a
02501a019f1a011ab8010c4012f006010006100620063006400605064322
43b9029100182b4e10f472714ded5d7271fd715de47172ed003fed2b2b3f
eded7110f45d7172e412b10602435458400a531d631d731d03931d01005d
7159393130383838013801715d005d017200722b2b435c58b4001018391b
b8fff0b613390510103901b8ffc0b2103920b8ffc0b11039002b2b2b2b01
2b5959017101060623220235340033321615140623222726262726232207
061514163332373637034a25d8839ce80101b487ae312c3b1e110b23233e
643d51a189624e3734015cb5c30106dfd8010e8f4d262f2615761f1e4a62
a1a4fb432e79>TimesNewRomanPSMT AddT42Char 
3 0 71 <00020044ffe40405058e001f002d024bb1020243545840262f4010100255
2906180d0d025506080f0f0255060c101002550600201d160a0d0d025516
0b20b8fff4401112120255200c1313025520180d0d025520b8fff8400c0f
0f0255201810100255201cba03e2001dffc0b6091002551d1f12b803e240
101340090e0255131400252509072c2c03002fed3fed3fdd2bed2fdd2bed
012f2b2b2b2b2bc0dd2bc410c02f2b2b2bcd31302b1bb106024354584052
1213140000200b0303252509071c701d01401d601d021d1f0b2c2c030b16
0c0d0d0655160410100655160b20141010065520040f0f065520020d0d06
5520202f2e290c0d0d06552906180d0d065506062f2e1112392f2bcd2b11
12392f2b2b2bc0cd2b2b003fed3fdd5d5dcd3fed1217393fddcd31301bb9
002fffc0b34747342fb8ffc040422b2e34602f7c047c058a04802faf2fc0
2f07402f802f02002f162a152b55055508542b960707480701202f370a47
0a560a9804a72aa02f07c02ff02b022020002021baffe0000bffe040453c
204f205e20660a6c207a209f009f20aa07b907c62a0b260813270c41121e
1344151d2716411c1e1d441f0020210b042c1500252509071f2c012c2c1f
030b1f000b210c20b8016740121560168016af16031f1690160216eb2950
06b8ffc0b3282e3406b8ffc0b7473506432e437f182b4e10f42b2b4dedfd
725d3cfd3c3c3c3c3c003f3ced723fed3f11173910f5edfc01f50010f5ed
fc01f531304379401a262b0408272526082920002b042920002807252001
2a052c2000002b2b012b2b2b8181005d3838383801715d00710172715d2b
2b5959250606232226353412333217353426262322072725331114161633
323717052335112e0223220706151416333202c743804a96e0f8c3794f0f
20181a2b0d01112d0f21161b2d0bfef02e063c632f58455bb06c5b67463d
fbc5c501474da99d481a102370fbdda1471c112371c901d84470394f68c8
cad7>TimesNewRomanPSMT AddT42Char 
3 722 72 <0002004cffe4035303b00014001d037db10202435458402808161415000c
0f100255000e0c0f1002550e0c0d0d02550e153040000120003000020000
10000200b8ffc0b41314025500b8ffc040111111025500000b1b25110700
0710070207b8ffc0b40f10025507b8ffc0b5131402550704b8ffd6b41314
025504b8ffcab71212025504310b0b003fed2b2bc42b2b5d3fed12392f2b
2b5d5d5ded012f2b2bdd2bc02fcdc031301bb10602435458401d158000a0
00b0000320003000400003000010000200000b1b2511070807b8ffc04024
1010065510072007b00703000760078007a00704079204a204b204030431
0b0b07081614b8fff440260d0d065514141f1e15000c0d0d0655000c0f0f
0655000e0c0f0f06550e160d0d06550e0e1f1e1112392f2b2bdd2b2bc011
12392f2bcdd0cd003fed5dc45d5d2b323fed12392f5d5d5dcd31301b4019
125f185d1960006014d6030519201c3917201c3916401c391fb8ffc0400a
434a34081f430d5d361fb8ffc0b32828341fb8ffc040532a2e341b061909
58135e165f175a185b1a07010309060709080c0515490689028c06870c8a
10851da302ab18b513d402d90fda10f402f3031312600760087007800789
09c107c80ff007080401070d84020309baffe00006ffe0404a3609460247
094f1f5402540962027202891389199913a409a40ab808b509b00ac702e7
02e00cf40a1408d007010007d007027107010007100720079007a007b007
06077d041400301615b8ffc040131239125f157f159f15df150415151bd3
040104b8ffd0b2143904b8ffe8b2133904b8ffd84048123904310b0b5c1b
011b25110707cc0816281b390f16016f167f168f160316f4141480080130
0890080230088f08df08031008400860087008b008e0080608aa0e150400
89000200b8032c4012300e400e500e03000e100e200e03f00e010eb8ffc0
4009434a340e431e434b182b4e10f42b7172724dfd713c10fd5d715d713c
10ed5d712b10ed003fed723fed2b2b2b7211392f5d4358b26f15015d592b
3cfd3c10f45d5d7172393130015d00383800715d014358b4060001020271
5971722b2b2b2b2b2b2b0072435c58b90007ffc0400b23390c402d390d40
2d3908b8ffc0b2283907b8ffc0b2283906b8ffc0b21b3907b8ffc0b21b39
08b8ffc0b21b3907b8ffc0b20a3908b8ffc0b20a3907b8ffc0b2093908b8
ffc0400e093915101939192011390d201139002b2b012b002b2b2b2b2b2b
2b2b2b2b2b2b595959130617163332363717060623220235341233321615
252126272626232206da016464875a852d1f15ca98a5ebf1b69ac6fd8701
a805101963365383023bcc747463781489e10101d9eb0107cbaa3a582438
4081>TimesNewRomanPSMT AddT42Char 
3 1714 73 <0001004f0000037a058c002b0208b1020243545840252d40101002552d40
0f0f02552d400d0d02551b2b01100e0601080e2901080d0d025501120eb8
ffea4012121202550e120d0d02550e0c0f0f02550e06ba03e2000903e240
0a0824251e1700000f290fb8011bb2120608002f3fedc010c03fcded10ed
ed012f2b2b2bc0dd2bc010c410c610c610c6c431302b2b2b1bb106024354
58b9000f011bb2120600b8011b401d2906241e17000829010c0d0d065501
060f0f065501021010065501120eb8ffd8400b0d0d06550e060f0f06550e
b8ffdab7101006550e0e2d2c1112392f2b2b2bc0dd2b2b2bc0002f3fcdcd
3fed3fed31301b403e8b2099159926034403440c48198503850c059a0401
2f2d7f21900690079f089f099e109e11b02d0910061007025f2a5f2b021c
080eb41e08922201b41e07b80308401f231e9f1ebf1e021e11242517012b
50100110302a2912110608070a101b011bb80152b38f2d012db802f6b201
2a2bb80110400d282901120f1110920f0f01240eb8ffc0b36060340eb8ff
c0b33a3a340eb8ffc0b33f3f340eb8ffc0b32431340eb8ffc040161c2134
900e01000e100e5f0e700ec00ed00e060e192cba0306030700182b4e10f4
5d722b2b2b2b2b4ded3c10f43c103c103c3cf43c10e65de472003f3c3f3c
3c3cfd723c3ffd11395d2f2b2b3130437940122527141626251526251628
1c002714241c012b012b2b2b81810172715d0072715d5959011114171633
331521353332363635112335333534363633321716151406232226262726
232206061515331501a61c253e53fddd29284219b2b258b57169583a341e
17334a1f1f262e401cec034cfda680222c2424284462025a483c89be7544
2d381e35216d13133167d6424800>TimesNewRomanPSMT AddT42Char 
3 2358 74 <0003003dfe4603db03af003b00490059039740821216509726993603002d
105b02762a765302002a062e06528b20043f374f5b6f377526705b8f048f
05831784188f358a3e83458f4b864f95179518994fb804b905b417b418c9
34c94bc05bd05be05bf05b1b1a201533103514361f5b05a7084a363f1b00
160336214a1b0019431211100f0e0d0c0b0a090913131409088025011225
b8ffdeb41214025525b8ffc0b3140c3f25b8ffc0400b120b3f9f25af25bf
250325b8019eb5582b80210121b8ffde400d12140255129f21af21bf2103
21b8ffc0b3140c3f21b8ffc0b3120b3f21b8019e4018904a014a40140c3f
4a40120b3f4a2c121202554a50140114b8010840136f08017f0801084011
14025508350699430143b80331400c194a0a2f1901501980190219bd02d2
00060009034d003c0331400a0607195101512c2c0f4dbe03300030001e03
300039004d0330401f1030016f308f309f300330180f100255300c101006
553035392e0380540154b8ffdeb40d0f025554b8ffcab41014025554b8ff
deb41010065554b8fff0400a0d0f065554251f280128b8ffc04016171a34
8f28014f287028c028d02804280e1010065528b8fff4b40f0f025528b8ff
ee4012101002552875205b305b405ba05bd05b055bb8ffc0401c0b0c345b
0e8f96460146101010065546312016010f167016cf160316b8fff2401110
100255160c11110255160c1010065516b802bd4013993f013f3130035003
02500301000310030203b8ffc0b3191d3403b8ffc0b30b0c3403b8fff4b4
1313025503b8fff4b70f10025503695a5bba01780021010ab189182b2bf6
2b2b2b2b5d7172ed72fd2b2b2b5d71ed2b72e4102b71f62b2b2b5d712b72
ed2b2b2b2b7110e4f42b2b5d72ed10ed10ed003fed723ffde610ed5d713f
10ed7210f42b5d5ded72102b2b2b5ded2b2b5d4358b4cf21df21025d592b
72f4ed5d2b2b2b4358b4cf25df25025d5972103c103c1112173911123939
111239011112393912393931304379407a4b573a4524351c1d1718010526
25323133313431030641264f262e252a265625541c011c3b1e1c004b354d
200042013f20003d053f1c00502d4d1c00522b5420014418461c01552757
1c0156571d3a1b1c011c1b3b004c314a20014b4a3536400243200001003e
043c1c014e2f511c0053295120004517431c00002b2b2b2b103c2b103c10
3c2b103c103c2b103c2b012b2b2b2b2b2b2b2b2b2b2b2b2a2b8181818181
8101725d00715d01710072435c58400a2e10120b3f351012392eb8fff0b1
1239002b2b2b590126263534363332173332161716151407060623231615
140623222706061514161716171617161615140706232227263534373637
363726263534360122061514171633323635342726010606151417163332
363534272627260135545acda08360c22b0e030605030f2b7738c4a54447
2c1f21301c70ce3d5d6f6a9cfbc1854b0b1135075f342b3901154a644434
504c624533fef82f303a64bdb4ab33349ae1014e29935988c44005060917
1a0a0506487080b614263914112007040305090d70527163925732361818
254209631f311f235e0287767a9e5742727a9f5a42fc8133582530243e7f
483416160406>TimesNewRomanPSMT AddT42Char 
3 3534 75 <0001000d000003f3058e0036028fb10202435458401d384012120255100a
110a080d0d02550a182412120255181a0d0d025518b8fff8b40f0f025518
b8ffe0400c10100255180e131302551826b8ffea401f1010025526213435
272d0121040c0c025521080d0d0255212d18121202552db8fffab40c0c02
552db8fff6b40d0d02552db8fff4b40f0f02552db8ffec400f101002552d
0e131302552d0120040f410a03e2001203e2002503e2002803e200270034
03e2400f3540090d025535360027111d2c0407003fed2f2f3fdd2bed10ed
edecec123939012f2b2b2b2b2b2bdd2b2bc010c4c63210c42b2f2b2b2b2b
2bcd2bc410c431302b1bb106024354584058341210100655351210100655
01200427343536001d2c040711270a02101006550a060f0f06550a0c0d0d
06550a18021010065518060f0f0655180c0d0d0655181838370121021010
065521060f0f0655210c0d0d0655212db8fff0b4101006552db8fff2b40f
0f06552db8fffcb70d0d06552d2d38371112392f2b2b2bdd2b2b2bc01112
392f2b2b2bcd2b2b2b002f2f3fed3fddcd111239393130012b2b1b402f38
402a350a38600d5d360f250f268038903804b038c038d038032b06015038
60387038903804403801200818291e11b8030f4011222d291e274a220a29
1e104a2321291e26b8030e402e2335272e41341e35440120273600001d2c
04072726261111100a19182409900a01b00a010f0a700a9f0acf0a040ab8
02bd40252d0021242e1f2d502d602d702d04802d902d02b02d01002d102d
c02dd02d042d6037a67f182b10f65d5d71723cfd3c10fd5d71723cfd3c00
3f3c103c103c3fed3f3c113939f5edfc01f52b2b2b2b3130437940141a1c
050806251b261c05191c0107081a071d1c012b01103c2b2b2b8181017172
005d015d712b2b5959011136363332161716151114171616331521353332
363736351134262623220607111416163315213532373636351134262623
22072725014d6f82414e701b130e0a3040fe3e1540320a031f4430316a4a
153946fe3a3d2314180f1f1a152f0e0112058efd627a45565c40aafebc57
20181c24242726104e0144965e2f344ffe1c5e2e1f2424130a3856033d9d
481a10237000>TimesNewRomanPSMT AddT42Char 
3 4350 76 <0002003c00000207058e000b00220249b10202435458b90024ffc0401d0d
0d0255120d080d0d02550d21181010025521180f0f02552113180309b8ff
eeb41313025509b8ffe0b40d0d025509b8ffd6b40f0f025509b8ffceb610
100255090d18b8fff4b41313025518b8ffe2b40d0d025518b8ffe0b40f0f
025518b8ffd6b5101002551820b803e240174f216f217f210321226f0001
0060060106400f0f025506b8ffc0b71313025506220613002f3fd62b2b5d
cd5d10dd5ded012f2b2b2b2bcd2f2b2b2b2bcd10c4c62b2b102bc4313001
2b1bb10602435458400d20121010065521121010065506b8ffc0b44b4b06
5506b8ffc0b44141065506b8ffc04019373706554006010006a006026006
0106000020212207130309b8fff6401c10100655090924230d0210100655
0d020f0f06550d0c0d0d06550d18b8fff0b41010065518b8fff6b40f0f06
5518b8fff0b70d0d0655181824231112392f2b2b2bcd2b2b2b1112392f2b
cd002f3fddcd3fcd5d71722b2b2b3130012b2b1b40199024016024702490
24a024f024052024502402402450240224b8ffc0b332323424b8ffc0b338
3a3424b8ffc0b32d303424b8ffc0b323253424b8ffc0402e191a3418291e
134a220d291e124a2321271941201e21440c190c1390060106390000220c
0713120a900901093903b8ffc0b2433503b8ffc0400f3f35036b0c0c0d19
0d2418402b3918b8ffc0401a363a34901801501801601870189018a018f0
180518b223b2a3182b10f65d71722b2bed3c103c10f42b2bed72003f3c3f
3c3fed7211123910f5edfc01f52b2b3130012b2b2b2b2b015d715d017259
590132161514062322263534361311141616331521353236363511342726
26232207272501292a3b3b2a2a3c3b7e193141fe43432e1b09071e1a1c28
0e0114058e3b2a2a3c3c2a2a3bfe21fd2056391c24241a3c550161952c20
190f2470>TimesNewRomanPSMT AddT42Char 
3 6752 79 <0001003d0000020f058e00150191b10202435458b90017fff6401d0d0d02
55140c06010701080d0d025501040f0f025501060c0c0255010cb8fff2b4
131302550cb8ffeab40c0c02550cb8ffe2b40d0d02550cb8ffd6b4101002
550cb8ffdeb50f0f02550c05bd03e2000803e20007001303e2400b131440
090d025514150007002f3fdd2b32ed10eded012f2b2b2b2b2bcd2b2b2bc4
10c410c631302b1bb1060243545840271312101006551414101006551314
1500000007010c0d0d065501021010065501040f0f0655010cb8fff0b410
1006550cb8fff4b40f0f06550cb8fff0b70d0d06550c0c17161112392f2b
2b2bcd2b2b2b002f3f3fddcd3130012b2b1bb79017c017f0170317b8ffc0
b33f463417b8ffc0403a393b340117b20d64365017014017501760177017
9017a017f017070c291e074a2201291e06272314270d41131e1444150000
07060a0001240d0cb8ffc0b33f46340cb8ffc0401a353b34900c01500c01
600c700c900ca00cf00c050cb216b2a3182b10f65d71722b2b3cfd3c003f
3c3f3cf5edfc01f52b2b3130015d0171012b012b2b017259590111141616
3315213532363635113426262322072725017b193447fe3f3f2e1a0e1f18
1a28110111058efb4156381d24241a3c5503409b471a10237000>TimesNewRomanPSMT AddT42Char 
3 7228 80 <000100110000063003af005703d3b1020243545840175940121202555940
0d0d02551711080d0d025511554c30b8fff4b40f0f025530b8ffeab41010
025530b8fff4400f13130255302b080d0d02552b313746b8fff4b40f0f02
5546b8ffeab41010025546b8fff440211313025546414741080d0d025541
040f0f025541060c0c0255414c14121202554cb8fff4b40f0f02554cb8ff
f6b40d0d02554cb8ffeab4101002554cb8fffa40190c0c02554c0a131302
554c2b040f0f02552b060c0c02552b37b8fff0400b0f0f025537100d0d02
5537b8ffd4400b10100255371c1212025537b8ffea401f0c0c025537020d
0d02553702131302553711040f0f025511060c0c02551120b8ffe8400b0f
0f025520300d0d025520b8ffc2400b10100255202a1212025520b8ffda40
0b0c0c025520020d0d025520b8fffc400b131302552016192f324548b803
e24020475455400c0c02552f55014f556f557f5503555606473118252c0b
073c2c0507003fed3fed2f2f2f3fdd5d5d2bcd10fdc0c0c0c0c0012f2b2b
2b2b2b2b2bcd2b2b2f2b2b2b2b2b2b2bcd2b2b2f2b2b2b2b2b2bcd2b2b2b
c410c42b2b2b10c4102bc42b2b2b10c6102bc431302b2b1bb10602435458
403c252c0b3c2c050b070507545556071831471102101006551120041010
0655202b060f0f06552b02101006552b3741060f0f065541021010065541
4c20b8ffeab70d0d065520205837b8fff8b41010065537b8fff8b40f0f06
5537b8fff2b70d0d06553737584cb8ffeeb40f0f06554cb8fff0b4101006
554cb8fff8b70d0d06554c4c59581112392f2b2b2b11392f2b2b2b11392f
2b10cd2b2b10cd2b2b102bcd2b002f2f2f3fddcd3f3f10ed10ed313001b0
0d4b5458bf0046ffe80045ffe8002fffe80030ffe8b51a18191818183838
3838383838591b401c3407d059ef16038059011159600d5d362b0d019059
01200820291e18b802fcb42237291e31b802fc400b224c291e474a221129
1e17b8030eb4232b291e30b8030db42341291e46b8030d403e2355274d41
541e55440829374d4039292808000725475657073c2c05252c0c0a0b0706
0405074746313018170a5917171a101124213020017020b0200220b80135
400f37292e2b24383037017037b0370237b8013540164d5741244c4c1f4d
504d02804d904d02004d104d024db8ffc0b61416344d605859b8025ab321
a67f18b80164852b2b4ef42b5d71723c4d10fd3c10f471723cfde410f471
723cfd3c4e456544e6003f3c3c3c3c3c3f3c3c3f3c3c4ded10ed3f3c1112
17390111123900f5edfc01f52b2b2b2b2b2b31304379401422240c0f0d25
2326240c211c010e0f220e251c012b01103c2b2b2b81810172005d2b0171
5d5959013637363633321617363633321617161511141716163315213533
323736373635113427262322060707171114161633152135323637363511
342726232207060711141616331521353236363511342726262322072725
33015064122d6833567c15678e4b497121160d0a363dfe3c133b21170a04
1b2756356b4c0202153a46fe314c390b05212c4f3635532d19314bfe3b3f
321a09071e1a1c270f01142b02ec640f262a645f784b4b553a7cfe765620
161f24241710231150018a702e4035480b2bfe4b5e2e1f24242424115201
8a7031401d2c37fe155a361b24241b3b55015e972c21190f2470>TimesNewRomanPSMT AddT42Char 
3 8454 81 <0001000c000003f703af003302d3b102024354584017354012120255300c
10100255310c101002550e080f1623b8ffea402e10100255231d24290808
0d0d025508040f0f025508060c0c025508162412120255161a0d0d025516
0c1313025516b8fff4b40f0f025516b8ffdeb41010025516b8ffee40260c
0c025516001d040f0f02551d080d0d02551d060c0c02551d291812120255
290e1313025529b8ffeeb41010025529b8fff0b40f0f025529b8fff6b40d
0d025529b8fffa400a0c0c025529001c022430b803e24009314009100255
31320dbe03e2001003e2002203e2002503e24009240f2432071a2c020700
3fed3f2f2f10ededecec10dd2bed11123939012f2b2b2b2b2b2bdd2b2b2b
c02f2b2b2b2b2b2bcd2b2b2b10c410c42b10c410c431302b2b2b1bb10602
435458405e2f1610100655300c10100655311610100655001c0224303132
071a2c02070f24080c0d0d065508021010065508060f0f06550816020d0d
065516021010065516080f0f065516163534001d0c0d0d06551d080f0f06
551d02101006551d29b8fff0b40d0d065529b8fff0b41010065529b8fff2
b70f0f0655292935341112392f2b2b2bdd2b2b2bc01112392f2b2b2bcd2b
2b2b002f2f3fed3fddcd111239393130012b2b2b1b403a35402a35083560
0d5d3630355035603570359035052d040140356035703580359035b03506
b035d03502b0350160358035c035031d0816291e0fb8030f40112229291e
244a2208291e0e4a231d291e23b8030e402e2331272a41301e31441c0023
3233071a2c02072423230f0f0e0a17162407900801b008010f0870089f08
cf080408b802bd401b29331d242a1f295029602970290480299029b02903
002910290229b8ffc04009141634296034a67f182b10f62b5d71723cfd3c
10fd5d71723cfd3c003f3c103c103c3fed3f3c113939f5edfc01f52b2b2b
2b3130437940121819030604251903171c01050618051a1c012b01103c2b
2b8181015d71015d71005d01722b2b595901363332161716151114171616
331521353332363736351134262322071114171616331521353332363511
342626232207272533014ba1924b6c20160e0b3142fe3b1340330a04414d
77760b0e314bfe3b1446310f1f1a1c270f01142b02edc24b563c7cfe7957
1f191c242427260f4f01777d7182fe1d5d161d1b242447640154a5481a0f
2470>TimesNewRomanPSMT AddT42Char 
3 9326 82 <00020045ffe403b903af000f001d020cb10202435458401c140c06101002
550c0c0f0f02550c0c0d0d02550c100b0b02550c1a04b8fff4b410100255
04b8fff440130b0b0255040c0f0f0255041725080b10250007003fed3fed
012f2b2b2bcd2f2b2b2b2bcd31301bb10602435458400910250007172508
0b1ab8fff4401b0d0d06551a04140c0d0d0655140c100f0f06550c100d0d
06550c04b8fff0400b0d0d065504041e0c0c1f1e1112392f11392f2b102b
2bcd2b10cd2b003fed3fed31301b404512801501a716b616c501c909c41d
d9090612e70a0148094516571585018c09890fd91b071f403235041f430d
5d369f1f01c615c91a02401f014908102500071725080b1204b8ffc0402b
120b3f4f0401400401d0040140045004600470049004b0040604ec0c4012
0b3f400c9f0c020c431e434b182b4e10f4722b4ded5d5d71722b4bb02853
4bb050515ab10c1e49b11f0449525a58bd000cffc00004ffc0001fffc038
3838594358bc001a0332000400140332e910e91bbc001a03320004001403
32ed10ed59003fed3fed313043794036011d12250e2602251c260a250626
110f1420001d011a2001160914200018071a2001130d1020011b03102001
150b17200019051720002b2b2b2b012b2b2b2b2b2b2b2b2b2b8101720171
722b2b71015d0143584011750275067a0a7a0e7a1278167518751c085d59
5d005d435c5840091c1011391b10113915b8fff0b10b39002b2b2b595959
013217161514060623222726353436361722060615141233323635342726
0200d07e6b76cf7fcf7a677dcc53356b429f82617e694703af9e87af7bfc
80a58bad7ef977413f9e7cc8fedea0c3f48c6000>TimesNewRomanPSMT AddT42Char 
3 9946 83 <0002fff9fe4a03ba03af002700390222b1020243545840293b4013130255
320a2a131302550a060f0f02550a1813190020032913080d0d0255132016
1313025520b8fffab40d0d025520b8fffcb40f0f025520b8fff4400d1010
02552003282b12040e061aba03e2001703e2400b1819182e250e36590607
27b803e24009004009100255000107003fdd2bed3fed2fed2f2f10eded11
121739012f2b2b2b2bdd2bc0c010c6c410c42f2b2bcd31302b1bb1060243
5458b90032fffcb50d0d0655320ab8fff040180d0d06550a0a3b3a032913
0c0d0d06551302101006551320b8fff6b40d0d065520b8ffee401b101006
5520203b3a0328060e270001190e2e250e0b365906070107003f3fed3fed
3f10ddcd11123939011112392f2b2bdd2b2bd0c01112392f2bcd2b31301b
407e0a3b430d5d36391049105b10891104862c013b2c3f3b4b2c5b2c6a11
6a2c73087911792c8408a507e908f9090d303b583359346c3404403b012f
08032829121320291e19862213291e1827230027214f271e004402122b28
03042e1036013659060702072e250e0b19180e32311f0a900a02600a800a
af0a030aeb200213b80167401b2020502170210280210100211021b021c0
21d0210521603ac24b182b10f65d71723c10fd3c10fd5d72ed003f3c3fed
3f3fed7211173910f5edfc01f52b2b030e103c3c3c3c3130437940202f35
070d082534260c26302535073220012f0d3220013309362001310b2e2000
002b2b012b2b2b2b2b2b81810171725d00715d2b59590325331536363332
171615140706232227262711141616331521353316373636351134262623
220705111417161633323736353427262322070602011a26478f4f8a5c71
8870aa4a36283217394bfe20193727131510231e18250134090e6d53643e
515c4058302f24033972d679616c84d4ed9b7f150f2dfee95e331e252501
160b316403625930180e7ffeaa6f233a584e66b9d2714e181200>TimesNewRomanPSMT AddT42Char 
3 11264 85 <0001000d000002b703af002801b5b1020243545840282a4013130255061f
171127040f0f025527181f0111080d0d025511040f0f025511060c0c0255
111fb8fff4b40f0f02551fb8fff6b40d0d02551fb8ffee4011101002551f
14121202551f0e131302551fb8fffc400b0f0f02551f011003181619bb03
e20018002603e2400e4f276f277f2703272807180c0307003fcd2f3fdd5d
ed10fdc011123939012f2b2b2b2b2b2bdd2b2b2bc010c4c62b10c410c431
302b1bb10602435458402301100318262728076f097f0902090c03071806
1f01110c0d0d0655110410100655111fb8fffab40d0d06551fb8ffeab40f
0f06551fb8ffeab7101006551f1f2a291112392f2b2b2bdd2b2bc010c400
2f3fcdcd5d3fddcd1112393931301b406f2002200f3202320f4002400f82
0407402a015f2a011f291e18272211291e17862327272041261e2744000a
0b2a111420100104188009010939100c010c590303000718170a5f060140
0601062e1f2a012a0011241f1f1f2001802090200200201020b020c020d0
2005206029a66e182b4e10f45d71723c4d10fd3c1072e47172003f3c3f3c
10ed72ed5d11173901111239390010f5edfc01f52b2b3130017271005d59
590115363332161514062322262322070607111417161633152135323736
373635113426262322072725014c73793748342423571512152d30130d42
3efe2b4622190a050d231a1f270a011503afcece432c27364514295efe49
4c271b24242416102311500163a03d1c0f247000>TimesNewRomanPSMT AddT42Char 
3 11824 86 <00010064ffe402d503af00310434b1020243545840273340131302553340
0b0b02550201181010025501180f0f0255010f1b1a08270c0b0b02552721
0fb8ffe0b4101002550fb8fff440320f0f02550f310708270f2104122b05
017905016c050105252f0101012a0719771e01631e011e25201a01601a70
1a021a120b003fc45d5ded5d5d2f3fc45ded5d5d5d1217393f012f2b2bcd
2f2bcdd4cd10d42b2bcd31302b2b1bb106024354584032210f2708042a16
1e122e05022a3107601a701a021a19124b05016b057b050205252a07441e
01641e741e021e25120b01210fb8fff2401a0d0d06550f0f33321a080e0d
0d06550827120d0d0655272733321112392f2bcd2bc41112392f2bcdc400
3fed5d5d3fed5d5d10c4c45d3f10c4123911123912173931301b4029092c
192c0212122e400b392c280b391814590c5a269b109424050a070a280a29
603370338033060f33b8012040870d5d36cb0dcb0ec424c425d723d624d9
2ce604e623e624e92c0b123f2c5d2c6e2d7d2c8f018f028f038015801a80
1b801c892d8f2e0d0f010f020a03090c061c0a2cc822c923081c03161412
1c161d19291b2c9909990a9b20932393240b122b0d282c4a2c4f335f3378
29782c860ea823af33e803e61c0c2908311e00bd021e011f012f010201b8
012bb200bd2eb8011a40112a181e19bd1b1e1a1f1a01101a201a021ab801
2bb219bd16b8011a4022121224230d0b040f2724230d0b04051e01c7002e
2f2a31000005252a071a7e191918b803464014162f1e25120b02cc120101
12cf21df21ef210321b80314400b700f01600f700f900f030fb801364019
271a192e1f0801082c9f270160277027802703202730270227ba01200032
0120b14b182b4e10f45d71724ded72f43c10fd5d71fd5d4358b2ff21015d
59392f435c58b2ff01015d59ed003fede4f43c10ed3fed3c103c10e410ed
1112173901111217394358400a242323240d0b140d0d0b870e2e2b0e7d10
c459180010ecf4ed5d720110edf4ed0010ecf4ed5d0110edf4edb1060243
5458b42e20090d34002b5931304379401c28291f20101106071f11211c01
0629081c0020101e1c000728051c01002b2b012b2b81818181015d435840
09fb07f610f611fb28045d5901720071005d435840199f019f029f039f0b
9a0d9015901a901b901c992297239f2d0c5d595d2b017100722b2b435840
0b2f232f248b2c9b249b2c055d59435c584011282019390928193901400a
3902400a391bb8ffc0b20a391ab8ffc040190a392e400a392c400a392c40
09390c101e123f0e201e123f0eb8fff0b21b390eb8fff0b2193924b8ffe8
b2133923b8ffe8b213390cb8ffe8b613392c1813391bb8ffc0b212391ab8
ffc0400f123901401239024012392c20123924b8fff0400f0f392c180f39
03100d392e400d3923b8fff040120d390c100d392c200d392c1811392c18
1139002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b012b2b59005d59590111232626232206151417161717161514062322
272623220723113316163332363534262427263534363332171633323637
02902126775c4656201f5f92cbbd75546c2115170d21211c9e62455761fe
de2d2d9b7b364d331110120c03affec8936a4a2d3828292e4763a27d991e
0a1a01478c8e5139455e903a39577198170f0e18>TimesNewRomanPSMT AddT42Char 
3 13044 87 <00010014fff1023c04c1001b01fdb1020243545840251d40121302551d40
101002550b0c18121202550c15130105131812120255130e1313025513b8
fff8b40f0f025513b8fff4b40d0d025513b8fff0400c10100255130b082c
0f161404b8011bb2000106003fcdfdd0cd2fedc4012f2b2b2b2b2bddc010
c62f2bcd31302b2b1bb106024354584019170c10100655160c1010065515
0c10100655160c101006551bb8ffe8b4101006551ab8ffe8b41010065519
b8ffe8401410100655700b010b0f1b01156914014914011404b8011b401c
0106082c0f0b1b0105021010065505080f0f0655050c0d0d06550513b8ff
eeb41010065513b8fff0b40f0f065513b8fffab70d0d065513131d1c1112
392f2b2b2bdd2b2b2bd0cd003fed3ffdd05d5dc010cd10c45d3130012b2b
2b2b2b002b2b1bb9000dffe840410c395f015f02023f1d99119919bf15bf
16b819e819079f1d01891a014f0c4f0d5f0c5f0df5180506181518271803
161518191a030118191a03141ba00103153004b8011b401c010330020201
060c35082c0f0b16cf15df15ef15031565141bcc000bb801ec402c200c01
0c2e2f1db01d021d000101040405241450130180130100131013b013c013
d013e0130613601cab89182b10f65d71723cfd3c103c103c105df45ded10
ed10f45d3c003ffde43f3c10ed10edfd3c10e40111173900111739123931
3000715d0171725d00722b59590111331523111416333236373306062322
2626351123353636373637014ad6d63328213e11272380442e582a913773
2d172904c1fed346fdae593e29286263335f63026821166948266500>TimesNewRomanPSMT AddT42Char 
3 13642 88 <00010002ffe403fd039400250230b1020243545840162740121202550801
080d0d0255010b20281212025520b8fffc400b0f0f0255201e0d0d025520
b8ffe4401310100255201a080d0d02551a121c1212025512b8fff8b40f0f
025512b8fffab40d0d025512b8fff4b5101002551224ba03e2001703e240
0e1825060b200e18061d2c0e0b0708b8ffc0b509100255080a002fdd2bcd
3fed3f1239393f10edec012f2b2b2b2bcd2b2f2b2b2b2bc0dd2bc431302b
1bb1060243545840570740086008700803080a0b200b180e242517182506
18061d2c0e0b0b010810100655010a0f0f0655010c0d0d065501201a040f
0f06551a04101006551a0a0d0d06551a1208082620080f0f065520060d0d
065520202612b8fff2b41010065512b8fff6b40f0f065512b8fff6b70d0d
0655121227261112392f2b2b2b11392f2b2b11392f10cd2b2b2b10cd2b2b
2bc0003fed3f3f10cd10cd111239393fdd5dcd31301b40350127600d5d36
202760277027b02704340b371f3a20481f4820051a08134f1e182723214f
1e25272308270141071e0844200b251d08b8014540130a00252519191806
1d2c0e0e0a0b0a0b0b2120b80167400e00b001010f0170019f01cf010401
b802bd402512191a241212501390130280139013b01303001310132013b0
13c013d01306136026c27f182b4e10f45d71723c4d10fd3c10fd5d713cfd
3c3c103c003f3c10ed3f3c103c103c10ed11123939f5edfc01f52b2b3130
437940101b1c0f111c0f1a1c0010111b101d1c002b01103c2b8181005d01
5d2b59590111141616333237170523350606232226263511342626073521
11141633323637113426273503630f21161f270efeee2d767c454d712c1c
37480141593f2b6d4b395a0394fdd59f471c112371c28042598c80019941
321b0125fd9b8050364c02074e370225>TimesNewRomanPSMT AddT42Char 
3 14318 89 <00010011ffe403ed0394002002c1b10202435458b60909001a120614be03
e2001103e2002003e2000203e2b10006003fededecec3f2f1239012f3130
1bb106024354584031180a091b080909222109001a0b1416101006551413
06112a10100655111206021610100655020106201610100655200006003f
cd2b3fcd2b3fcd2b3fcd2b3f1239011112392fddcd10ddcd31301b400912
530a58185b190319b8ffd8b20b3522b8ffc0406115351419141a2309220a
2111201224182019201a3a09390a3a12391835193a1a4a084909440a4518
4519491a69089c0899099d1a9a1b9f22a900a808a509a219a21aa81bbe08
b509b60ab618b719ba1abb1bc022d518f60af618fb1a2d9f090122b8ffc0
b332603422b8ffc0b32b313422b8ffc0b31e293422b8ffc0b347473422b8
ffc0b327273422b8ffc0b323233422b8ffc0b311113422b8ffc04040191c
340f227c007201720270057c20810585118f22093a08340a3418391bc606
c021d81a07880a891887190337124818021318141e13001b201e00120a11
1e12b8ff86402c091a192018191930090a1409090a1b1a1a240908140909
08070605040408021e01131212010100061a190b18b8011d40125f0a0110
0a240a9f0ab60ad40a050a7d091bb80167401040062fa008b908ce080308
7d0919751abb011b00200009ffc0b30f123409b8ffc0b3191d3409b8ffc0
b2323509b8ffc0b70c350009c0090209b801bfb610220180220122b8ffc0
b3191d3422b8ffc0b60f133421ab89182b19102b2b7172f45d2b2b2b2b1a
fd18e61910f45d18f41aed1910f45d7218ed003f3c3f3c103c103c10ed01
111739872e2b0e7d10c487052e182b0e7d10c42b180010ed0110c00010ed
0110c00010ed0110c03130015d5d5d712b2b2b2b2b2b2b2b005d015d2b2b
0172435c58b50a20160d3f08b8ffe8b7160d3f09240b3918b8ffe0b21339
0ab8ffe0400a1339082013391b201339012b2b2b2b002b012b2b59595913
211523220615141713133635342726262335211506070607012301262627
26271101af1c272915d5d617080b2234012b3414231cfebb29feb916281f
113203942526202330fe06020d381d0e090f0b252504111e46fcee030536
2f100908>TimesNewRomanPSMT AddT42Char 
4 0 90 <0001000dffe405b40394002c03cdb10202435458b626211e110e022cb803
e2400e00092618080428251f060f060006003f3f3f2f2f173910fdd0d0d0
d0c0012f31301bb10602435458b90026ffe840440d0d0655181c0d0d0655
081c0d0d065518101010065508101010065508182609040028211e110e02
792c012c00752501250b752801280b1f060f0600062c2c2d21212e2d1112
392f11392f003f3f3f3f5d3f5d10dd5dd0d0d0d0c01112173931302b2b2b
2b2b1bb1122eb8ffc0401c3f351627201020112527202e5f2e6909702ee9
25e928f825f8280c2eb8ffc0b213352eb8ffc040c81b1f34212e2e296436
1d19191f1b23102e040a261d262c2639265517a717a718a726080b253724
37274f004c014d074908472446274d284d298807801080118d2588288829
802e9a109417a718a725bb10b925b928bf2ec825c828d925d928d02e1f00
050407061504170925072709280629351743104311500552075618522989
0b8f1088188919892388258826802e17870986178726030d095901771077
110409090826262725250a0107021e011017111e102023211e2000292c1e
000f0a0e1e0f1f191e1e1fb8ff86b308282720b8ff7d4040182524200807
080907242928142929282627262527300809140808091815181915240a25
140a0a25232424301819141818192926231918170a0908070a002821bb01
ec0020001e01ecb31f010f11bb01ec0010000e01ec400a0f0f10101f1f20
200002bb01ec0001002c01ecb301000618bb016a0025000801a6400f2840
2725252424280b20fc0f650a01b801b1b4c000652923b801084015401b2f
501901a01901bd19cf19df19031992242f18b8011bb7200f250110250125
b8ffc0b30b0c3425bb0110002600150167400c400a2f5f26014026802602
26b801ecb4097d272f08ba011b0008011b400a200028018028f0280228b8
ffc0b50b0c3428a007b80167401b5029018029010029102920294029b029
c029d0290729602dab89182b10f65d7172edf42b5d71191aedfde4f4ed5d
7118f41aed1910f42b5d711afde4f45d717218e41aed10f41aed10f4ed00
3f3c103c103c1a10ed10ed3f3ced10ed103c103c103c103c10ed10ed103c
10ed10ed1112173987052e2b0e7d10c4870e2e182b087d10c487052e182b
087d10c4870e2e182b087d10c42b2b180010ed0110c00010ed0110c00010
ed0110c00010ed0110c00010ed0110c00010ed0110c00710083c083c3130
015d5d71015d005d01722b2b2b015d2b435c58b52610140c3f24b8fff0b3
140c3f13b8ffe0b21d3917b8ffe0b21d3917b8ffe0b2143917b8fff0b217
3925b8fff0b2153917b8fff0b11539012b2b2b2b2b2b2b2b595959132115
060615141713132726272627352115060706151417131336353426273521
1506070123030123012626270d0180352111c4c5341827163c01b4481e14
08d0c114273901215729fece29e5fef525feda1d383c039425041e1c1f2c
fdf101ad873c170e032525031710231415fdf201fb3620131e0225250d69
fceb0249fdb7030249330d00>TimesNewRomanPSMT AddT42Char 
1 0 0 <0002011c0000051c050000030007004db10201bb02be0006000702bfb200
0504b802beb403000a0704b802beb5010019080605bf02be000200030129
0009016b015e00182b10f63cfd3c4e10f43c4dfd3c003f3cfd3c10fc3cfd
3c31302111211125211121011c0400fc2003c0fc400500fb002004c0>TimesNewRomanPSMT AddT42Char 
TimesNewRomanPSMT /CharStrings get begin
/space 3 def
/quotesingle 10 def
/hyphen 16 def
/period 17 def
/slash 18 def
/colon 29 def
/C 38 def
/D 39 def
/F 41 def
/P 51 def
/a 68 def
/c 70 def
/d 71 def
/e 72 def
/f 73 def
/g 74 def
/h 75 def
/i 76 def
/l 79 def
/m 80 def
/n 81 def
/o 82 def
/p 83 def
/r 85 def
/s 86 def
/t 87 def
/u 88 def
/v 89 def
/w 90 def
end
TimesNewRomanPSMT /Encoding get
dup 32 /space put
dup 39 /quotesingle put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 58 /colon put
dup 67 /C put
dup 68 /D put
dup 70 /F put
dup 80 /P put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
pop
end
%ADOEndSubsetFont
reset_gvm
/TMZDST+TimesNewRomanPSMT /TimesNewRomanPSMT findfont ct_VMDictPut
/TMZDST+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 6{/.notdef}rp /quotesingle 5{/.notdef}rp /hyphen /period /slash 
10{/.notdef}rp /colon 8{/.notdef}rp /C /D /.notdef /F 9{/.notdef}rp 
/P 16{/.notdef}rp /a /.notdef /c /d /e /f 
/g /h /i 2{/.notdef}rp /l /m /n /o 
/p /.notdef /r /s /t /u /v /w 
136{/.notdef}rp]
TMZDST+TimesNewRomanPSMT nf
TMZDST+TimesNewRomanPSMT*1 [0 -12 -12 0 0 0 ]msf
590 300 mo
(P) false chp
590 293.328 mo
(le) false chp
590 284.664 mo
(a) false chp
590 279.336 mo
(s) false chp
590 274.668 mo
(e) false chp
590 269.341 mo
( ) false chp
590 266.341 mo
(p) false chp
590 260.341 mo
(u) false chp
590 254.341 mo
(r) false chp
590 250.345 mo
(c) false chp
590 245.017 mo
(h) false chp
590 239.017 mo
(a) false chp
590 233.689 mo
(s) false chp
590 229.021 mo
(e) false chp
590 223.693 mo
( ) false chp
590 220.693 mo
(') false chp
590 218.533 mo
(e) false chp
590 213.206 mo
(-) false chp
590 209.21 mo
(P) false chp
590 202.538 mo
(D) false chp
590 193.874 mo
(F) false chp
590 187.202 mo
( ) false chp
590 184.202 mo
(C) false chp
590 176.198 mo
(o) false chp
590 170.198 mo
(n) false chp
590 164.198 mo
(v) false chp
590 158.198 mo
(e) false chp
590 152.87 mo
(r) false chp
590 148.874 mo
(t) false chp
590 145.538 mo
(e) false chp
590 140.21 mo
(r) false chp
590 136.215 mo
( ) false chp
590 133.215 mo
(a) false chp
590 127.887 mo
(n) false chp
590 121.887 mo
(d) false chp
590 115.887 mo
( ) false chp
590 112.887 mo
(C) false chp
590 104.883 mo
(r) false chp
590 100.887 mo
(e) false chp
590 95.5591 mo
(a) false chp
590 90.2313 mo
(t) false chp
590 86.8953 mo
(o) false chp
590 80.8953 mo
(r) false chp
590 76.8994 mo
(') false chp
590 74.7394 mo
( ) false chp
590 71.7394 mo
(o) false chp
590 65.7394 mo
(n) false chp
590 59.7394 mo
( ) false chp
590 56.7394 mo
(h) false chp
590 50.7394 mo
(t) false chp
590 47.4034 mo
(t) false chp
590 44.0674 mo
(p) false chp
590 38.0674 mo
(:) false chp
590 34.7314 mo
(/) false chp
590 31.3954 mo
(/) false chp
590 28.0594 mo
(w) false chp
590 19.3956 mo
(w) false chp
590 10.7318 mo
(w) false chp
590 2.06799 mo
(.) false chp
590 -.932007 mo
(e) false chp
590 -6.25983 mo
(-) false chp
590 -10.2557 mo
(p) false chp
590 -16.2557 mo
(d) false chp
590 -22.2557 mo
(f) false chp
590 -26.2516 mo
(c) false chp
590 -31.5795 mo
(o) false chp
590 -37.5795 mo
(n) false chp
590 -43.5795 mo
(v) false chp
590 -49.5795 mo
(e) false chp
590 -54.9073 mo
(r) false chp
590 -58.9032 mo
(t) false chp
590 -62.2392 mo
(e) false chp
590 -67.567 mo
(r) false chp
590 -71.5629 mo
(.) false chp
590 -74.5629 mo
(c) false chp
590 -79.8907 mo
(o) false chp
590 -85.8907 mo
(m) false chp
590 -95.2267 mo
( ) false chp
590 -98.2267 mo
(t) false chp
590 -101.563 mo
(o) false chp
590 -107.563 mo
( ) false chp
590 -110.563 mo
(r) false chp
590 -114.559 mo
(e) false chp
590 -119.886 mo
(m) false chp
590 -129.222 mo
(o) false chp
590 -135.222 mo
(v) false chp
590 -141.222 mo
(e) false chp
590 -146.55 mo
( ) false chp
590 -149.55 mo
(t) false chp
590 -152.886 mo
(h) false chp
590 -158.886 mo
(i) false chp
590 -162.222 mo
(s) false chp
590 -166.89 mo
( ) false chp
590 -169.89 mo
(m) false chp
590 -179.226 mo
(e) false chp
590 -184.554 mo
(s) false chp
590 -189.222 mo
(s) false chp
590 -193.89 mo
(a) false chp
590 -199.218 mo
(g) false chp
590 -205.218 mo
(e) false chp
590 -210.545 mo
(.) false chp
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
true set_gvm
/TMZDST+TimesNewRomanPSMT*1 uf
/TMZDST+TimesNewRomanPSMT uf
/TimesNewRomanPSMT uf
/TMZDSS+CourierNew*1 uf
/TMZDSS+CourierNew uf
/QJJAAA+CourierNew uf
/TMZDSR+CourierNew*1 uf
/TMZDSR+CourierNew uf
/HIBBAA+CourierNew uf
reset_gvm
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
