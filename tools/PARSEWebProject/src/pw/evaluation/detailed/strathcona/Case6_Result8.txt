org.eclipse.wst.css.ui.internal.properties;

import org.eclipse.core.resources.IFile;
import org.eclipse.jface.viewers.CellEditor;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.ui.IEditorInput;
import org.eclipse.ui.IEditorPart;
import org.eclipse.ui.IEditorReference;
import org.eclipse.ui.IFileEditorInput;
import org.eclipse.ui.IWorkbench;
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.IWorkbenchWindow;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.views.properties.TextPropertyDescriptor;
import org.eclipse.wst.css.core.internal.provisional.document.ICSSModel;
import org.eclipse.wst.css.core.internal.provisional.document.ICSSNode;
import org.eclipse.wst.css.core.internal.util.CSSPathService;
import org.eclipse.wst.sse.core.internal.provisional.IStructuredModel;
import org.eclipse.wst.sse.core.internal.provisional.StructuredModelManager;
import org.eclipse.wst.xml.core.internal.provisional.document.IDOMNode;

/**
 */
public class CSSTextPropertyDescriptor extends TextPropertyDescriptor {

ICSSNode fNode;

private static IEditorPart findEditor(ICSSModel model) {
		IWorkbench workbench = PlatformUI.getWorkbench();
		IWorkbenchWindow[] windows = workbench.getWorkbenchWindows();
		for (int i = 0; i < windows.length; i++) {
			IWorkbenchPage[] pages = windows[i].getPages();
			for (int j = 0; j < pages.length; j++) {
				IEditorReference[] editors = pages[j].getEditorReferences();
				for (int k = 0; k < editors.length; k++) {
					IEditorPart editPart = editors[k].getEditor(false);
					if (editPart != null) {
						IEditorInput editorInput = editPart.getEditorInput();
						if (editorInput instanceof IFileEditorInput) {
							IFile file = ((IFileEditorInput) editorInput).getFile();
							if (file != null) {
								//TODO Urgent needs to be fixed
								// I think we need 'equals' (or 'equivalent'
								// on model) for cases like this
								if (StructuredModelManager.getModelManager().calculateId(file).equals(model.getId())) {
									return editPart;
								}
							}
						}
					}
				}
			}
		}
		return null;
	}


private static IEditorPart findEditor(ICSSModel model) {
		IWorkbench workbench = PlatformUI.getWorkbench();
		IWorkbenchWindow[] windows = workbench.getWorkbenchWindows();
		for (int i = 0; i < windows.length; i++) {
			IWorkbenchPage[] pages = windows[i].getPages();
			for (int j = 0; j < pages.length; j++) {
				IEditorReference[] editors = pages[j].getEditorReferences();
				for (int k = 0; k < editors.length; k++) {
					IEditorPart editPart = editors[k].getEditor(false);
					if (editPart != null) {
						IEditorInput editorInput = editPart.getEditorInput();
						if (editorInput instanceof IFileEditorInput) {
							IFile file = ((IFileEditorInput) editorInput).getFile();
							if (file != null) {
								//TODO Urgent needs to be fixed
								// I think we need 'equals' (or 'equivalent'
								// on model) for cases like this
								if (StructuredModelManager.getModelManager().calculateId(file).equals(model.getId())) {
									return editPart;
								}
							}
						}
					}
				}
			}
		}
		return null;
	}

private static IEditorPart findEditor(ICSSModel model) {
		IWorkbench workbench = PlatformUI.getWorkbench();
		IWorkbenchWindow[] windows = workbench.getWorkbenchWindows();
		for (int i = 0; i < windows.length; i++) {
			IWorkbenchPage[] pages = windows[i].getPages();
			for (int j = 0; j < pages.length; j++) {
				IEditorReference[] editors = pages[j].getEditorReferences();
				for (int k = 0; k < editors.length; k++) {
					IEditorPart editPart = editors[k].getEditor(false);
					if (editPart != null) {
						IEditorInput editorInput = editPart.getEditorInput();
						if (editorInput instanceof IFileEditorInput) {
							IFile file = ((IFileEditorInput) editorInput).getFile();
							if (file != null) {
								//TODO Urgent needs to be fixed
								// I think we need 'equals' (or 'equivalent'
								// on model) for cases like this
								if (StructuredModelManager.getModelManager().calculateId(file).equals(model.getId())) {
									return editPart;
								}
							}
						}
					}
				}
			}
		}
		return null;
	}
}