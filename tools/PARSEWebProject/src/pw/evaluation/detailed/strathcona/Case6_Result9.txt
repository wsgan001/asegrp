org.eclipse.emf.ecore.sdo.presentation;

import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.StringTokenizer;
import org.eclipse.core.resources.IContainer;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IFolder;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.Path;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.jface.wizard.Wizard;
import org.eclipse.jface.wizard.WizardPage;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.ModifyListener;
import org.eclipse.swt.events.ModifyEvent;
import org.eclipse.swt.custom.CCombo;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.layout.RowLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.FileDialog;
import org.eclipse.swt.widgets.Label;
import org.eclipse.ui.INewWizard;
import org.eclipse.ui.IWorkbench;
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.IWorkbenchPart;
import org.eclipse.ui.IWorkbenchWindow;
import org.eclipse.ui.PartInitException;
import org.eclipse.ui.actions.WorkspaceModifyOperation;
import org.eclipse.ui.dialogs.ResourceSelectionDialog;
import org.eclipse.ui.dialogs.WizardNewFileCreationPage;
import org.eclipse.ui.part.FileEditorInput;
import org.eclipse.ui.part.ISetSelectionTarget;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.sdo.EDataGraph;
import org.eclipse.emf.ecore.sdo.SDOFactory;
import org.eclipse.emf.ecore.sdo.SDOPackage;
import org.eclipse.emf.ecore.sdo.provider.SDOEditPlugin;
import org.eclipse.emf.ecore.sdo.impl.DynamicEDataObjectImpl;
import org.eclipse.emf.ecore.util.ExtendedMetaData;
import org.eclipse.emf.ecore.xmi.XMLResource;
import org.eclipse.emf.edit.ui.provider.ExtendedImageRegistry;

/**
 * This is a simple wizard for creating a new model file.
 */
public class SDOModelWizard extends Wizard implements INewWizard
{

CCombo encodingField;
CCombo modelURIField;
Combo initialObjectField;
EDataGraph eDataGraph;
IFile modelFile;
IStructuredSelection selection;
IWorkbench workbench;
List encodings;
List initialObjectNames;
ModifyListener validator=new ModifyListener(){
  public void modifyText(  ModifyEvent e){
    setPageComplete(validatePage());
  }
}
;
SDOFactory sdoFactory=sdoPackage.getSDOFactory();
SDOModelWizardInitialObjectCreationPage initialObjectCreationPage;
SDOModelWizardNewFileCreationPage newFileCreationPage;
SDOPackage sdoPackage=SDOPackage.eINSTANCE;
String encoding;
String modelObject;
String modelURI;
boolean isType;

/**
     * Store the dialog field settings upon completion.
     */
    public boolean performFinish()
    {
      modelURI = getModelURI();
      modelObject = getModelObject();
      encoding = getEncoding();
      return true;
    }


/**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected Collection getEncodings()
    {
      if (encodings == null)
      {
        encodings = new ArrayList();
        for (StringTokenizer stringTokenizer = new StringTokenizer(SDOEditorPlugin.INSTANCE.getString("_UI_XMLEncodingChoices")); stringTokenizer.hasMoreTokens(); )
        {
          encodings.add(stringTokenizer.nextToken());
        }
      }
      return encodings;
    }

/**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected Collection getEncodings()
    {
      if (encodings == null)
      {
        encodings = new ArrayList();
        for (StringTokenizer stringTokenizer = new StringTokenizer(SDOEditorPlugin.INSTANCE.getString("_UI_XMLEncodingChoices")); stringTokenizer.hasMoreTokens(); )
        {
          encodings.add(stringTokenizer.nextToken());
        }
      }
      return encodings;
    }

/**
   * Get the file from the page.
   */
  public IFile getModelFile()
  {
    return newFileCreationPage.getModelFile();
  }

/**
   * Get the file from the page.
   */
  public IFile getModelFile()
  {
    return newFileCreationPage.getModelFile();
  }

/**
     */
    public String getModelObject()
    {
      return
        modelObject == null ?
          initialObjectField.getText() :
          modelObject;
    }

/**
     */
    public String getModelObject()
    {
      return
        modelObject == null ?
          initialObjectField.getText() :
          modelObject;
    }

/**
     */
    public String getModelURI()
    {
      return
        modelURI == null ?
          modelURIField.getText() :
          modelURI;
    }

/**
     */
    public String getModelURI()
    {
      return
        modelURI == null ?
          modelURIField.getText() :
          modelURI;
    }
}