%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: dd.pdf
%%Creator: Adobe Acrobat 9.2.0
%%For: zhonghao
%%CreationDate: 2010-1-20, 14:12:16
%%BoundingBox: 63 454 295 496
%%HiResBoundingBox: 0 0 595.2200 842
%%CropBox: 0 0 595.2200 842
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1067 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:08:04        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2010-01-20T14:10:54+08:00"
   xmp:CreatorTool="PScript5.dll Version 5.2.2"
   xmp:ModifyDate="2010-01-20T14:10:54+08:00"
   pdf:Producer="Acrobat Distiller 9.2.0 (Windows)"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:80f417fc-2643-4982-a49b-08167096d4f1"
   xmpMM:InstanceID="uuid:2491f938-6f61-4201-9926-e876c183de02">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Microsoft PowerPoint - figure.ppt [兼容模式]</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>zhonghao</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -842 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 842 li
595.22 842 li
595.22 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
18 18 mo
577.02 18 li
577.02 118.68 li
18 118.68 li
cp
eclp
18 118.7 mo
577.02 118.7 li
577.02 18 li
18 18 li
cp
false sop
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
grestore
false sop
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: PBAAAA+Calibri Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /PBAAAA+Calibri def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /zero put
dup 49 /one put
dup 50 /two put
def
/FontBBox {-476 -194 1214 952} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
4 dict dup begin
/.notdef <1C60D8A8C9B7A086528E2CBE7FD4F03CC1C545DFC3C53F52C69233
4252531335C4AFD91E9493A7B9787114ADBF50CAD0D8D8F4E0FD112CA0EDC244
BC77AFB35E52902467E4B7D65BC23E8AB084EE08EDC3C9FE17948A4E93ECA5D5
D8A99AF099DAB98A96A7EEC3487AD5909F63F36A9F52E364FE794F0586CEACB0
693AEA3E3B131EDB924E9018AC085D5D058B3A8419D5096479413ADE107D9F53
02816818EECEB683CD82FAAA79E358EAA71283CC02664EE09C62BDF6E0D9BC98
D9F308DF8AEA61A9B7C090BD7FD96A3223C7AE0D3D1A8F2E623FA6B7C467CA6F
ECDBA0B792188DFEEBD3D01BCE6CC077D778842DE1B5E36F7F8EB4C68A439269
E0981B28AD1790AA058065E4B6AD27A659E12C7322A5BE1E7DF9729C0030192F
3688A380035351BB0945D5DC7515959F458727E2B8854977E466D6DDC900E997
B52F6BAB4C73A178A3B47EBB3C3FC842F51CC6E114336F3E4E5E72B20D8F94A7
BA3BA965E83BF37BAA664C34B8502BB9E9B9BEDD7EBC5DCBC4FFF5EBCA9C0324
49885D42A9DCCBA2A816B59D7978373DF4208E5608F69A2EAF492AC156CC637D
5A11AF573B17CF9F38> |-
/zero <1C60D8A8C9B7A0860A0ABA2698AC8E090156BBF2C9C30ADDAE7DCB3D9
7848CC5D38A5C6D85B8937F2533AAB8D6BFA0DD62B7BCE11E4F148006AA53F16
B7661785227AEDEF098A1104625EF68DF52BAE87BC71C0E793E6FAD1A965E4D3
8BA9CF4CEDAADD0504EE4CE20EF80FE3B0F494717869AEF9FD48C1A316DF08AD
A9E5D4CE0C25CB68B43C1EB2B9FE55F89B0B22C758BDED5FDD580CE702C559F6
E1F276FBE929DD9A2C3557CE4E2CABBF3EDF814307556BE2579995A57ECC922B
3376DB39CC4DC2518F12025BDC7A3EE507BE357864FDBF8F62FBD571913B8657
13255C738D4AEB39D8820C2AC5F5D7DF55CB64B7CD192349742D481F16CF8009
5A893636D91177B06233710432F07D42A84BDDC> |-
/one <1C60D8A8C9B7A0860A305D7D1540DECC7BE2F83965065BA1F58088FE75
1F51768999AF3CB0CBD98712B4A20A30CFDD23F3D718AE6664545AA64C90E87A
977C061638AE7B9844BD53D39E1CD919540EC0AFC0ADDD639213BAA3C2156ECF
4D5FEFDF4B77C92C9A62F21FEF596A47F254F30F662D97990A276CD1E50761DD
9D07D78B626617E74128BC5D647B42ED807FE6DD0588AD25D211834DAC9410A0
AEBD06E6565C1DCBD86013B11A7BE0A2010B12635869FAC3323D92D6BCCC10D0
2550F431D6753E5E6C65DB63D883AF6BCE4C75C5A66BF9AE47A5570BA4B61C57
63C152A7FDEC11C0C748631E999D604A7F2938BB57220CBE02AE758E60183316
61C475AA9DED7C59> |-
/two <1C60D8A8C9B7A0860A3F41F4B5F8C84A302144D2A68052268BA33C08F1
4E9024203A43F9861DB1372AE620C85B5997156713B3D52B841947202E77B0C2
CB414A698B86ABC8A4E75821012456D5020DA227DFEF8C5D8DB95EBE919EE715
28F7186EAF21E351CBD957516793A596628548012B490542857EE9AD26B93BE0
9822488FFA92D417AEC74A1F7CD3F4086D2106FC51C85A2037F2B9A0C7F20F95
265886609863A1C5F24DF7B0A900E498DA2F78FC8847FC48711DA5F7718C543A
B1317AD922AE297322A814FAE4926A273690C557D10E81AE194D331B49C1AE8C
81F09FF9C6C0138B7CA170F398B4828657BCD8F518515EBEE88F3E7CAAF8D53D
FF51CD8B58FC43A0393FF3BAAC61C4C54BAED846AB03C5029732B46B642E71B9
F477640318C582068EEDAD42004E409178DCD37800E9D052502DD85B334EBD67
9CA70294673E8EE8A3969E138989BAAC7D6DF5921118D0D203FDC015CB80084F
99BE2DC9C90C6E2171BED79C2858C6> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/XBRJBE+Calibri /PBAAAA+Calibri findfont ct_VMDictPut
/XBRJBE+Calibri*1 
[48{/.notdef}rp /zero /one /two 205{/.notdef}rp]
XBRJBE+Calibri nf
XBRJBE+Calibri*1 [13.02 0 0 -13.02 0 0 ]msf
514.98 34.0797 mo
(2010)
[6.60248 6.60248 6.60254 0 ]xsh
%ADOBeginSubsetFont: HIBBAA+Calibri Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /HIBBAA+Calibri def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /g882 put
def
/FontBBox {-476 -194 1214 952} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/.notdef <1C60D8A8C9B7A086528E2CBE7FD4F03CC1C545DFC3C53F52C69233
4252531335C4AFD91E9493A7B9787114ADBF50CAD0D8D8F4E0FD112CA0EDC244
BC77AFB35E52902467E4B7D65BC23E8AB084EE08EDC3C9FE17948A4E93ECA5D5
D8A99AF099DAB98A96A7EEC3487AD5909F63F36A9F52E364FE794F0586CEACB0
693AEA3E3B131EDB924E9018AC085D5D058B3A8419D5096479413ADE107D9F53
02816818EECEB683CD82FAAA79E358EAA71283CC02664EE09C62BDF6E0D9BC98
D9F308DF8AEA61A9B7C090BD7FD96A3223C7AE0D3D1A8F2E623FA6B7C467CA6F
ECDBA0B792188DFEEBD3D01BCE6CC077D778842DE1B5E36F7F8EB4C68A439269
E0981B28AD1790AA058065E4B6AD27A659E12C7322A5BE1E7DF9729C0030192F
3688A380035351BB0945D5DC7515959F458727E2B8854977E466D6DDC900E997
B52F6BAB4C73A178A3B47EBB3C3FC842F51CC6E114336F3E4E5E72B20D8F94A7
BA3BA965E83BF37BAA664C34B8502BB9E9B9BEDD7EBC5DCBC4FFF5EBCA9C0324
49885D42A9DCCBA2A816B59D7978373DF4208E5608F69A2EAF492AC156CC637D
5A11AF573B17CF9F38> |-
/g882 <1C60D8A8C9B83844CBABF75256C23589A050D2F18EC6AAEA2DCAA879D
629F0698E85A7558DC3794B984219238EC694626573D368F005AA7EB3DEDB55C
E7021DF056336AEE3D77182F0055C3CB6954365C7523BFC42E70B7DCDE95A> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/XBRJBF+Calibri /HIBBAA+Calibri findfont ct_VMDictPut
/XBRJBF+Calibri*1 
[32{/.notdef}rp /g882 223{/.notdef}rp]
XBRJBF+Calibri nf
XBRJBF+Calibri*1 [13.02 0 0 -13.02 0 0 ]msf
541.379 34.0797 mo
( )sh
XBRJBE+Calibri*1 [13.02 0 0 -13.02 0 0 ]msf
545.339 34.0797 mo
(1)sh
XBRJBF+Calibri*1 [13.02 0 0 -13.02 0 0 ]msf
551.939 34.0797 mo
( )sh
XBRJBE+Calibri*1 [13.02 0 0 -13.02 0 0 ]msf
555.898 34.0797 mo
(20)
[6.60248 0 ]xsh
gsave
18 118.68 mo
577.02 118.68 li
577.02 219.36 li
18 219.36 li
cp
eclp
18 219.38 mo
577.02 219.38 li
577.02 118.64 li
18 118.64 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
grestore
gsave
18 219.36 mo
577.02 219.36 li
577.02 320.04 li
18 320.04 li
cp
eclp
18 320.06 mo
577.02 320.06 li
577.02 219.32 li
18 219.32 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
grestore
gsave
18 320.04 mo
577.02 320.04 li
577.02 420.72 li
18 420.72 li
cp
eclp
18 420.74 mo
577.02 420.74 li
577.02 320 li
18 320 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
grestore
gsave
18 420.72 mo
577.02 420.72 li
577.02 521.4 li
18 521.4 li
cp
eclp
18 521.42 mo
577.02 521.42 li
577.02 420.68 li
18 420.68 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
grestore
gsave
18 521.4 mo
577.02 521.4 li
577.02 622.08 li
18 622.08 li
cp
eclp
18 622.1 mo
577.02 622.1 li
577.02 521.36 li
18 521.36 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
grestore
gsave
18 622.08 mo
577.02 622.08 li
577.02 722.76 li
18 722.76 li
cp
eclp
18 722.78 mo
577.02 722.78 li
577.02 622.04 li
18 622.04 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
grestore
gsave
18 722.76 mo
577.02 722.76 li
577.02 823.86 li
18 823.86 li
cp
eclp
18 823.88 mo
577.02 823.88 li
577.02 722.72 li
18 722.72 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
grestore
XBRJBE+Calibri*1 [13.02 0 0 -13.02 0 0 ]msf
562.5 816.42 mo
(1)sh
gsave
57.12 240.6 mo
537.9 240.6 li
537.9 330.72 li
57.12 330.72 li
cp
eclp
57.12 330.74 mo
537.9 330.74 li
537.9 240.6 li
57.12 240.6 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
grestore
368.58 285.06 mo
369.24 285.06 li
369.24 295.68 li
368.58 295.68 li
cp
369.24 285.06 mo
cp
371.52 291.84 mo
368.88 296.34 li
366.3 291.84 li
366.24 291.54 li
366.42 291.36 li
366.66 291.3 li
366.84 291.48 li
369.18 295.5 li
368.58 295.5 li
370.98 291.48 li
371.16 291.36 li
371.4 291.36 li
371.58 291.6 li
371.52 291.84 li
.92929 .879301 .889677 .799283 cmyk
f
369.36 312 mo
369.06 318.18 li
368.34 318.18 li
368.7 311.94 li
cp
371.52 314.52 mo
368.64 318.84 li
366.3 314.22 li
366.24 313.98 li
366.42 313.74 li
366.66 313.74 li
366.9 313.92 li
369 318.06 li
368.4 318 li
370.98 314.16 li
371.16 313.98 li
371.4 314.04 li
371.58 314.22 li
371.52 314.52 li
f
68.1 261.78 mo
68.1 261.48 li
68.16 261.12 li
68.28 260.82 li
70.324 255.524 87.493 253.111 91.56 252.54 cv
93.66 252.24 li
95.88 252 li
116.919 249.805 142.609 249.953 163.2 255 cv
163.98 255.24 li
164.7 255.42 li
165.42 255.66 li
166.08 255.9 li
169.668 256.978 177.427 260.359 172.14 264.72 cv
171.78 264.96 li
171.42 265.26 li
171 265.5 li
168.57 267.038 165.237 267.956 162.48 268.74 cv
161.64 268.92 li
160.86 269.16 li
151.29 271.279 141.363 272.257 131.58 272.64 cv
129 272.76 li
126.36 272.82 li
123.72 272.82 li
121.02 272.88 li
121.32 272.46 li
121.38 272.88 li
118.26 272.88 li
112.312 273.016 71.163 271.439 68.16 262.38 cv
68.1 262.08 li
cp
68.76 262.02 mo
68.76 261.96 li
68.82 262.26 li
68.82 262.2 li
68.88 262.5 li
68.88 262.44 li
69 262.74 li
69 262.68 li
69.12 262.98 li
69.48 263.46 li
69.72 263.7 li
70.02 263.94 li
69.96 263.94 li
70.26 264.18 li
70.62 264.48 li
70.62 264.42 li
70.98 264.72 li
70.98 264.66 li
71.34 264.96 li
73.173 266.005 75.504 266.874 77.52 267.48 cv
78.24 267.66 li
78.18 267.66 li
78.96 267.9 li
83.816 269.205 88.798 270.001 93.78 270.66 cv
96 270.9 li
95.94 270.9 li
98.22 271.14 li
104.772 271.799 111.738 272.165 118.32 272.16 cv
121.02 272.22 li
120.66 272.58 li
120.6 272.16 li
126.36 272.16 li
136.924 271.821 147.727 271.178 158.1 269.04 cv
159.84 268.68 li
160.68 268.5 li
163.946 267.699 167.23 266.766 170.22 265.2 cv
170.64 264.96 li
171.06 264.66 li
171.06 264.72 li
171.42 264.42 li
171.36 264.48 li
171.72 264.18 li
172.02 263.94 li
172.74 263.22 li
172.68 263.22 li
172.86 262.98 li
173.04 262.68 li
172.98 262.74 li
173.1 262.44 li
173.1 262.5 li
173.22 262.2 li
173.16 262.26 li
173.22 262.02 li
173.22 261.72 li
173.22 261.78 li
173.22 261.54 li
173.16 261.3 li
173.22 261.3 li
172.98 260.82 li
173.04 260.82 li
172.68 260.34 li
172.74 260.34 li
172.5 260.1 li
172.26 259.8 li
172.26 259.86 li
172.02 259.56 li
172.02 259.62 li
171.72 259.32 li
171.36 259.08 li
171.42 259.08 li
171 258.84 li
171.06 258.84 li
170.64 258.6 li
166.785 256.399 162.387 255.437 158.1 254.46 cv
156.3 254.1 li
156.3 254.16 li
154.38 253.8 li
133.135 250.486 108.845 250.489 87.6 253.8 cv
85.68 254.16 li
85.68 254.1 li
83.88 254.46 li
82.257 254.926 80.565 255.131 78.96 255.66 cv
78.18 255.84 li
78.24 255.84 li
77.52 256.08 li
74.977 256.823 72.436 257.771 70.26 259.32 cv
69.96 259.62 li
70.02 259.56 li
69.72 259.86 li
69.244 260.309 68.866 260.886 68.76 261.54 cv
68.76 261.78 li
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: QJJAAA+Calibri-Italic Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /QJJAAA+Calibri-Italic def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 46 /period put
dup 58 /colon put
dup 97 /a put
dup 101 /e put
dup 102 /f put
dup 109 /m put
dup 110 /n put
dup 112 /p put
dup 116 /t put
dup 121 /y put
def
/FontBBox {-476 -194 1214 952} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
11 dict dup begin
/.notdef <1C60D8A8C9B7A0865786BC308F2320639BB536432D0898AEB6E2A7
5CF9EC2A9EC0700EC985467C5EB75BAFAE6BE92B47D4665D1FFB7CDD63B993D8
CAF292A657BB84C1D7B11457D454AE84F45E42136F191EC6E3B3983E5AB3335D
EC1B5DA070AA269E3098A95D700B7A877E0B90FEA50C57240FE69A623C227A24
32F0D09A0AB3B37F9929A87FD9AD5B69FC3DDBBDE0A657548A6A0CA57D1D47D5
FE926BE7FF962360C0A9B770C0895EF6EBFFA4DC6BEC37F71748863B9F794A34
58D5F95997EC1E7D14F6BEF0F24D8F15E48015D300AB35CF12A219244AC1E96B
AAD98C9FB5AA9AB620D4759046C90591AD5B5DB9058FED9B2DEAA5C289619C69
E6B8AFBA78E92BA7CAD51162C8E19B9CE3A002008E1F2E7A1C2CA8B94E16AF51
1B72C953877A73A560545823ADD0EF14F1A99CBC77A9AEB372F7F84402780C34
1A1F3B424BB5BB3D045333E21109BF0BFC6DF2C339E12B2157F8A656B74474F0
BCE53FA32D21B2F841C437CBC8FF800542665AE6B6AE1AB4D9D2CA7B4C4D6695
3BDAE1223DC341C8BCCF7DF80B0EAE877C569B5D2FC0CF06741B78357213D2C0
36105C76D1B0229545F400BC4FF0C330A129DED3A7DD021F5A29FF7E933705A9
10D64D991F85DB9CFE06DFBE23A1219DBA72230B> |-
/period <1C60D8A8C9B86ED904669CDF829A3341A1992F229778A8CA189EDD6
6557906F7C3C0685471657B43D8133EC119827C898F2B6B05553FB9C04FDC41D
58B2515461EE9044AB909AFA249CF9C834E60978CB613C693E22CA906FD03AB6
1589E8E594DADABDDEDFFD6C5A2FA7D8F4F7CC4FE9F487A257BBE85A05BE6461
7517B18E6305FB7DEDFBD18DA1935AF556AAB5DC2AE544EF3B090E128CDFD> |-
/colon <1C60D8A8C9B85EE3AA2436BAAB664AF668C8CE70825042FC7580AA33
F051051269A02F657E3B12A4F176C2402B054C72DACEDEB8EDB40B909FFA94B1
53018998548FEAB566C3035A7CAA19973EC66441EC7B2105192359CF7C1BDC5C
BC63B11ABF93C74B29E15658830A24A0165063A75F7CE7226BD1C2A8E0FE9802
4332267D43AEF2783441A1ECC1B3CE6B393C73F15B1895E3DA3EAF9A3313ADEA
82C4D9049F8E60E355792C43B7F2E0DEE04F5475CFA13700D92B9B53A61D694D
2D13606DAF57AB2BD7A008632C08AE8C3A07B9F1135FAFD528DD97FDD2413F5B
4CA0BDC0F6E845AA26734E1712FE79B2E917D53FFF39C69B> |-
/a <1C60D8A8C9B7B9B9DE7286331F260FB1B0B0DC37101824E583DDA7005B40
83150C3A7505CF5D2D1ED70CFA713649EE13DD498A28C293008381488E9AEA75
7A464DED8570A6215662A967777FD46EE89DE4AC4F8E8782745A558E104468BA
2F62AB44FE8BEB91A73626734A33A883BBE22CE01256061714ABDB6F937F1B05
B1274108BFDF0FFD891A5123212DAEFE1471E5F88224850D1B78680F197275B5
05710E0C63E112F5CF00E8F345EB4CC7A2D1DE234EFDC743A7013B6DBB800BAC
FC19EBDB869B0C693255A669977CBBA71C4C54ED93A4BFC9FE9376216EFE607E
5EA4B0178F0C3A24361D8A81E80AAEB9C2829A1142D2A9394415D064FA349E11
5E13297EC5906D70B13C0551C7C48480DB548DB91BFE22208257F99F35C0B54B
5096DFE95A7AA850A7469DCBFBFD364FFEA5984717E6B62592A989B95D5E4AA3
EA60023EB21093050EA841EA8B31E841> |-
/e <1C60D8A8C9B75D88DD8D9896A45C79DF2A44F752D1EFAFAB83A11F0C59ED
8ED2118C8A10D0992FBE29BC0E37409E0B61A9D6C663E3F20D6EE62682696932
806EB74F8F702D9D95F36E4EAA0E788F5AA0DF7CAEE6615D1B450AB659D0E6AC
133798BC1F374BE781A4565FAE449B6A06B4CDBCA82955DF6596078C612BE979
1F04A2D303F6B7B5264D24C776CDB38A3EA63851DB02C3626275DDF1C87829A7
FCC9C0988455C20BF5AB5D52ADE308CBA329309BFA5C0C8CCA6D8EFA271B50CA
F27D73DC6C9DDBEB443F032CEE65E73D74E9964A7E411D205027BF3771161C9B
9A4B119EFA6A49B0207067BCEE98C41976F39B150EAD96B99ACA6FFA85C158A1
8C0F243F2A91EF6AE414881735D86A370537E5A125DD99B67DD0C50DE31A0ABF
DC30EDF1451BBFAC3439F018716F3DF4C494C332565892F90103C22DD6F7143B
1A55480D6C652FB9091E7D929410A7C258A5791E1F680B11852714> |-
/f <1C60D8A8C9B83BB86C0029C77C46651EBAE54A0BC06537A99530F1F205A4
EED93125C6E7A1F843630DB57051E83B0C4DF742B973B7EA9E8B9D470CAA092F
B0EE03CC47619B11FC6DCF671F8554610EC4507CA48C330F3DE51AFFBB6389E9
0D24BDA4F8626A2D496DFFC17479E41BDBABDE5353E22EBE94F69F05C631F309
5F13ED0EF6034025508F18CC3E4B375DEAF1D013C8973CD847E159D28FC0D614
8F14526002BDF3D45AA23D06A77D7FAFF1616FD583E9D890EF3A9E98319FBB56
C18D6C67370CCF28E62A438F674A49991CB36FB78A54601AED4F37368D2F8A18
E07B97B394CA5D24F84E28E9B6C7EC2B8427F787DDF60EA5630FE0D7979224E5
7FA205AB9BC46F396E12F4D58476E2ACE55CE3252D0A1C71B33D6CC391CBD0DC
793F9000C7B61D6C4862D6C4C6BDD9C564FBBEB37AFCEA29BFED38F2D5E32257
DD1280A460BF493C7FAAB29573CCFE44A16AA9574509B2E22E9F0379812EDDA2
DA6B40F5C40E11C7FDFD0625EF2099B56376414AFE8224DC01C5D07F894D0382
727070BA699E7F71221872F3437F805ED9CDC9A4BEE3506C2C0F3D8FC7B4638A
51F40762FD5D9B53FC223FDEF827EDA26535926787097DA8B01AD09B728ED34E
C98F37F1B3CE2D234E886033A27386F9711708ABCAD21FDEE5> |-
/m <1C60D8A8C9B6CAC2954B3958178217427B580268147C77999A450653EAC1
0D6830AB3652358BFCAA6030132660CCA8B7129EEC94574612256E5F3CD795AF
F1E1E3520A2C2E0EA834C8AD4222B6E910DEA9D3122C6784746CBE42C8783886
1D5AB94CCFEB5B79D8AF36593498C72A144A800A0BA4950F670FDEE50940D97E
E2D2DAF1D7343D5B4AAF03433A34C8E6692A8FDCF52F0C75238FC7AE0B4F8ECA
F3ADCB3884FD3A3B8B191599655D098B0BC6719E5420A62BD879B057F4FADBB8
778C47F4EB9C1681FC69F2DFF3E66EF6D94A98F57A75637BA6B1097CA609E44E
5898DAD78391FFB9C9336C3147E5657B947073ED01553E5A82924199C6CFB77F
CB65D18D3FAA63A6BADF5D4DA9C9FF8789EF56DE11FA75D030FB8F93481876FF
C877AA051A35809D327B89830916A50F089FE2C4D3DD6EA10C5D0C3E1CB41409
E1AE70BBB0FE023D67D5FA564B90B8FD2ECAF9DF66B2D12DC10D6ED409734FA8
8B79FCBF8002BAEE5F4264F984E9821A9D77A8C3D0220845B76C88BE01B890A1
62C17E2D076DFC4AEA8A0EDE87D7604B3182D9DFA8716A5A8D58DBA22ED88384
954AE070215C84E391ABE7AC7A28A53904120A1BBE724FFF2ACB3338607DA3BE
FB3DC2EDB85777671B56448FDDC747BC557CACE8D07FCF2061E4E503A6A9D008
E4070D1D9E759961CB605B14B982920C705CD58A34AB> |-
/n <1C60D8A8C9B7B9B9DE50EC0DC9A1A63FA61E3997891480DC9B398C479C90
75062A0D6C7184BBB9D9EB700BEF909E404774CA8BB6BE5D02647C516DEE51EC
3B356C6B7137C834501AACA6F65AC59C22EE018A1E4C5E0B2219A2CB589ACBE5
48033FBAFC96646DFE263AC7F296048836A2B697B6905D6C39B4A8A2DCD1B667
72330582333ADCCC51E11B8D86FB1C42D6458786B4A45A9CE2AE97AB08900865
8F119095FD0FEBED680614C3D9992F3E38E65F4809604BAD9B4BDBAB7FC60BB4
E9F3B9023E3D29A50DD1756EE5FE22AF8AA2BDBAC82021B3CFDE1878C1138F43
10C8FB977931D54B78F154234CB7E9F8C4519881CA7E748FCB8402BDCC7B9DD7
24046B46193E34233B1033B8CC3593733A4DD689208CB71DB35C7D18B574A2BC
B0E813BA97E783D9941DD6BE39B1EE316CE0F8AD122E166947F493D7FA260F88
30A56A4D31DBB2BDF6E5> |-
/p <1C60D8A8C9B7B9B9DE6131AD08989E911E3E6EE1C37887F72E18AD050089
DE6DE901FAF327A049847E307EF1AE734A68D9175A7B87F7CD90231FCE645106
430306C7A6253A9134A4339C73DF04AC311E2291FED52DDEA7C641AEE1F1ADA8
1D3F092096E247B6BBA3E4B70A002C4B07929EEAA78E00475B8B0FF11928B7A6
9A6E31888A557DE731DC6F6E3202878D88CBEED9C8B8CBCB98F6C7AAAAA54674
D84351EDEA9FBA46B320F0C40E3173C44117C4890FB38D3951A0F8B226502620
8D5F896B5794E2ECF5B4426159BBA8887B0F506696232B07A67CA232D67F1591
94B9D58E6D537AAB40A9EF4E04D4A895239AD0F29BE98EE56AD242BCDC617947
AEA955F097A791AFD93EA6D601D44E085F1C360044CB06128B72C56EBCF1680E
F4C54C2F35C0A712916D43A09189444DC9EFCAA301543B0B02EB721C79E5FAB6
2365F99A65302826D1AAB0E028182166EB99E49BC94447937BDC19F7C81EF037
3F9B43E3DDD680131C681E3FE8A3AC677DF43D4BE4> |-
/t <1C60D8A8C9B81D89612138D951E7280F258AC0270772ED2E4C562FB02E72
95503CB14D7D406C375F31EEC6525299C1EC397ED2FAB7F70A40FC30F81A7BF2
62E1D39E7E566DACA4F1BA91F397A68E81712B4A9E24AC43A2AD24BDA709D591
8C0FEF0799073C411BA6AD4441414F8FFAA74E0DFF9F82B058C5664DDF2D61E9
C8C2E780F54C4EFAAF68B71D06DEAB77DFCF4CBC607093E073186D0A6B2C2CC4
CE9B6C31F4ED6A1927EFC8E262B17AEBA3E55353BB58C78D6FC833298C0BF7F2
DD3683B4CC3856D5C61D84849E038BFA77A6DE5626403465BC0E561C15B1669B
87FA03BF295A9BC29F73252BB119DF08C7DC0AF580A5CDB0883A0E7DC2853A35
BC6FD3561A977FE25567CE8246F149E55B524A66EFC14173DB82CCCBEB8D5F20
E13DDABB5CD46FF3A5A6E1DE3BDFB9713A9996D26692EDBE6EF672F688AE70EF
101D348DF6F3C0D187A2FCFECFB0816046FF84C4D2B8267535A61E20351B94E3
D8EBD67852B7B7C9BC10D32C3DDD86C07A497151600C2DFD2C> |-
/y <1C60D8A8C9B77C895E3E4AAC1965B934BDDB378ADDC22EF18B2AEC59E726
97A66E13089DB5575414E9B731D085A64A1C2239A268875A615F023551D09F87
FBF340D08082CAF546D7E2E25E5E4226BBF5E9C6DD3EADA825DA0E9506E9B065
6F864ABB03CB8347EB529D04A5D5D2E36A29CE2135D41209DAEF86234A8684E7
C57DDA6534AD20A4172437F0252F128BE7DA08A1224CDB6D52579B5DFFB60B0B
8C0006E74A4BF447EB266260CA824001553A582E3A28BA977446CC718BED1F10
3474E14EEFCBB7CD83B24F030EA5D03270D8EABCDE37A86C19C5DF3DCAB9F186
6C71E915DFBE0351AC499786F70D9C15DA8B78B83C63AC3B8ED78C2AA318A746
1E23E2C910EB6A620ED3D5C539FA65893EDEAC> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/XBRJBG+Calibri-Italic /QJJAAA+Calibri-Italic findfont ct_VMDictPut
/XBRJBG+Calibri-Italic*1 
[46{/.notdef}rp /period 11{/.notdef}rp /colon 38{/.notdef}rp /a 3{/.notdef}rp /e 
/f 6{/.notdef}rp /m /n /.notdef /p 3{/.notdef}rp /t 
4{/.notdef}rp /y 134{/.notdef}rp]
XBRJBG+Calibri-Italic nf
XBRJBG+Calibri-Italic*1 [12 0 0 -12 0 0 ]msf
88.74 263.58 mo
(f.name:f.type)
[3.05751 2.99519 6.1741 6.17409 9.49801 5.74196 3.22206 3.05751 2.75519 4.02608 5.37009 6.17409 
0 ]xsh
gsave
57.12 240.6 mo
537.9 240.6 li
537.9 330.72 li
57.12 330.72 li
cp
eclp
339.48 325.62 mo
339.54 325.14 li
339.66 324.72 li
344.031 315.496 391.988 315.496 396.36 324.72 cv
396.48 325.14 li
396.54 325.62 li
396.48 326.04 li
395.149 331.551 378.039 333.151 373.68 333.3 cv
370.92 333.42 li
364.283 333.708 344.967 332.956 340.14 327.3 cv
339.9 326.94 li
339.66 326.52 li
339.54 326.04 li
cp
340.2 325.98 mo
340.2 325.92 li
340.32 326.28 li
340.32 326.22 li
340.44 326.64 li
340.44 326.58 li
340.68 326.94 li
340.68 326.88 li
340.98 327.3 li
340.98 327.24 li
341.34 327.6 li
341.76 327.96 li
341.76 327.9 li
342.24 328.26 li
342.78 328.56 li
343.38 328.92 li
343.38 328.86 li
344.04 329.22 li
344.76 329.52 li
345.54 329.82 li
345.54 329.76 li
346.38 330.06 li
347.28 330.36 li
347.22 330.36 li
348.18 330.6 li
349.969 331.065 351.623 331.433 353.46 331.68 cv
354.66 331.86 li
354.6 331.86 li
355.86 332.04 li
358.92 332.501 362.071 332.65 365.16 332.76 cv
368.04 332.76 li
367.98 332.76 li
370.86 332.76 li
372.3 332.7 li
375.06 332.58 li
375 332.58 li
376.38 332.46 li
377.64 332.34 li
378.96 332.22 li
380.16 332.04 li
381.42 331.86 li
381.36 331.86 li
382.56 331.68 li
384.397 331.433 386.051 331.065 387.84 330.6 cv
388.8 330.36 li
388.74 330.36 li
389.64 330.06 li
390.48 329.76 li
390.48 329.82 li
391.26 329.52 li
391.98 329.22 li
392.64 328.86 li
392.64 328.92 li
393.24 328.56 li
393.78 328.26 li
394.26 327.9 li
394.26 327.96 li
394.68 327.6 li
395.04 327.24 li
395.04 327.3 li
395.34 326.88 li
395.34 326.94 li
395.58 326.58 li
395.76 326.22 li
395.7 326.28 li
395.82 325.92 li
395.82 325.98 li
395.82 325.56 li
395.82 325.62 li
395.82 325.26 li
395.82 325.32 li
395.7 324.96 li
395.76 324.96 li
395.58 324.6 li
395.58 324.66 li
395.34 324.3 li
395.04 323.94 li
395.04 324 li
394.68 323.64 li
394.26 323.28 li
393.78 322.98 li
393.24 322.62 li
393.24 322.68 li
392.64 322.32 li
391.98 322.02 li
391.26 321.72 li
390.48 321.42 li
389.64 321.12 li
389.64 321.18 li
388.74 320.88 li
388.8 320.88 li
386.88 320.4 li
385.86 320.16 li
383.7 319.68 li
383.7 319.74 li
382.56 319.5 li
381.36 319.32 li
381.42 319.32 li
380.16 319.2 li
378.96 319.02 li
377.64 318.9 li
376.38 318.78 li
375 318.66 li
375.06 318.66 li
372.3 318.54 li
370.86 318.48 li
367.98 318.42 li
368.04 318.42 li
365.16 318.48 li
363.72 318.54 li
360.96 318.66 li
361.02 318.66 li
359.64 318.78 li
358.38 318.9 li
357.06 319.02 li
355.86 319.2 li
354.6 319.32 li
354.66 319.32 li
353.46 319.5 li
352.32 319.74 li
352.32 319.68 li
350.16 320.16 li
349.14 320.4 li
347.22 320.88 li
347.28 320.88 li
346.38 321.18 li
346.38 321.12 li
345.54 321.42 li
344.76 321.72 li
344.04 322.02 li
343.38 322.32 li
342.78 322.68 li
342.78 322.62 li
342.24 322.98 li
341.76 323.28 li
341.34 323.64 li
340.98 324 li
340.98 323.94 li
340.68 324.3 li
340.44 324.66 li
340.44 324.6 li
340.26 324.96 li
340.32 324.96 li
340.2 325.32 li
340.2 325.26 li
340.2 325.62 li
340.2 325.56 li
.92929 .879301 .889677 .799283 cmyk
f
grestore
%ADOBeginSubsetFont: QJJAAA+Calibri-Italic AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
XBRJBG+Calibri-Italic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/T <1C60D8A8C9B7544E0BD44792D5D51E7EFCE09B1F437A065C1ABBB5A6333E
3764B2AEA2CBC8943EE494D37AE9E8B4B022DF299781883C0B6D3E716309AB37
BB95B1A20B71E792716835C11049804FB9D451C9BCB60593CFD2929BE1D90829
B58FE7E0C726A9A55222BD86B806D9A8A1CD1C8F4F72598F356ABE24C4FD3643
E0B5D89C109685B0A70FA874F54E3E0105A6A3D6FA5D197B609699C56A509C56
2E43ADD5BD167DD184F9590E26432C7E237A2CF61565241FD0AC018081E59BBE
76C95639F729FD80CBFBE736> |-
/l <1C60D8A8C9B887F064FCC856F2BE348B60E6F72191099DAECB9FD94145D2
B8E5F9429E0CD410B85ACC8D2FA4977F72257912ADDB9141C5857C26991D1DB1
289488B43F35D5A9EDFBE5964AC5E663313BD3FC9BD03D07F2855A7F82640E39
2AF560C583CF673F7A64A67D712EAE33B1A9AEDE586FEF21B1B5FF5AE6E91F25
8ACA4F2C4C9C> |-
/u <1C60D8A8C9B7B9B9DE7286331F260FB1B0B1ADFB0250DBC06D7699D914C7
E1020D016F3C38130D93043F9D109EE22A5303C3582F22CAED0FEB4CD30E8698
076857E58828946AFC6F89D27CD446D43B9185854FDA72C1BEE77C436F5A56E4
553A0EAF913339697BDC77751B8791B77DE9906B7DFBD43864B9AC34675DB860
B861BC5E3822357D74561E07984F373DCB4FBB3DE8CE2BC98C57AF0ED7EC6A8C
97A6C610A396C34AE3825B6E92E3213A5BCCF298B6DF271F6AB20A651C9B7F83
C141C98BD206210690B3820044FC0145C5CA5B8D5C072CEA3FCAA5172148B4DA
00C87DCA5B3053266A575A025359AB5B9BDA1D7DC6AE2D9865309E220D88C454
D41E2C14E869A8B5B2D8E745588B443FB9C986DEE30BD935E7F59A9277E5D8C3
6F503C6E8A0C6BE3E2FC2369DAFCF2FB43D034E97805E0FDEBA331524C538A7F
C3ED639BA5F03D2A026E93D37EA7B5C70D258F68> |-
systemdict /gcheck known {setglobal} if end {end} if
end
XBRJBG+Calibri-Italic /Encoding get
dup 84 /T put
dup 108 /l put
dup 117 /u put
pop
%ADOEndSubsetFont
/XBRJBG+Calibri-Italic*1 
[46{/.notdef}rp /period 11{/.notdef}rp /colon 25{/.notdef}rp /T 12{/.notdef}rp /a 
3{/.notdef}rp /e /f 5{/.notdef}rp /l /m /n /.notdef 
/p 3{/.notdef}rp /t /u 3{/.notdef}rp /y 134{/.notdef}rp]
XBRJBG+Calibri-Italic nf
XBRJBG+Calibri-Italic*1 [12 0 0 -12 0 0 ]msf
353.94 328.92 mo
(null:T)
[6.18008 6.18008 2.76007 2.76004 3.22806 0 ]xsh
gsave
380.88 330.72 mo
384.96 330.72 li
384.96 324.18 li
380.88 324.18 li
cp
clp
%ADOBeginSubsetFont: QJJAAA+Calibri-Italic AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
XBRJBG+Calibri-Italic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/zero <1C60D8A8C9B7A0860AEB48ECDBC65A097A9A9576FF6770A52AB9484DD
234624AF82ECD11A5092025722BD5A57F8E76E1EF6C1AC20D9288E00A0CD6E47
6E05D184D3DA9FA333229AF7579F218AD3FFAE3A1AB076A028F2EE0760020E36
30672D1A8E93E666AE2C325782975960327A2214E25DDF11764186B819DCBA39
83A569557CBFD28DE6D055D7BFFCDFC75934761E9221A8C2FE83E860C4C51BE3
686CB46B1F63DD6673661025264121B202ADBF30853C50912C20BB148FE4A47E
84E65C992991A91A26856C13C4D041E178BF8BB17381EBF0E6571FA2044A51BC
8B1D32CF2F9FAFE7C24DE1E85FDDC999B8E65D24F4E7C947B4233D0D6216CBAF
05BA8AC2C483572BEE94C88ABA94C7FBB859C0926A922AEE23BD1915A114C05E
43A0B173043683C3C57FB24B3106FFF83DAAD5E6CFCF83DA69505781C5B35D0A
D1CB80A8409677F64C5BDB339EFFE345C7C1BF83BCA6A73E935> |-
systemdict /gcheck known {setglobal} if end {end} if
end
XBRJBG+Calibri-Italic /Encoding get
dup 48 /zero put
pop
%ADOEndSubsetFont
/XBRJBG+Calibri-Italic*1 
[46{/.notdef}rp /period /.notdef /zero 9{/.notdef}rp /colon 25{/.notdef}rp /T 
12{/.notdef}rp /a 3{/.notdef}rp /e /f 5{/.notdef}rp /l /m 
/n /.notdef /p 3{/.notdef}rp /t /u 3{/.notdef}rp /y 
134{/.notdef}rp]
XBRJBG+Calibri-Italic nf
XBRJBG+Calibri-Italic*1 [8.04 0 0 -8.04 0 0 ]msf
380.88 331.86 mo
(0)sh
grestore
353.52 296.34 mo
353.64 296.1 li
353.88 295.98 li
383.88 295.98 li
384.12 296.1 li
384.24 296.34 li
384.24 311.34 li
384.12 311.58 li
383.88 311.7 li
353.88 311.7 li
353.64 311.58 li
353.52 311.34 li
cp
354.18 311.34 mo
353.88 310.98 li
383.88 310.98 li
383.58 311.34 li
383.58 296.34 li
383.88 296.64 li
353.88 296.64 li
354.18 296.34 li
.92929 .879301 .889677 .799283 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: QJJAAA+Calibri-Italic AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
XBRJBG+Calibri-Italic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/one <1C60D8A8C9B7A0860A58EE60A453CEF20ED731FE9918A37A436F888DC8
5CFAF7E2A2E2DE5C0B081A989F914322FF372AE639CB0BC1A3EAAE0E93A1F822
4895FD82559215B1C6FE72B5F99EB8478CB96D5425321C007B8E4CAFFB65ED3B
96C4B0A2D649948817AD93BFE3221221BF62C2705AD6FA47A00FF223A186A035
005CF2AFD190A46CEEE72255C260E600FF081318B79CBDCBD7347E0C07B665B8
4919D542982F32A738B214E9F99D409F088D143E1910F9F60D824F0F4B2E5DC7
7AB25C456DF95A4C63EFE8F6368108EB9C953C3E147DD451BB909EDD2447816E
13D0626C07849AEA9F6245851992BF9962E976DA51B6E624599F17DC620F522F
D217ED563EA710B0F1454C> |-
/A <1C60D8A8C9B7F88C24E7C7C18A99AFA695E77890405AEC786C5E164127CE
DB6D0431921DDE076A91730CCF34AC8021E96CCDAEFB72FBEE35C69B7C9974AB
FE2ED042302CA1463ABE5172E3C300830C941825CFB07435A0FA431408DF0394
FC3501727BF64B001FB84519931BD81572DDACF187EAA923E7D53C077380AAA1
4C9B7BFAD56722055151EF8E4F81033FECCD0BF39EFB51DD5FABE0C67CA51A3F
ED05766CE1E7FD548D38717CCFBD53EF35936DBAB663AAB2BD8662E7EF20093C
F4F5EBB615F1F96620A4A1A8CBB74573398C245433216A> |-
/M <1C60D8A8C9B68A39A0D45F5B31123F5781C6114A619CB02A9E825FF65DBD
6C259BF8BB3F514059127C1392C9CE498FD621CC2F85C5C32CC64E040C3B6A42
4B91073EF2ECD310E0FC7AF92B525BE1C521EA1FF625263535A5EB2D2F2C360A
855CABA2DE433F8392D30722165A5FD7856A546C1B6CC50B39AEEE09441E9C7F
3B23ED7AB676C5FA86439712B3A69E4FFFF5F89DC42460A82E9A7A614DA7EF65
397856D4CD608065EB437EF3BEBC666518AA8133D2DB881A31B56B8989D3DD4E
8C3B99CCF58FD8F16835282ADF9D31DE658BDF6EB9D3EAC7D29F9D3FF03B6802
2FDADA4711E27E5F0DF50A86FCF9E238F9A3C5585C18114CC73E811E99431592
0BBB1B6882D9972EE84B53A2B687214E51C5A9966AC9BBD93553AEDF03581622
B5F546DF1FDEDE3BC36B7501CC9A44A66F22BC52F4E636A4> |-
systemdict /gcheck known {setglobal} if end {end} if
end
XBRJBG+Calibri-Italic /Encoding get
dup 49 /one put
dup 65 /A put
dup 77 /M put
pop
%ADOEndSubsetFont
/XBRJBG+Calibri-Italic*1 
[46{/.notdef}rp /period /.notdef /zero /one 8{/.notdef}rp /colon 6{/.notdef}rp 
/A 11{/.notdef}rp /M 6{/.notdef}rp /T 12{/.notdef}rp /a 3{/.notdef}rp 
/e /f 5{/.notdef}rp /l /m /n /.notdef /p 
3{/.notdef}rp /t /u 3{/.notdef}rp /y 134{/.notdef}rp]
XBRJBG+Calibri-Italic nf
XBRJBG+Calibri-Italic*1 [8.04 0 0 -8.04 0 0 ]msf
364.14 305.4 mo
(AM)
[4.68326 0 ]xsh
XBRJBG+Calibri-Italic*1 [12 0 0 -12 0 0 ]msf
291.42 279.9 mo
(p)sh
XBRJBG+Calibri-Italic*1 [8.04 0 0 -8.04 0 0 ]msf
297.6 282.84 mo
(1)sh
XBRJBG+Calibri-Italic*1 [12 0 0 -12 0 0 ]msf
301.68 279.9 mo
(:T)
[3.24487 0 ]xsh
XBRJBG+Calibri-Italic*1 [8.04 0 0 -8.04 0 0 ]msf
310.74 282.84 mo
(1)sh
274.14 276.42 mo
274.2 276 li
274.32 275.52 li
278.824 266.299 326.451 266.3 331.02 275.52 cv
331.14 276 li
331.14 276.9 li
329.735 282.35 312.699 283.977 308.34 284.1 cv
306.96 284.16 li
305.52 284.22 li
298.768 284.499 279.781 283.775 274.8 278.16 cv
274.5 277.74 li
274.32 277.32 li
274.2 276.9 li
cp
274.86 276.78 mo
274.86 276.72 li
274.98 277.08 li
274.92 277.08 li
275.1 277.44 li
275.1 277.38 li
275.34 277.74 li
275.64 278.1 li
275.58 278.04 li
276 278.4 li
275.94 278.4 li
276.42 278.76 li
276.36 278.76 li
276.9 279.06 li
277.44 279.42 li
277.44 279.36 li
278.04 279.72 li
278.7 280.02 li
279.42 280.32 li
280.2 280.62 li
281.04 280.92 li
281.04 280.86 li
281.88 281.16 li
283.8 281.64 li
284.82 281.88 li
285.9 282.12 li
285.84 282.12 li
286.98 282.36 li
286.98 282.3 li
288.12 282.54 li
289.26 282.72 li
290.52 282.84 li
290.46 282.84 li
291.72 283.02 li
300.196 283.922 308.788 283.791 317.22 282.54 cv
318.36 282.3 li
318.36 282.36 li
320.52 281.88 li
321.54 281.64 li
322.5 281.4 li
323.4 281.16 li
324.3 280.86 li
324.3 280.92 li
325.14 280.62 li
325.92 280.32 li
325.86 280.32 li
326.64 280.02 li
326.58 280.02 li
327.3 279.72 li
327.9 279.36 li
327.9 279.42 li
328.44 279.06 li
328.92 278.76 li
329.34 278.4 li
329.7 278.04 li
329.7 278.1 li
330 277.74 li
330.24 277.38 li
330.18 277.44 li
330.36 277.08 li
330.48 276.72 li
330.48 276.78 li
330.48 276.42 li
330.48 276.48 li
330.48 276.06 li
330.48 276.12 li
330.36 275.76 li
330.36 275.82 li
330.18 275.46 li
330.24 275.46 li
330 275.1 li
330 275.16 li
329.7 274.74 li
329.7 274.8 li
329.34 274.44 li
328.92 274.08 li
328.92 274.14 li
328.44 273.78 li
327.9 273.48 li
327.3 273.12 li
327.3 273.18 li
326.58 272.82 li
326.64 272.82 li
325.86 272.52 li
325.92 272.52 li
325.14 272.22 li
325.14 272.28 li
324.3 271.98 li
314.443 268.957 301.848 268.79 291.72 269.82 cv
290.46 270 li
290.52 270 li
289.26 270.18 li
285.84 270.72 li
285.9 270.72 li
284.82 270.96 li
283.8 271.2 li
281.88 271.68 li
280.2 272.28 li
280.2 272.22 li
279.42 272.52 li
278.7 272.82 li
278.04 273.18 li
278.04 273.12 li
277.44 273.48 li
276.9 273.78 li
276.36 274.14 li
276.42 274.08 li
275.94 274.44 li
276 274.44 li
275.58 274.8 li
275.64 274.74 li
275.34 275.16 li
275.34 275.1 li
275.1 275.46 li
274.92 275.82 li
274.98 275.76 li
274.86 276.12 li
274.86 276.06 li
274.8 276.48 li
274.8 276.42 li
.92929 .879301 .889677 .799283 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: QJJAAA+Calibri-Italic AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
XBRJBG+Calibri-Italic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/ellipsis <1C60D8A8C9B627523C0ADDD7AACC0398F46C02F0F3B2012921B00
A72FFE7B04E3BB61BD891111ABB13CEFB6D8A8036EECCD894C78256CC03027ED
59F9867C39C3426F7E84A91C1DBD953F0EA5C47B3AF91B0D2AC48E8A213FB3D9
7EDCA6E4DB25E060AB174FC70C9428ED78D51BDA79323042657D6FB4B194A95F
957B94FD63C8B6869AD3492F215914BAA31CE1FFBF60349018945136BD49263A
B986D91FA4C45A7E7CE2B72B98A8941F9A26FC680A17B28C8357CBC758053280
EF02C011BF8D458647F83B08D88E71FFB44B77FD4E8CEB7BF14EAC47E88D45E6
125F45507A49856735565CD558F9CC00E46303D2234FE0F932AAF2F8AC01E8DB
DE9FDB6577547FC73793EF4712E9F8380D47585D744026791BEC67C3A8C8012F
B243E8A9D37C538222BD0D6DF1AABC336ACA0AE19B7AAFF3B83A8656033763A3
92880B580BE1869E7DCA927E54E13F3D45B03A0416EE0504AB3B8405D47BDBFA
BBBF0BA898A9F449858F7DCEACFAF3A1EA7B8DD8A0B0A5B1766DDC5B4BB72A2D
DBCD91A1B8F42E026D1BEC0EFFC2AC3DEBD132FA08202BB57EEA17F523160166
0C77BE2877B26043D6223A75E85E0CEAEBF56F733D51C0E9C90F21635A8B070> |-
systemdict /gcheck known {setglobal} if end {end} if
end
XBRJBG+Calibri-Italic /Encoding get
dup 32 /ellipsis put
pop
%ADOEndSubsetFont
/XBRJBG+Calibri-Italic*1 
[32{/.notdef}rp /ellipsis 13{/.notdef}rp /period /.notdef /zero /one 8{/.notdef}rp 
/colon 6{/.notdef}rp /A 11{/.notdef}rp /M 6{/.notdef}rp /T 12{/.notdef}rp 
/a 3{/.notdef}rp /e /f 5{/.notdef}rp /l /m /n 
/.notdef /p 3{/.notdef}rp /t /u 3{/.notdef}rp /y 134{/.notdef}rp]
XBRJBG+Calibri-Italic nf
XBRJBG+Calibri-Italic*1 [12 0 0 -12 0 0 ]msf
364.02 279.9 mo
( )sh
338.52 276.42 mo
338.52 276 li
338.7 275.52 li
343.052 266.306 390.945 266.304 395.34 275.52 cv
395.46 276 li
395.52 276.42 li
395.46 276.9 li
394.26 282.3 376.924 284.005 372.72 284.1 cv
371.34 284.16 li
369.9 284.22 li
362.992 284.486 344.292 283.796 339.12 278.16 cv
338.88 277.74 li
338.52 276.9 li
cp
339.24 276.78 mo
339.18 276.72 li
339.3 277.08 li
339.48 277.44 li
339.42 277.38 li
339.66 277.74 li
339.96 278.1 li
339.96 278.04 li
340.32 278.4 li
340.74 278.76 li
341.22 279.06 li
341.76 279.42 li
341.76 279.36 li
342.42 279.72 li
342.36 279.72 li
343.08 280.02 li
343.02 280.02 li
343.8 280.32 li
343.74 280.32 li
344.58 280.62 li
344.52 280.62 li
345.36 280.92 li
345.36 280.86 li
346.26 281.16 li
347.16 281.4 li
348.18 281.64 li
348.12 281.64 li
349.14 281.88 li
351.3 282.36 li
351.3 282.3 li
352.44 282.54 li
354.951 282.908 357.471 283.17 360 283.38 cv
361.38 283.44 li
361.32 283.44 li
362.76 283.5 li
369.029 283.792 375.334 283.464 381.54 282.54 cv
382.68 282.3 li
382.68 282.36 li
383.82 282.12 li
385.86 281.64 li
387.78 281.16 li
388.62 280.86 li
388.62 280.92 li
389.46 280.62 li
390.24 280.32 li
390.96 280.02 li
391.62 279.72 li
392.22 279.36 li
392.22 279.42 li
392.82 279.06 li
392.76 279.06 li
393.3 278.76 li
393.24 278.76 li
393.72 278.4 li
393.66 278.4 li
394.08 278.04 li
394.02 278.1 li
394.32 277.74 li
394.56 277.38 li
394.56 277.44 li
394.74 277.08 li
394.68 277.08 li
394.8 276.72 li
394.8 276.78 li
394.86 276.42 li
394.86 276.48 li
394.8 276.06 li
394.8 276.12 li
394.68 275.76 li
394.74 275.82 li
394.56 275.4 li
394.56 275.46 li
394.32 275.1 li
394.32 275.16 li
394.02 274.74 li
394.08 274.8 li
393.66 274.44 li
393.72 274.44 li
393.24 274.08 li
393.3 274.14 li
392.76 273.78 li
392.82 273.78 li
392.22 273.48 li
391.62 273.12 li
391.62 273.18 li
390.96 272.82 li
390.24 272.52 li
389.46 272.22 li
389.46 272.28 li
388.62 271.98 li
380.62 269.483 371.054 269.052 362.76 269.34 cv
361.32 269.4 li
361.38 269.4 li
360 269.46 li
356.408 269.738 352.667 270.221 349.14 270.96 cv
348.12 271.2 li
348.18 271.2 li
347.16 271.44 li
346.26 271.68 li
345.36 271.98 li
344.52 272.28 li
344.58 272.22 li
343.74 272.52 li
343.8 272.52 li
343.02 272.82 li
343.08 272.82 li
342.36 273.18 li
342.42 273.12 li
341.76 273.48 li
341.22 273.78 li
340.74 274.14 li
340.74 274.08 li
340.32 274.44 li
339.96 274.8 li
339.96 274.74 li
339.66 275.16 li
339.72 275.1 li
339.42 275.46 li
339.48 275.4 li
339.3 275.82 li
339.3 275.76 li
339.18 276.12 li
339.24 276.06 li
339.18 276.48 li
339.18 276.42 li
.92929 .879301 .889677 .799283 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
XBRJBG+Calibri-Italic*1 [12 0 0 -12 0 0 ]msf
419.16 279.9 mo
(p)sh
XBRJBG+Calibri-Italic*1 [8.04 0 0 -8.04 0 0 ]msf
425.34 282.84 mo
(n)sh
XBRJBG+Calibri-Italic*1 [12 0 0 -12 0 0 ]msf
429.48 279.9 mo
(:T)
[3.24487 0 ]xsh
XBRJBG+Calibri-Italic*1 [8.04 0 0 -8.04 0 0 ]msf
437.94 282.84 mo
(n)sh
401.88 276.42 mo
401.88 276 li
402 275.52 li
406.567 266.3 454.185 266.3 458.7 275.52 cv
458.82 276 li
458.88 276.42 li
458.82 276.9 li
457.5 282.33 440.383 283.983 436.08 284.1 cv
434.64 284.16 li
433.26 284.22 li
426.432 284.498 407.562 283.781 402.48 278.16 cv
402 277.32 li
401.88 276.9 li
cp
402.54 276.78 mo
402.54 276.72 li
402.66 277.08 li
402.84 277.44 li
402.78 277.38 li
403.02 277.74 li
403.32 278.1 li
403.32 278.04 li
403.68 278.4 li
404.1 278.76 li
404.58 279.06 li
405.12 279.42 li
405.12 279.36 li
405.72 279.72 li
406.38 280.02 li
407.1 280.32 li
407.88 280.62 li
408.72 280.92 li
408.72 280.86 li
409.62 281.16 li
410.52 281.4 li
411.48 281.64 li
412.5 281.88 li
414.66 282.36 li
414.66 282.3 li
415.8 282.54 li
417 282.72 li
418.2 282.84 li
419.46 283.02 li
419.4 283.02 li
422.04 283.26 li
421.98 283.26 li
423.36 283.38 li
424.68 283.44 li
426.06 283.5 li
427.5 283.56 li
430.38 283.62 li
433.26 283.56 li
433.2 283.56 li
434.64 283.5 li
437.4 283.38 li
440.04 283.14 li
439.98 283.14 li
441.3 283.02 li
442.5 282.84 li
443.76 282.72 li
444.9 282.54 li
446.04 282.3 li
446.04 282.36 li
448.2 281.88 li
449.22 281.64 li
451.14 281.16 li
451.98 280.86 li
451.98 280.92 li
452.82 280.62 li
453.6 280.32 li
454.32 280.02 li
454.98 279.72 li
455.58 279.36 li
455.58 279.42 li
456.12 279.06 li
456.6 278.76 li
457.08 278.4 li
457.02 278.4 li
457.44 278.04 li
457.38 278.1 li
457.68 277.74 li
457.92 277.38 li
457.92 277.44 li
458.1 277.08 li
458.04 277.08 li
458.16 276.72 li
458.16 276.78 li
458.22 276.42 li
458.22 276.48 li
458.16 276.06 li
458.16 276.12 li
458.04 275.76 li
458.1 275.82 li
457.92 275.4 li
457.92 275.46 li
457.68 275.1 li
457.68 275.16 li
457.38 274.74 li
457.44 274.8 li
457.02 274.44 li
457.08 274.44 li
456.6 274.08 li
456.6 274.14 li
456.12 273.78 li
455.58 273.48 li
454.98 273.12 li
454.98 273.18 li
454.32 272.82 li
453.6 272.52 li
452.82 272.22 li
452.82 272.28 li
451.98 271.98 li
448.547 270.803 444.872 270.35 441.3 269.82 cv
439.98 269.7 li
440.04 269.7 li
437.4 269.46 li
434.64 269.34 li
433.2 269.28 li
433.26 269.28 li
427.5 269.28 li
426.06 269.34 li
424.68 269.4 li
423.36 269.46 li
421.98 269.58 li
422.04 269.58 li
419.4 269.82 li
419.46 269.82 li
418.2 270 li
414.974 270.459 411.823 270.933 408.72 271.98 cv
407.88 272.28 li
407.88 272.22 li
407.1 272.52 li
406.38 272.82 li
405.72 273.18 li
405.72 273.12 li
405.12 273.48 li
404.58 273.78 li
404.1 274.14 li
404.1 274.08 li
403.68 274.44 li
403.32 274.8 li
403.32 274.74 li
403.02 275.16 li
403.02 275.1 li
402.78 275.46 li
402.84 275.4 li
402.66 275.82 li
402.66 275.76 li
402.54 276.12 li
402.54 276.06 li
402.54 276.48 li
402.54 276.42 li
.92929 .879301 .889677 .799283 cmyk
f
303 283.92 mo
303 284.4 li
303.06 284.82 li
303.635 288.375 307.35 291.295 310.2 293.1 cv
310.86 293.52 li
311.58 293.94 li
322.504 299.921 336.731 302.817 349.08 303.36 cv
351.48 303.48 li
353.22 303.48 li
353.16 304.14 li
351.42 304.14 li
341.029 304.483 304.727 298.619 302.34 284.4 cv
302.34 283.98 li
cp
349.38 301.14 mo
353.88 303.84 li
349.32 306.42 li
349.08 306.42 li
348.9 306.24 li
348.84 306 li
349.02 305.82 li
353.04 303.54 li
353.04 304.08 li
349.02 301.74 li
348.9 301.5 li
348.9 301.26 li
349.14 301.08 li
349.38 301.14 li
f
430.68 283.98 mo
430.68 284.4 li
428.644 298.274 396.716 304.418 386.1 304.14 cv
384.6 304.14 li
384.54 303.48 li
386.1 303.48 li
396.317 303.795 427.875 297.647 430.02 284.4 cv
430.02 283.92 li
cp
388.44 306.36 mo
383.88 303.84 li
388.38 301.14 li
388.62 301.08 li
388.86 301.26 li
388.86 301.5 li
388.74 301.74 li
384.72 304.08 li
384.72 303.54 li
388.74 305.82 li
388.92 306 li
388.92 306.24 li
388.68 306.42 li
388.44 306.36 li
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: QJJAAA+Calibri-Italic AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
XBRJBG+Calibri-Italic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/c <1C60D8A8C9B71B40BFAB5B1941FA60B0DA5F56660243BEF0C65A5E2AC178
84C1FC121ACF12A3051437CA09386E99C96556086F1F80B8CC5E67CECFB4341B
C7DA94F4983A36FEAC8524047535C8C002D50824CA25EC69C843B7F96ACC9026
A51B8001444330FFF7A771AE8C7103ECA86CC65E325478AC74ECC83BD941A1FA
F476689D41595F05A198D84320F82FB993A98807D0FB8C36DE69688A57268626
5129209571C51AE8E66CD8995D94F2057CB952868F51D3A6437B2BFC009AC163
575C2123D1A7DE5B493A2FD52433D62ED5C8DAE202BA1D0C3B2F0F0E98A71EED
417135345570EEF2E6E87FA9BE52C83011F17E2CE0C5D13166E7B8F63C8A0AB0
2F0351FA9ACDB5BA9545FF4580A1447FE621817B709A24D025B3255F8D87B521
D0D21779A0F3BF74C84940358429E67F580249DC4BB3AAF5BE5AF683CD3BBA60
92EE74CD68> |-
/i <1C60D8A8C9B887F064FE345A43ECC085EFEAC76BA80DDD0C8D5DDB679EC1
1CD384EDF7AB908ECB68B5A3FBC5DBED2210F389D2D65D8FC4D6EAEFAE4B675A
CBA4F72DAA2697EAE164C2203D96100FC741D1FFB0103E2CBCC1757DEE690C8A
A694107D4D4DD745AB53CC745C4D724F42BB2C4C0A712A099A07B4FA69719E66
D7EADE98CC0DBB221ECCCD7C192890409E364C2A6FCEF22ED0F57D49FEA67F82
2C40AB720C60030B72E7ABD02DDB082627F1ADB816632179B550DB93E941A282
40F512DBF10A8DCFE72AF8EA0C8C05F7EABB650085A241413234634E9E1C6C8E
025A5F2E9F748B4CC06B90D68C68563EEDDCF62DE5753DEF83DC> |-
/r <1C60D8A8C9B8151C2694EB8154930224E1DB96A970429E2971C2A111C7DF
85C0987074B7AA85314C0047C0EEDE0ED42030C8884C71F24EEDF1CF1B9D8493
9B09C7F8E512EF8589E2115B0EDCD2626EC64A10E539F554B527FFFCB95C74B9
0EBC46F5D5266878522AA3586303DD71BDA87C6CFE16CEFDEC9675FDB7B23120
C1493EB69FA9426D539B45E4CC6213B4EAA2C601A6FD231F3BD175A18DFF7CFF
8AAACB9AA869A51A7F72BD34DC43F844131EC01226460F38877C1AFF15CCE008
B9AEBDDE6D3DE338EB537434F11E9DA7EA332D8441111755A107E694275C29AD
A70EB633336DEA066F87447E09F99907E72979C2B3F07D1B0130C763AFE8ACAC
0D7E39E5928115BE00DBE0E436C79BC5B448F4D16CF276A689C6FB9FF524E523
E4B4E3679403C8F6D7F59E584C> |-
/v <1C60D8A8C9B77D5F9BD8CC846BCA5C9845AA7F82274FC5414ECC35307ED0
EB49CAEE6D4354AE950DD38BFDDCC70D24A13D34821CEDD17256EF7CABE52862
75314DEB6F3F71B944F661AC70515569C550E82722AB1EB38DCA7878243EBEFC
73CBF0EE965245129294F4A01A5A2FC7E0CAEB77191CDF33916677CB560860D2
79668159E726455435F62CB367E0B3FEEBE06030265CE6C2B696476D37F03603
D85BD8E25873401AAED251F9E4AD79002853357ED85924B9F88ED9A5FB6B164F
FCE8FA5B72407C519FE9F761D3DF6B1FDBE127B45E95ED18A88868B3A312338D
3EB7ABFA9D9F844E786BF5038B7FB60F53DE4D5D78640448EDF2AC0B97287636
B31336C127666893654C0BC21A3F3F11A6BD455F5F1C7F645F5A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
XBRJBG+Calibri-Italic /Encoding get
dup 99 /c put
dup 105 /i put
dup 114 /r put
dup 118 /v put
pop
%ADOEndSubsetFont
/XBRJBG+Calibri-Italic*1 
[32{/.notdef}rp /ellipsis 13{/.notdef}rp /period /.notdef /zero /one 8{/.notdef}rp 
/colon 6{/.notdef}rp /A 11{/.notdef}rp /M 6{/.notdef}rp /T 12{/.notdef}rp 
/a /.notdef /c /.notdef /e /f 2{/.notdef}rp /i 
2{/.notdef}rp /l /m /n /.notdef /p /.notdef /r 
/.notdef /t /u /v 2{/.notdef}rp /y 134{/.notdef}rp]
XBRJBG+Calibri-Italic nf
XBRJBG+Calibri-Italic*1 [12 0 0 -12 0 0 ]msf
204.66 279.9 mo
(receiver:)
[4.13403 5.75395 4.92001 5.76596 2.76604 5.37 5.75397 4.13403 0 ]xsh
%ADOBeginSubsetFont: GFNBAA+Calibri-Italic Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /GFNBAA+Calibri-Italic def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /g3 put
def
/FontBBox {-476 -194 1214 952} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/.notdef <1C60D8A8C9B7A0865786BC308F2320639BB536432D0898AEB6E2A7
5CF9EC2A9EC0700EC985467C5EB75BAFAE6BE92B47D4665D1FFB7CDD63B993D8
CAF292A657BB84C1D7B11457D454AE84F45E42136F191EC6E3B3983E5AB3335D
EC1B5DA070AA269E3098A95D700B7A877E0B90FEA50C57240FE69A623C227A24
32F0D09A0AB3B37F9929A87FD9AD5B69FC3DDBBDE0A657548A6A0CA57D1D47D5
FE926BE7FF962360C0A9B770C0895EF6EBFFA4DC6BEC37F71748863B9F794A34
58D5F95997EC1E7D14F6BEF0F24D8F15E48015D300AB35CF12A219244AC1E96B
AAD98C9FB5AA9AB620D4759046C90591AD5B5DB9058FED9B2DEAA5C289619C69
E6B8AFBA78E92BA7CAD51162C8E19B9CE3A002008E1F2E7A1C2CA8B94E16AF51
1B72C953877A73A560545823ADD0EF14F1A99CBC77A9AEB372F7F84402780C34
1A1F3B424BB5BB3D045333E21109BF0BFC6DF2C339E12B2157F8A656B74474F0
BCE53FA32D21B2F841C437CBC8FF800542665AE6B6AE1AB4D9D2CA7B4C4D6695
3BDAE1223DC341C8BCCF7DF80B0EAE877C569B5D2FC0CF06741B78357213D2C0
36105C76D1B0229545F400BC4FF0C330A129DED3A7DD021F5A29FF7E933705A9
10D64D991F85DB9CFE06DFBE23A1219DBA72230B> |-
/g3 <1C60D8A8C9B888C146> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/XBRJBH+Calibri-Italic /GFNBAA+Calibri-Italic findfont ct_VMDictPut
/XBRJBH+Calibri-Italic*1 
[32{/.notdef}rp /g3 223{/.notdef}rp]
XBRJBH+Calibri-Italic nf
XBRJBH+Calibri-Italic*1 [12 0 0 -12 0 0 ]msf
246.48 279.9 mo
( )sh
XBRJBG+Calibri-Italic*1 [12 0 0 -12 0 0 ]msf
249.06 279.9 mo
(T)sh
195.78 276.42 mo
195.78 276.18 li
195.84 275.94 li
195.9 275.76 li
197.6 271.39 212.427 269.73 216.3 269.34 cv
217.86 269.16 li
219.48 269.04 li
231.383 268.201 244.074 268.417 255.84 270.54 cv
257.1 270.78 li
258.3 271.08 li
259.44 271.32 li
260.46 271.62 li
263.148 272.266 270.785 274.875 266.58 278.58 cv
265.5 279.3 li
256.759 283.333 246.706 283.652 237.24 284.16 cv
233.64 284.28 li
231.78 284.28 li
231.78 283.62 li
231.78 284.28 li
229.98 284.28 li
224.757 284.321 197.958 283.187 195.84 276.9 cv
195.78 276.66 li
cp
196.44 276.6 mo
196.44 276.54 li
196.5 276.78 li
196.5 276.72 li
196.56 276.9 li
196.5 276.9 li
196.62 277.08 li
196.56 277.02 li
196.8 277.38 li
197.1 277.74 li
197.04 277.68 li
197.46 278.04 li
197.94 278.4 li
197.88 278.4 li
198.48 278.7 li
198.42 278.7 li
199.08 279.06 li
199.8 279.36 li
199.74 279.36 li
200.52 279.72 li
201.42 280.02 li
201.36 280.02 li
203.28 280.62 li
204.36 280.86 li
205.44 281.16 li
206.64 281.4 li
207.9 281.64 li
207.84 281.64 li
210.48 282.12 li
211.92 282.3 li
213.36 282.54 li
214.86 282.72 li
214.8 282.72 li
216.36 282.84 li
220.887 283.379 225.431 283.47 229.98 283.62 cv
234.42 283.62 li
234.42 284.28 li
229.14 284.28 li
229.14 283.62 li
233.64 283.62 li
237.694 283.496 241.593 283.388 245.64 283.02 cv
247.26 282.84 li
247.2 282.84 li
248.76 282.72 li
253.714 282.003 262.042 281.058 266.16 278.04 cv
266.52 277.68 li
266.52 277.74 li
266.82 277.38 li
266.76 277.38 li
267 277.02 li
267 277.08 li
267.12 276.72 li
267.12 276.78 li
267.12 276.54 li
267.12 276.6 li
267.12 276.24 li
267.12 276.3 li
267.12 276.12 li
267.06 275.94 li
267.06 276 li
267 275.76 li
267 275.82 li
266.76 275.46 li
266.82 275.52 li
266.52 275.16 li
266.1 274.8 li
266.16 274.8 li
265.68 274.44 li
265.68 274.5 li
265.14 274.14 li
264.54 273.78 li
263.82 273.48 li
263.04 273.18 li
262.2 272.82 li
262.2 272.88 li
261.3 272.52 li
257.067 271.32 253.14 270.638 248.76 270.18 cv
247.2 270 li
247.26 270 li
245.64 269.82 li
235.17 268.989 223.779 268.978 213.36 270.36 cv
211.86 270.54 li
211.92 270.54 li
210.48 270.72 li
207.84 271.2 li
207.9 271.2 li
206.64 271.44 li
205.44 271.68 li
203.28 272.28 li
202.32 272.52 li
201.36 272.88 li
201.42 272.82 li
200.52 273.18 li
199.74 273.48 li
199.8 273.48 li
199.08 273.78 li
198.42 274.14 li
198.48 274.14 li
197.88 274.5 li
197.94 274.44 li
197.46 274.8 li
197.04 275.16 li
197.1 275.1 li
196.8 275.52 li
196.8 275.46 li
196.56 275.82 li
196.62 275.76 li
196.5 276 li
196.56 275.94 li
196.5 276.12 li
196.44 276.3 li
196.44 276.24 li
196.44 276.42 li
.92929 .879301 .889677 .799283 cmyk
f
230.46 285.66 mo
230.52 286.08 li
230.52 286.02 li
230.64 286.44 li
230.64 286.38 li
230.82 286.8 li
231.12 287.22 li
234.362 290.508 242.139 292.452 246.48 293.58 cv
248.04 294 li
249.66 294.36 li
275.932 299.975 303.977 302.038 330.78 303.06 cv
342.3 303.42 li
353.22 303.48 li
353.22 304.14 li
342.3 304.08 li
330.78 303.78 li
302.988 302.532 273.444 300.605 246.3 294.24 cv
244.8 293.88 li
243.36 293.46 li
240.244 292.568 230.736 289.974 229.86 286.2 cv
229.86 286.14 li
229.8 285.72 li
cp
349.38 301.14 mo
353.88 303.84 li
349.32 306.42 li
349.08 306.42 li
348.9 306.3 li
348.84 306.06 li
349.02 305.82 li
353.04 303.54 li
353.04 304.14 li
349.02 301.74 li
348.9 301.56 li
348.96 301.26 li
349.14 301.14 li
349.38 301.14 li
f
gsave
57.12 330.72 mo
537.9 330.72 li
537.9 420.84 li
57.12 420.84 li
cp
eclp
57.12 420.86 mo
537.9 420.86 li
537.9 330.68 li
57.12 330.68 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
339.48 325.62 mo
339.54 325.14 li
339.66 324.72 li
344.031 315.496 391.988 315.496 396.36 324.72 cv
396.48 325.14 li
396.54 325.62 li
396.48 326.04 li
395.149 331.551 378.039 333.151 373.68 333.3 cv
370.92 333.42 li
364.283 333.708 344.967 332.956 340.14 327.3 cv
339.9 326.94 li
339.66 326.52 li
339.54 326.04 li
cp
340.2 325.98 mo
340.2 325.92 li
340.32 326.28 li
340.32 326.22 li
340.44 326.64 li
340.44 326.58 li
340.68 326.94 li
340.68 326.88 li
340.98 327.3 li
340.98 327.24 li
341.34 327.6 li
341.76 327.96 li
341.76 327.9 li
342.24 328.26 li
342.78 328.56 li
343.38 328.92 li
343.38 328.86 li
344.04 329.22 li
344.76 329.52 li
345.54 329.82 li
345.54 329.76 li
346.38 330.06 li
347.28 330.36 li
347.22 330.36 li
348.18 330.6 li
349.969 331.065 351.623 331.433 353.46 331.68 cv
354.66 331.86 li
354.6 331.86 li
355.86 332.04 li
358.92 332.501 362.071 332.65 365.16 332.76 cv
368.04 332.76 li
367.98 332.76 li
370.86 332.76 li
372.3 332.7 li
375.06 332.58 li
375 332.58 li
376.38 332.46 li
377.64 332.34 li
378.96 332.22 li
380.16 332.04 li
381.42 331.86 li
381.36 331.86 li
382.56 331.68 li
384.397 331.433 386.051 331.065 387.84 330.6 cv
388.8 330.36 li
388.74 330.36 li
389.64 330.06 li
390.48 329.76 li
390.48 329.82 li
391.26 329.52 li
391.98 329.22 li
392.64 328.86 li
392.64 328.92 li
393.24 328.56 li
393.78 328.26 li
394.26 327.9 li
394.26 327.96 li
394.68 327.6 li
395.04 327.24 li
395.04 327.3 li
395.34 326.88 li
395.34 326.94 li
395.58 326.58 li
395.76 326.22 li
395.7 326.28 li
395.82 325.92 li
395.82 325.98 li
395.82 325.56 li
395.82 325.62 li
395.82 325.26 li
395.82 325.32 li
395.7 324.96 li
395.76 324.96 li
395.58 324.6 li
395.58 324.66 li
395.34 324.3 li
395.04 323.94 li
395.04 324 li
394.68 323.64 li
394.26 323.28 li
393.78 322.98 li
393.24 322.62 li
393.24 322.68 li
392.64 322.32 li
391.98 322.02 li
391.26 321.72 li
390.48 321.42 li
389.64 321.12 li
389.64 321.18 li
388.74 320.88 li
388.8 320.88 li
386.88 320.4 li
385.86 320.16 li
383.7 319.68 li
383.7 319.74 li
382.56 319.5 li
381.36 319.32 li
381.42 319.32 li
380.16 319.2 li
378.96 319.02 li
377.64 318.9 li
376.38 318.78 li
375 318.66 li
375.06 318.66 li
372.3 318.54 li
370.86 318.48 li
367.98 318.42 li
368.04 318.42 li
365.16 318.48 li
363.72 318.54 li
360.96 318.66 li
361.02 318.66 li
359.64 318.78 li
358.38 318.9 li
357.06 319.02 li
355.86 319.2 li
354.6 319.32 li
354.66 319.32 li
353.46 319.5 li
352.32 319.74 li
352.32 319.68 li
350.16 320.16 li
349.14 320.4 li
347.22 320.88 li
347.28 320.88 li
346.38 321.18 li
346.38 321.12 li
345.54 321.42 li
344.76 321.72 li
344.04 322.02 li
343.38 322.32 li
342.78 322.68 li
342.78 322.62 li
342.24 322.98 li
341.76 323.28 li
341.34 323.64 li
340.98 324 li
340.98 323.94 li
340.68 324.3 li
340.44 324.66 li
340.44 324.6 li
340.26 324.96 li
340.32 324.96 li
340.2 325.32 li
340.2 325.26 li
340.2 325.62 li
340.2 325.56 li
.92929 .879301 .889677 .799283 cmyk
f
grestore
gsave
380.88 334.02 mo
384.96 334.02 li
384.96 330.72 li
380.88 330.72 li
cp
clp
1 /0 /CSD get_res sepcs
1 sep
XBRJBG+Calibri-Italic*1 [8.04 0 0 -8.04 0 0 ]msf
380.88 331.86 mo
(0)sh
grestore
146.94 377.94 mo
147 377.7 li
148.158 371.011 182.046 369.822 186.84 370.08 cv
186.9 370.14 li
186.72 370.08 li
188.76 370.08 li
239.088 370.911 239.092 384.988 188.76 385.74 cv
186.72 385.74 li
186.84 385.14 li
188.46 385.8 li
184.68 385.74 li
179.479 385.924 149.167 384.643 147 378.42 cv
147 378.18 li
cp
147.66 378.12 mo
147.6 378.06 li
147.72 378.42 li
147.72 378.36 li
147.78 378.54 li
148.02 378.9 li
148.02 378.84 li
148.14 379.02 li
148.5 379.38 li
148.98 379.74 li
148.98 379.68 li
149.22 379.86 li
149.82 380.22 li
150.54 380.58 li
150.54 380.52 li
151.32 380.88 li
152.16 381.18 li
153.12 381.54 li
153.12 381.48 li
154.14 381.84 li
154.14 381.78 li
155.22 382.08 li
160.507 383.512 165.99 383.97 171.42 384.54 cv
173.22 384.66 li
173.16 384.66 li
175.02 384.78 li
178.171 384.981 181.523 385.078 184.68 385.08 cv
186.72 385.08 li
186.6 385.74 li
184.98 385.08 li
188.76 385.08 li
195.437 385.054 202.113 384.65 208.74 383.82 cv
210.3 383.64 li
210.24 383.64 li
211.74 383.4 li
213.955 383.034 216.056 382.709 218.22 382.08 cv
219.36 381.78 li
219.36 381.84 li
220.38 381.48 li
220.32 381.54 li
221.28 381.18 li
222.18 380.88 li
222.12 380.88 li
222.96 380.52 li
222.9 380.58 li
223.62 380.22 li
224.22 379.86 li
224.46 379.68 li
224.46 379.74 li
224.76 379.56 li
224.7 379.56 li
224.94 379.38 li
225.48 378.84 li
225.42 378.9 li
225.6 378.72 li
225.54 378.72 li
225.66 378.54 li
225.72 378.36 li
225.72 378.42 li
225.78 378.24 li
225.84 378.06 li
225.84 378.12 li
225.84 377.76 li
225.84 377.82 li
225.78 377.64 li
225.72 377.46 li
225.72 377.52 li
225.66 377.28 li
225.66 377.34 li
225.54 377.16 li
225.6 377.16 li
225.42 376.98 li
225.48 376.98 li
225.3 376.8 li
225.3 376.86 li
224.94 376.5 li
224.7 376.32 li
224.76 376.32 li
224.46 376.14 li
224.22 375.96 li
224.22 376.02 li
223.62 375.66 li
222.9 375.3 li
222.96 375.3 li
222.12 375 li
222.18 375 li
221.28 374.64 li
220.32 374.34 li
220.38 374.34 li
219.36 374.04 li
218.22 373.74 li
218.28 373.74 li
217.08 373.5 li
215.82 373.2 li
215.88 373.2 li
214.56 372.96 li
211.557 372.407 208.534 371.981 205.5 371.64 cv
203.76 371.52 li
203.82 371.52 li
202.02 371.34 li
202.08 371.34 li
200.28 371.22 li
195.78 370.9 191.112 370.766 186.6 370.74 cv
186.54 370.68 li
186.72 370.74 li
184.68 370.74 li
182.7 370.8 li
176.688 370.95 170.66 371.234 164.7 372.06 cv
163.2 372.24 li
161.7 372.48 li
157.977 373.093 154.015 373.788 150.54 375.3 cv
149.82 375.66 li
149.22 376.02 li
149.22 375.96 li
148.5 376.5 li
148.14 376.86 li
148.14 376.8 li
147.78 377.34 li
147.78 377.28 li
147.72 377.52 li
147.72 377.46 li
147.6 377.82 li
147.66 377.76 li
147.6 377.94 li
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: QJJAAA+Calibri-Italic AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
XBRJBG+Calibri-Italic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/x <1C60D8A8C9B76A0D36566D0E7E0E90B92CF414DDD5F073347E0B3E748430
F239303E38ADE5DA377B09AA449001D98031BAB88B14C611A72A84E8CFB49542
28D8AD45740F16549498EC1D451AC30D4EBB639A00CE58A51E4546E7F0156FAD
4E807753B665E78510F6DA68FB8E397D80C7C91C0A0AD2D7D4B0F197800902EA
A00D8D9597B9A30C33990F378484233867CC6FE4A5E989D2971A61E7BE36B42A
DB5469CC969290063B4DBEED78E0BA43B41CE2B042F705288BEA5BB99739417A
7E52A20AAB55E4DEA9F2DCEA822BC04BABEFF01C18EDD58B1F3D659F48584717
6BC6612A71F2477C43FEAB20E04312668B30CA0CB2203D89716BC4621B345A87
811F4533841C70AE3378C04EFA18A37E> |-
systemdict /gcheck known {setglobal} if end {end} if
end
XBRJBG+Calibri-Italic /Encoding get
dup 120 /x put
pop
%ADOEndSubsetFont
/XBRJBG+Calibri-Italic*1 
[32{/.notdef}rp /ellipsis 13{/.notdef}rp /period /.notdef /zero /one 8{/.notdef}rp 
/colon 6{/.notdef}rp /A 11{/.notdef}rp /M 6{/.notdef}rp /T 12{/.notdef}rp 
/a /.notdef /c /.notdef /e /f 2{/.notdef}rp /i 
2{/.notdef}rp /l /m /n /.notdef /p /.notdef /r 
/.notdef /t /u /v /.notdef /x /y 134{/.notdef}rp]
XBRJBG+Calibri-Italic nf
XBRJBG+Calibri-Italic*1 [12 0 0 -12 0 0 ]msf
152.28 380.04 mo
(x.name:x.type)
[5.20319 3.03119 6.17529 6.17529 9.49919 5.74316 3.22327 5.20319 2.75519 4.02728 5.37126 6.17529 
0 ]xsh
64.2 354.78 mo
64.2 354.54 li
64.26 354.3 li
64.38 354.06 li
65.901 349.968 81.585 348.197 85.14 347.82 cv
86.88 347.64 li
88.62 347.52 li
103.063 346.464 119.002 346.638 133.26 349.38 cv
134.52 349.68 li
135.66 349.92 li
136.8 350.22 li
137.82 350.52 li
139.917 351.222 146.084 353.343 142.86 356.52 cv
142.38 356.88 li
142.14 357.12 li
139.622 358.681 136.135 359.527 133.26 360.12 cv
131.94 360.42 li
130.56 360.66 li
124.548 361.651 118.046 362.245 111.96 362.46 cv
108 362.58 li
103.98 362.58 li
103.98 361.92 li
103.98 362.58 li
99.96 362.58 li
91.761 362.39 82.734 361.81 74.7 360.12 cv
73.5 359.88 li
72.3 359.58 li
70.502 359.134 65.033 357.659 64.38 355.44 cv
64.26 355.26 li
64.2 355.02 li
cp
64.92 354.96 mo
64.86 354.9 li
64.92 355.08 li
64.92 355.02 li
64.98 355.26 li
64.98 355.2 li
65.04 355.38 li
65.16 355.56 li
65.16 355.5 li
65.28 355.74 li
65.28 355.68 li
65.4 355.86 li
65.76 356.22 li
66 356.4 li
66 356.34 li
66.24 356.52 li
67.156 357.243 69.255 358 70.38 358.32 cv
71.4 358.62 li
71.34 358.62 li
72.48 358.92 li
81.744 361.209 92.422 361.806 101.94 361.92 cv
106.62 361.98 li
106.62 362.58 li
101.34 362.58 li
101.34 361.98 li
106.02 361.92 li
112.697 361.894 119.373 361.49 126 360.66 cv
127.56 360.48 li
127.5 360.48 li
129 360.24 li
130.44 360 li
131.82 359.76 li
133.14 359.46 li
133.08 359.46 li
134.34 359.22 li
136.62 358.62 li
137.64 358.32 li
137.58 358.32 li
138.54 358.02 li
139.44 357.72 li
139.38 357.72 li
140.22 357.36 li
140.16 357.36 li
140.88 357.06 li
141.48 356.7 li
141.96 356.34 li
141.96 356.4 li
142.2 356.22 li
142.74 355.68 li
142.68 355.68 li
142.86 355.5 li
142.8 355.56 li
142.92 355.38 li
142.98 355.2 li
142.98 355.26 li
143.04 355.02 li
143.04 355.08 li
143.1 354.9 li
143.1 354.96 li
143.1 354.72 li
143.1 354.78 li
143.1 354.6 li
143.1 354.66 li
143.04 354.42 li
143.04 354.48 li
142.92 354.12 li
142.92 354.18 li
142.8 354 li
142.86 354 li
142.68 353.82 li
142.74 353.82 li
142.56 353.64 li
142.56 353.7 li
142.38 353.46 li
142.38 353.52 li
142.2 353.34 li
141.48 352.8 li
140.16 352.14 li
140.22 352.14 li
139.38 351.84 li
139.44 351.84 li
138.54 351.48 li
137.58 351.18 li
137.64 351.18 li
136.62 350.88 li
134.34 350.28 li
134.34 350.34 li
133.08 350.04 li
133.14 350.04 li
131.82 349.8 li
128.766 349.266 125.858 348.755 122.76 348.48 cv
121.02 348.3 li
121.08 348.3 li
119.28 348.18 li
104.96 347.16 89.006 347.28 74.88 350.04 cv
73.62 350.34 li
73.62 350.28 li
71.34 350.88 li
71.4 350.88 li
70.38 351.18 li
69.024 351.612 66.855 352.398 65.76 353.34 cv
65.58 353.52 li
65.58 353.46 li
65.4 353.7 li
65.4 353.64 li
65.04 354.18 li
65.04 354.12 li
64.92 354.48 li
64.92 354.42 li
64.86 354.66 li
64.92 354.6 li
64.86 354.78 li
64.86 354.72 li
.92929 .879301 .889677 .799283 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
XBRJBG+Calibri-Italic*1 [12 0 0 -12 0 0 ]msf
71.1 358.08 mo
(y.name:y.type)
[4.73647 2.99519 6.1741 6.17409 9.498 5.74197 3.22207 4.73647 2.75519 4.02608 5.37008 6.17409 
0 ]xsh
146.94 353.52 mo
147 353.28 li
148.158 346.59 182.046 345.402 186.84 345.66 cv
186.9 345.72 li
186.72 345.66 li
188.76 345.66 li
239.088 346.491 239.092 360.568 188.76 361.32 cv
186.72 361.32 li
186.84 360.72 li
188.46 361.38 li
184.68 361.32 li
179.479 361.504 149.167 360.223 147 354 cv
147 353.76 li
cp
147.66 353.7 mo
147.6 353.64 li
147.72 354 li
147.72 353.94 li
147.78 354.12 li
148.02 354.48 li
148.02 354.42 li
148.14 354.6 li
148.5 354.96 li
148.98 355.32 li
148.98 355.26 li
149.22 355.44 li
149.82 355.8 li
150.54 356.16 li
150.54 356.1 li
151.32 356.46 li
152.16 356.76 li
153.12 357.12 li
153.12 357.06 li
154.14 357.42 li
154.14 357.36 li
155.22 357.66 li
160.503 359.091 165.995 359.55 171.42 360.12 cv
173.22 360.24 li
173.16 360.24 li
175.02 360.36 li
178.171 360.561 181.523 360.658 184.68 360.66 cv
186.72 360.66 li
186.6 361.32 li
184.98 360.66 li
188.76 360.66 li
195.437 360.634 202.113 360.23 208.74 359.4 cv
210.3 359.22 li
210.24 359.22 li
211.74 358.98 li
213.955 358.614 216.057 358.289 218.22 357.66 cv
219.36 357.36 li
219.36 357.42 li
220.38 357.06 li
220.32 357.12 li
221.28 356.76 li
222.18 356.46 li
222.12 356.46 li
222.96 356.1 li
222.9 356.16 li
223.62 355.8 li
224.22 355.44 li
224.46 355.26 li
224.46 355.32 li
224.76 355.14 li
224.7 355.14 li
224.94 354.96 li
225.48 354.42 li
225.42 354.48 li
225.6 354.3 li
225.54 354.3 li
225.66 354.12 li
225.72 353.94 li
225.72 354 li
225.78 353.82 li
225.84 353.64 li
225.84 353.7 li
225.84 353.34 li
225.84 353.4 li
225.78 353.22 li
225.72 353.04 li
225.72 353.1 li
225.66 352.86 li
225.66 352.92 li
225.54 352.74 li
225.6 352.74 li
225.42 352.56 li
225.48 352.56 li
225.3 352.38 li
225.3 352.44 li
224.94 352.08 li
224.7 351.9 li
224.76 351.9 li
224.46 351.72 li
224.22 351.54 li
224.22 351.6 li
223.62 351.24 li
222.9 350.88 li
222.96 350.88 li
222.12 350.58 li
222.18 350.58 li
221.28 350.22 li
220.32 349.92 li
220.38 349.92 li
219.36 349.62 li
218.22 349.32 li
218.28 349.32 li
217.08 349.08 li
215.82 348.78 li
215.88 348.78 li
214.56 348.54 li
211.557 347.987 208.534 347.561 205.5 347.22 cv
203.76 347.1 li
203.82 347.1 li
202.02 346.92 li
202.08 346.92 li
200.28 346.8 li
195.78 346.48 191.112 346.346 186.6 346.32 cv
186.54 346.26 li
186.72 346.32 li
184.68 346.32 li
182.7 346.38 li
176.688 346.53 170.66 346.814 164.7 347.64 cv
163.2 347.82 li
161.7 348.06 li
157.977 348.673 154.015 349.368 150.54 350.88 cv
149.82 351.24 li
149.22 351.6 li
149.22 351.54 li
148.5 352.08 li
148.14 352.44 li
148.14 352.38 li
147.78 352.92 li
147.78 352.86 li
147.72 353.1 li
147.72 353.04 li
147.6 353.4 li
147.66 353.34 li
147.6 353.52 li
.92929 .879301 .889677 .799283 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: QJJAAA+Calibri-Italic AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
XBRJBG+Calibri-Italic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/z <1C60D8A8C9B7303122FE44067588D5FCA8A31BC4CF8DF3887A6FF8E4EF24
EA59857D6ABB0DC42B82D1DCFFF1809D55FD2799BD2AA50224AA7C281059B0A5
2BE2498608B26C60EAC09AA92EA014D933295D67C7A67D2515B4A0BC0D98951F
36EF528B51F30348FD7F63CED3F3032E383B9DBDF6FCF41482543702ED80C7F9
358AAA3C38698D07FA4F246A3D2EF39D4AEE7E511BB74A5593426C4E9DDF884B
9B0A79547C96BC75AD732CA8FBA79D230C78B35879B82018BF7F696BA8D5AD92
7A636DD8A58BCCA693E095D3078264DE191A587E8A98B120DBFACACC79E5E963
0A9EA78386BD6D9E19424682AB10893701277960D141BF4D3783F1C317F2A60E
CC582E74E7BF6715266FFD20D8D7DEE1A2811EADB9> |-
systemdict /gcheck known {setglobal} if end {end} if
end
XBRJBG+Calibri-Italic /Encoding get
dup 122 /z put
pop
%ADOEndSubsetFont
/XBRJBG+Calibri-Italic*1 
[32{/.notdef}rp /ellipsis 13{/.notdef}rp /period /.notdef /zero /one 8{/.notdef}rp 
/colon 6{/.notdef}rp /A 11{/.notdef}rp /M 6{/.notdef}rp /T 12{/.notdef}rp 
/a /.notdef /c /.notdef /e /f 2{/.notdef}rp /i 
2{/.notdef}rp /l /m /n /.notdef /p /.notdef /r 
/.notdef /t /u /v /.notdef /x /y /z 
133{/.notdef}rp]
XBRJBG+Calibri-Italic nf
XBRJBG+Calibri-Italic*1 [12 0 0 -12 0 0 ]msf
151.74 356.82 mo
(z.name:z.type)
[4.74245 3.0264 6.17049 6.17049 9.4944 5.73837 3.21846 4.74245 2.75519 4.02248 5.36649 6.17049 
0 ]xsh
gsave
57.12 330.72 mo
537.9 330.72 li
537.9 420.84 li
57.12 420.84 li
cp
eclp
120.66 419.88 mo
120.72 419.4 li
120.84 418.98 li
125.113 409.762 173.22 409.756 177.48 418.98 cv
177.6 419.4 li
177.66 419.88 li
177.6 420.3 li
176.569 425.723 158.981 427.494 154.86 427.56 cv
153.48 427.62 li
152.04 427.68 li
145.218 427.959 126.382 427.237 121.32 421.62 cv
121.02 421.2 li
120.84 420.78 li
120.72 420.3 li
cp
121.38 420.24 mo
121.38 420.18 li
121.44 420.54 li
121.44 420.48 li
121.62 420.9 li
121.62 420.84 li
121.86 421.2 li
121.8 421.2 li
122.16 421.56 li
122.1 421.5 li
122.52 421.86 li
122.46 421.86 li
122.94 422.22 li
122.88 422.16 li
123.42 422.52 li
123.36 422.52 li
123.96 422.82 li
124.56 423.18 li
125.22 423.48 li
125.94 423.78 li
126.72 424.08 li
127.56 424.32 li
127.5 424.32 li
128.4 424.62 li
130.05 425.007 131.832 425.545 133.5 425.76 cv
134.64 426 li
134.58 426 li
135.78 426.18 li
145.591 427.463 156.218 427.427 165.96 425.58 cv
167.04 425.34 li
166.98 425.34 li
168.06 425.1 li
168 425.1 li
169.02 424.86 li
169.92 424.62 li
170.82 424.32 li
171.66 424.08 li
171.6 424.08 li
172.38 423.78 li
173.82 423.18 li
173.76 423.18 li
174.42 422.82 li
174.36 422.82 li
174.96 422.52 li
175.44 422.16 li
175.44 422.22 li
175.86 421.86 li
176.22 421.5 li
176.22 421.56 li
176.52 421.2 li
176.46 421.2 li
176.76 420.84 li
176.7 420.9 li
176.88 420.48 li
176.88 420.54 li
177 420.18 li
176.94 420.24 li
177 419.82 li
177 419.94 li
176.94 419.52 li
177 419.58 li
176.88 419.22 li
176.88 419.28 li
176.7 418.86 li
176.76 418.92 li
176.46 418.56 li
176.52 418.56 li
176.22 418.2 li
176.22 418.26 li
175.86 417.9 li
175.44 417.54 li
175.44 417.6 li
174.96 417.24 li
174.36 416.94 li
174.42 416.94 li
173.76 416.58 li
173.82 416.58 li
172.38 415.98 li
171.6 415.68 li
171.66 415.68 li
170.82 415.44 li
169.92 415.14 li
169.02 414.9 li
168 414.66 li
168.06 414.66 li
166.98 414.42 li
167.04 414.42 li
165.96 414.18 li
156.219 412.333 145.591 412.297 135.78 413.58 cv
134.58 413.76 li
134.64 413.76 li
133.5 414 li
131.832 414.215 130.05 414.753 128.4 415.14 cv
127.5 415.44 li
127.56 415.44 li
126.72 415.68 li
125.94 415.98 li
125.22 416.28 li
124.56 416.58 li
123.96 416.94 li
123.36 417.24 li
123.42 417.24 li
122.88 417.6 li
122.94 417.54 li
122.46 417.9 li
122.52 417.9 li
122.1 418.26 li
122.16 418.2 li
121.8 418.56 li
121.86 418.56 li
121.62 418.92 li
121.62 418.86 li
121.44 419.28 li
121.44 419.22 li
121.38 419.58 li
121.38 419.52 li
121.32 419.94 li
121.32 419.82 li
.92929 .879301 .889677 .799283 cmyk
f
grestore
gsave
135.06 420.84 mo
162.9 420.84 li
162.9 411.78 li
135.06 411.78 li
cp
clp
XBRJBG+Calibri-Italic*1 [12 0 0 -12 0 0 ]msf
135.06 423.18 mo
(null:T)
[6.18008 6.1801 2.76004 2.76006 3.22806 0 ]xsh
grestore
gsave
57.12 330.72 mo
537.9 330.72 li
537.9 420.84 li
57.12 420.84 li
cp
eclp
79.32 412.74 mo
79.44 412.5 li
79.68 412.38 li
109.74 412.38 li
109.98 412.5 li
110.04 412.74 li
110.04 427.74 li
109.98 427.98 li
109.74 428.1 li
79.68 428.1 li
79.44 427.98 li
79.32 427.74 li
cp
80.04 427.74 mo
79.68 427.44 li
109.74 427.44 li
109.38 427.74 li
109.38 412.74 li
109.74 413.04 li
79.68 413.04 li
80.04 412.74 li
.92929 .879301 .889677 .799283 cmyk
f
grestore
gsave
86.88 420.84 mo
104.46 420.84 li
104.46 412.8 li
86.88 412.8 li
cp
clp
XBRJBG+Calibri-Italic*1 [12 0 0 -12 0 0 ]msf
87.24 424.2 mo
(AM)
[6.96474 0 ]xsh
grestore
gsave
57.12 330.72 mo
537.9 330.72 li
537.9 420.84 li
57.12 420.84 li
cp
eclp
188.28 419.1 mo
188.28 418.86 li
188.34 418.68 li
188.4 418.44 li
190.141 414.292 205.506 412.564 209.22 412.2 cv
210.9 412.02 li
212.64 411.9 li
226.5 410.817 242.346 411.004 256.02 413.52 cv
258.54 414 li
259.74 414.3 li
260.82 414.6 li
262.803 415.165 270.035 417.258 267.12 420.66 cv
266.7 421.08 li
259.661 425.829 242.354 426.502 234.06 426.9 cv
232.08 426.96 li
228.06 426.96 li
228.06 426.3 li
228.06 426.96 li
226.02 426.96 li
220.861 427.12 190.39 425.866 188.34 419.58 cv
188.28 419.34 li
cp
188.94 419.28 mo
189 419.46 li
189 419.4 li
189.06 419.58 li
189 419.58 li
189.12 419.76 li
189.12 419.7 li
189.18 419.94 li
189.18 419.88 li
189.3 420.06 li
189.66 420.42 li
189.6 420.42 li
189.84 420.6 li
189.84 420.54 li
190.02 420.72 li
190.32 420.9 li
190.26 420.9 li
191.16 421.44 li
191.82 421.74 li
192.6 422.1 li
193.5 422.4 li
193.44 422.4 li
194.4 422.7 li
195.42 423 li
196.5 423.3 li
197.7 423.6 li
198.9 423.84 li
200.22 424.14 li
200.22 424.08 li
201.6 424.38 li
202.98 424.62 li
204.48 424.8 li
206.04 425.04 li
207.66 425.22 li
207.6 425.22 li
209.28 425.4 li
214.844 425.924 220.431 426.263 226.02 426.3 cv
230.7 426.3 li
230.7 426.96 li
225.36 426.96 li
225.36 426.3 li
230.04 426.3 li
238.226 426.195 246.432 425.688 254.52 424.38 cv
255.84 424.08 li
255.84 424.14 li
257.16 423.84 li
259.237 423.446 262.327 422.642 264.24 421.74 cv
264.96 421.44 li
264.9 421.44 li
265.56 421.08 li
265.5 421.08 li
265.8 420.9 li
266.28 420.54 li
266.22 420.6 li
266.46 420.42 li
266.64 420.24 li
266.58 420.24 li
266.76 420.06 li
266.88 419.88 li
266.88 419.94 li
267 419.7 li
267 419.76 li
267.12 419.4 li
267.12 419.46 li
267.12 419.1 li
267.12 419.16 li
267.12 418.8 li
267.12 418.86 li
267.06 418.68 li
266.94 418.5 li
267 418.56 li
266.88 418.32 li
266.88 418.38 li
266.76 418.2 li
266.58 418.02 li
266.64 418.02 li
266.46 417.84 li
266.22 417.66 li
266.28 417.72 li
265.8 417.36 li
265.5 417.18 li
265.56 417.18 li
264.9 416.82 li
264.96 416.82 li
264.24 416.52 li
263.46 416.16 li
254.051 412.873 241.979 412.31 232.08 411.96 cv
228.06 411.96 li
217.701 411.975 205.463 412.577 195.42 415.26 cv
194.4 415.56 li
193.44 415.86 li
193.5 415.86 li
192.6 416.16 li
191.82 416.52 li
191.16 416.82 li
190.26 417.36 li
190.32 417.36 li
190.02 417.54 li
190.08 417.54 li
189.84 417.72 li
189.84 417.66 li
189.6 417.84 li
189.66 417.84 li
189.3 418.2 li
189.18 418.38 li
189.18 418.32 li
189.12 418.56 li
189.12 418.5 li
189 418.68 li
189.06 418.68 li
189 418.86 li
189 418.8 li
188.94 418.98 li
188.94 419.16 li
188.94 419.1 li
.92929 .879301 .889677 .799283 cmyk
f
grestore
gsave
193.14 420.84 mo
261.72 420.84 li
261.72 410.04 li
193.14 410.04 li
cp
clp
XBRJBG+Calibri-Italic*1 [12 0 0 -12 0 0 ]msf
193.38 421.44 mo
(x.name:x.type)
[5.20319 3.03119 6.17529 6.17529 9.49919 5.74316 3.22327 5.20319 2.75519 4.02728 5.37126 6.17529 
0 ]xsh
grestore
gsave
57.12 330.72 mo
537.9 330.72 li
537.9 420.84 li
57.12 420.84 li
cp
eclp
109.74 419.88 mo
120.3 419.58 li
120.36 420.24 li
109.74 420.6 li
cp
116.4 417.42 mo
121.02 419.88 li
116.58 422.64 li
116.34 422.7 li
116.1 422.52 li
116.1 422.28 li
116.22 422.1 li
120.18 419.64 li
120.18 420.18 li
116.1 417.96 li
115.92 417.78 li
115.98 417.54 li
116.16 417.36 li
116.4 417.42 li
.92929 .879301 .889677 .799283 cmyk
f
177.6 419.16 mo
180.24 419.1 li
180.24 419.76 li
177.6 419.82 li
cp
182.22 418.98 mo
184.92 418.92 li
184.92 419.58 li
182.28 419.7 li
cp
186.9 418.86 mo
188.16 418.8 li
188.22 419.46 li
186.96 419.52 li
cp
184.26 416.64 mo
188.88 419.1 li
184.44 421.92 li
184.2 421.92 li
183.96 421.8 li
183.96 421.56 li
184.08 421.32 li
188.04 418.86 li
188.04 419.46 li
183.96 417.24 li
183.78 417.06 li
183.84 416.76 li
184.02 416.64 li
184.26 416.64 li
f
grestore
184.56 360.78 mo
185.22 360.78 li
185.22 363.48 li
184.56 363.48 li
cp
185.22 360.78 mo
cp
185.22 365.46 mo
185.22 368.16 li
184.5 368.16 li
184.56 365.46 li
cp
184.5 370.14 mo
185.16 370.14 li
185.16 371.4 li
184.5 371.4 li
cp
185.16 370.14 mo
cp
187.5 367.56 mo
184.86 372.06 li
182.22 367.56 li
182.22 367.32 li
182.34 367.08 li
182.64 367.08 li
182.82 367.2 li
185.16 371.22 li
184.56 371.22 li
186.9 367.26 li
187.14 367.08 li
187.38 367.14 li
187.5 367.32 li
187.5 367.56 li
.92929 .879301 .889677 .799283 cmyk
f
105.54 363.9 mo
105.6 364.2 li
105.622 364.885 106.076 365.445 106.44 366 cv
106.56 366.06 li
106.02 366.54 li
105.9 366.42 li
105.72 366.12 li
105.48 365.82 li
105.3 365.46 li
104.94 364.56 li
104.94 364.2 li
104.88 363.96 li
cp
107.94 367.38 mo
108.24 367.56 li
108.66 367.86 li
109.02 368.1 li
109.5 368.4 li
109.92 368.64 li
110.16 368.76 li
109.86 369.36 li
109.62 369.24 li
109.14 368.94 li
108.72 368.7 li
108.24 368.4 li
107.88 368.1 li
107.58 367.92 li
cp
111.96 369.66 mo
112.02 369.66 li
113.16 370.14 li
114.42 370.62 li
114.18 371.28 li
112.92 370.74 li
111.72 370.26 li
111.66 370.26 li
cp
116.28 371.28 mo
117.12 371.58 li
118.56 372 li
118.86 372.06 li
118.68 372.72 li
118.38 372.66 li
116.88 372.18 li
116.1 371.94 li
cp
120.78 372.6 mo
121.62 372.78 li
123.24 373.2 li
123.36 373.2 li
123.18 373.86 li
123.12 373.86 li
121.44 373.44 li
120.6 373.26 li
cp
125.28 373.62 mo
126.66 373.86 li
127.92 374.1 li
127.8 374.76 li
125.16 374.28 li
cp
129.9 374.46 mo
130.2 374.46 li
132.06 374.76 li
132.54 374.82 li
132.42 375.48 li
131.94 375.42 li
130.08 375.12 li
129.78 375.12 li
cp
134.52 375.06 mo
135.78 375.18 li
137.16 375.3 li
137.1 375.96 li
135.72 375.84 li
134.46 375.72 li
cp
139.14 375.48 mo
139.62 375.54 li
141.6 375.66 li
141.78 375.66 li
141.78 376.32 li
141.54 376.32 li
139.62 376.2 li
139.08 376.14 li
cp
143.82 375.72 mo
145.56 375.78 li
146.46 375.78 li
146.46 376.44 li
145.5 376.44 li
143.76 376.38 li
cp
143.04 373.44 mo
147.48 376.14 li
142.98 378.72 li
142.74 378.72 li
142.5 378.6 li
142.5 378.3 li
142.62 378.12 li
146.7 375.84 li
146.7 376.38 li
142.68 374.04 li
142.56 373.8 li
142.56 373.56 li
142.8 373.44 li
143.04 373.44 li
f
1 /0 /CSD get_res sepcs
1 sep
XBRJBG+Calibri-Italic*1 [12 0 0 -12 0 0 ]msf
262.62 358.74 mo
( )sh
237.12 355.26 mo
237.12 354.84 li
237.24 354.42 li
241.595 345.143 289.645 345.143 293.94 354.42 cv
294.06 354.84 li
294.12 355.26 li
294.06 355.74 li
292.813 361.197 275.587 362.832 271.32 363 cv
269.88 363.06 li
268.5 363.12 li
261.728 363.37 242.712 362.647 237.72 357 cv
237.24 356.16 li
237.12 355.74 li
cp
237.78 355.62 mo
237.78 355.56 li
237.9 355.98 li
237.9 355.92 li
238.08 356.28 li
238.02 356.22 li
238.26 356.64 li
238.26 356.58 li
238.56 356.94 li
238.92 357.3 li
238.92 357.24 li
239.34 357.6 li
239.82 357.96 li
239.82 357.9 li
240.36 358.26 li
244.419 360.336 248.972 361.101 253.44 361.74 cv
254.7 361.86 li
254.64 361.86 li
257.28 362.1 li
257.22 362.1 li
258.6 362.22 li
259.92 362.34 li
261.3 362.4 li
262.74 362.4 li
265.62 362.46 li
268.5 362.4 li
268.44 362.4 li
269.88 362.4 li
272.076 362.335 274.342 362.043 276.54 361.86 cv
277.8 361.74 li
277.74 361.74 li
279 361.56 li
281.28 361.2 li
282.42 360.96 li
282.36 360.96 li
283.44 360.78 li
285.954 360.215 288.523 359.449 290.82 358.26 cv
291.36 357.9 li
291.36 357.96 li
291.9 357.6 li
291.84 357.6 li
292.32 357.24 li
292.26 357.3 li
292.68 356.94 li
292.62 356.94 li
292.92 356.58 li
292.92 356.64 li
293.16 356.22 li
293.16 356.28 li
293.34 355.92 li
293.28 355.98 li
293.4 355.56 li
293.4 355.62 li
293.46 355.26 li
293.46 355.32 li
293.4 354.96 li
293.4 355.02 li
293.28 354.6 li
293.34 354.66 li
293.16 354.3 li
292.92 353.94 li
292.92 354 li
292.62 353.64 li
292.68 353.64 li
292.26 353.28 li
292.32 353.34 li
291.84 352.98 li
291.9 352.98 li
291.36 352.62 li
291.36 352.68 li
290.82 352.32 li
288.523 351.131 285.955 350.365 283.44 349.8 cv
282.36 349.62 li
282.42 349.62 li
281.28 349.38 li
279 349.02 li
277.74 348.84 li
277.8 348.84 li
276.54 348.72 li
274.43 348.372 272.037 348.322 269.88 348.18 cv
268.44 348.12 li
268.5 348.12 li
262.74 348.12 li
261.3 348.18 li
259.92 348.24 li
258.6 348.36 li
257.22 348.42 li
257.28 348.42 li
255.96 348.54 li
254.64 348.72 li
254.7 348.72 li
253.44 348.84 li
248.972 349.48 244.419 350.244 240.36 352.32 cv
239.82 352.68 li
239.82 352.62 li
239.34 352.98 li
238.92 353.34 li
238.92 353.28 li
238.56 353.64 li
238.26 354 li
238.26 353.94 li
238.02 354.3 li
238.08 354.3 li
237.9 354.66 li
237.9 354.6 li
237.78 355.02 li
237.78 354.96 li
237.78 355.32 li
237.78 355.26 li
.92929 .879301 .889677 .799283 cmyk
f
265.92 362.82 mo
265.92 363.12 li
265.861 363.858 265.565 364.527 265.2 365.16 cv
265.02 365.46 li
264.42 365.1 li
264.6 364.8 li
265.227 363.862 265 364.164 265.26 363.12 cv
265.26 362.76 li
cp
263.58 367.02 mo
263.58 367.08 li
263.22 367.38 li
261.54 368.58 li
261.42 368.64 li
261.06 368.04 li
261.18 367.98 li
262.02 367.44 li
263.1 366.54 li
263.16 366.54 li
cp
259.68 369.66 mo
258.48 370.26 li
257.28 370.8 li
257.22 370.8 li
256.98 370.2 li
257.04 370.14 li
258.18 369.66 li
259.26 369.12 li
259.32 369.06 li
cp
255.36 371.58 mo
254.76 371.82 li
253.38 372.3 li
252.84 372.48 li
252.6 371.82 li
253.14 371.64 li
254.52 371.16 li
255.12 370.92 li
cp
250.92 373.08 mo
250.5 373.2 li
248.94 373.62 li
248.28 373.74 li
248.16 373.08 li
248.76 372.96 li
250.32 372.54 li
250.74 372.42 li
cp
246.36 374.22 mo
245.76 374.34 li
244.08 374.7 li
243.72 374.76 li
243.6 374.1 li
243.96 374.04 li
245.64 373.68 li
246.18 373.56 li
cp
241.74 375.12 mo
240.72 375.3 li
239.1 375.54 li
238.98 374.88 li
240.6 374.64 li
241.62 374.46 li
cp
237.12 375.78 mo
235.38 375.96 li
234.42 376.08 li
234.36 375.42 li
235.26 375.3 li
237.06 375.12 li
cp
232.44 376.2 mo
231.72 376.26 li
229.86 376.38 li
229.74 376.38 li
229.74 375.72 li
229.8 375.72 li
231.66 375.6 li
232.38 375.54 li
cp
227.76 376.44 mo
226.8 376.44 li
226.8 375.78 li
227.76 375.78 li
cp
230.7 378.72 mo
226.14 376.14 li
230.64 373.44 li
230.88 373.38 li
231.06 373.56 li
231.12 373.8 li
230.94 374.04 li
226.98 376.38 li
226.98 375.84 li
231 378.12 li
231.18 378.3 li
231.12 378.54 li
230.94 378.72 li
230.7 378.72 li
f
387.36 393.66 mo
387.36 393.42 li
387.42 393.18 li
387.48 392.94 li
389.131 388.823 404.659 387.066 408.3 386.7 cv
409.98 386.52 li
411.72 386.4 li
426.086 385.326 442.185 385.513 456.36 388.26 cv
457.62 388.56 li
458.76 388.8 li
459.9 389.1 li
460.92 389.4 li
463.017 390.102 469.184 392.223 465.96 395.4 cv
465.48 395.76 li
465.24 396 li
462.575 397.562 459.369 398.405 456.36 399 cv
455.04 399.3 li
453.66 399.54 li
447.443 400.544 441.354 401.102 435.06 401.34 cv
433.14 401.4 li
431.16 401.46 li
427.08 401.46 li
427.08 400.8 li
427.08 401.46 li
425.1 401.46 li
420.048 401.646 389.391 400.341 387.42 394.14 cv
387.36 393.9 li
cp
388.02 393.84 mo
388.02 393.78 li
388.02 393.96 li
388.02 393.9 li
388.08 394.14 li
388.08 394.08 li
388.2 394.26 li
388.14 394.26 li
388.26 394.44 li
388.26 394.38 li
388.38 394.56 li
388.56 394.74 li
388.5 394.74 li
388.68 394.92 li
388.92 395.1 li
388.86 395.1 li
389.1 395.28 li
389.1 395.22 li
389.34 395.4 li
389.64 395.58 li
389.58 395.58 li
390.24 395.94 li
390.18 395.94 li
390.9 396.24 li
392.289 396.949 394.08 397.359 395.58 397.8 cv
396.78 398.1 li
396.72 398.1 li
397.98 398.34 li
406.566 400.125 416.342 400.72 425.1 400.8 cv
429.78 400.86 li
429.78 401.46 li
424.44 401.46 li
424.44 400.86 li
429.12 400.8 li
434.658 400.789 440.351 400.473 445.86 399.9 cv
447.54 399.72 li
447.48 399.72 li
449.1 399.54 li
453.064 399.015 456.909 398.387 460.74 397.2 cv
461.7 396.9 li
461.64 396.9 li
462.54 396.6 li
463.32 396.24 li
463.98 395.94 li
464.88 395.4 li
465.12 395.22 li
465.12 395.28 li
465.3 395.1 li
465.54 394.92 li
465.48 394.92 li
465.72 394.74 li
465.66 394.74 li
465.84 394.56 li
465.96 394.38 li
465.96 394.44 li
466.08 394.26 li
466.02 394.26 li
466.14 394.08 li
466.08 394.14 li
466.2 393.9 li
466.14 393.96 li
466.2 393.78 li
466.2 393.84 li
466.2 393.6 li
466.2 393.66 li
466.2 393.48 li
466.2 393.54 li
466.14 393.3 li
466.2 393.36 li
466.08 393.18 li
466.14 393.18 li
466.02 393 li
466.08 393.06 li
465.84 392.7 li
465.66 392.52 li
465.72 392.52 li
465.48 392.34 li
465.54 392.4 li
465.3 392.22 li
465.12 392.04 li
464.88 391.86 li
463.98 391.32 li
463.98 391.38 li
463.32 391.02 li
462.54 390.72 li
461.64 390.36 li
461.7 390.36 li
460.74 390.06 li
454.516 388.206 447.105 387.348 440.64 386.94 cv
438.78 386.82 li
438.84 386.82 li
436.92 386.7 li
435.06 386.64 li
433.08 386.52 li
431.1 386.52 li
431.16 386.52 li
429.12 386.46 li
418.872 386.45 408.041 386.877 397.98 388.92 cv
396.72 389.16 li
396.78 389.16 li
395.58 389.46 li
393.831 389.922 392.561 390.306 390.9 391.02 cv
390.18 391.38 li
390.24 391.32 li
389.58 391.68 li
389.64 391.68 li
389.34 391.86 li
388.86 392.22 li
388.92 392.22 li
388.68 392.4 li
388.68 392.34 li
388.5 392.52 li
388.56 392.52 li
388.38 392.7 li
388.14 393.06 li
388.2 393 li
388.08 393.18 li
388.02 393.36 li
388.02 393.3 li
388.02 393.54 li
388.02 393.48 li
388.02 393.66 li
388.02 393.6 li
f
1 /0 /CSD get_res sepcs
1 sep
XBRJBG+Calibri-Italic*1 [12 0 0 -12 0 0 ]msf
392.7 395.7 mo
(x.name:x.type)
[5.20319 3.03119 6.17529 6.17529 9.49921 5.74316 3.22327 5.20319 2.75519 4.02728 5.37125 6.17529 
0 ]xsh
297.06 393.54 mo
297.06 393.3 li
298.6 386.813 329.883 385.572 334.8 385.74 cv
337.08 385.74 li
337.14 385.98 li
336.84 385.74 li
338.88 385.74 li
389.233 386.516 389.22 400.603 338.88 401.4 cv
336.84 401.4 li
336.84 400.74 li
336.84 401.4 li
334.8 401.4 li
329.558 401.552 299.272 400.303 297.12 394.02 cv
297.06 393.78 li
cp
297.78 393.72 mo
297.72 393.66 li
297.78 393.9 li
297.78 393.84 li
297.84 394.02 li
297.9 394.2 li
297.9 394.14 li
298.26 394.68 li
298.44 394.86 li
298.44 394.8 li
298.62 394.98 li
299.34 395.52 li
299.94 395.88 li
299.94 395.82 li
300.66 396.18 li
301.44 396.54 li
301.44 396.48 li
302.28 396.84 li
312.309 400.023 324.343 400.47 334.8 400.74 cv
339.48 400.74 li
339.48 401.4 li
334.2 401.4 li
334.2 400.74 li
338.88 400.74 li
343.306 400.686 347.725 400.473 352.14 400.14 cv
353.94 400.02 li
353.88 400.02 li
355.62 399.84 li
358.548 399.503 361.816 399.175 364.68 398.52 cv
366 398.28 li
365.94 398.28 li
367.2 398.04 li
368.4 397.74 li
368.34 397.74 li
369.48 397.44 li
370.5 397.14 li
370.44 397.14 li
371.4 396.84 li
372.3 396.48 li
372.24 396.54 li
373.08 396.18 li
373.02 396.18 li
373.74 395.82 li
373.74 395.88 li
374.34 395.52 li
374.58 395.34 li
374.88 395.16 li
374.82 395.16 li
375.06 394.98 li
375.24 394.8 li
375.24 394.86 li
375.6 394.5 li
375.54 394.5 li
375.72 394.32 li
375.66 394.32 li
375.78 394.14 li
375.78 394.2 li
375.84 394.02 li
375.9 393.84 li
375.9 393.9 li
375.96 393.66 li
375.96 393.72 li
375.96 393.54 li
375.96 393.6 li
375.96 393.36 li
375.96 393.42 li
375.9 393.24 li
375.9 393.3 li
375.84 393.12 li
375.78 392.94 li
375.66 392.76 li
375.72 392.82 li
375.54 392.64 li
375.6 392.64 li
375.06 392.1 li
375.06 392.16 li
374.82 391.98 li
374.88 391.98 li
374.58 391.8 li
374.34 391.62 li
373.74 391.26 li
373.02 390.96 li
373.08 390.96 li
372.24 390.6 li
372.3 390.6 li
370.5 390 li
369.48 389.7 li
368.34 389.4 li
368.4 389.4 li
367.2 389.1 li
365.94 388.86 li
366 388.86 li
364.68 388.56 li
361.125 387.909 357.534 387.488 353.94 387.12 cv
352.14 387 li
352.2 387 li
350.4 386.82 li
346.564 386.617 342.724 386.37 338.88 386.4 cv
336.6 386.4 li
336.54 386.16 li
336.84 386.4 li
332.82 386.4 li
326.355 386.574 319.719 386.941 313.32 387.9 cv
311.82 388.08 li
310.38 388.32 li
307.144 388.941 301.854 389.951 299.1 391.8 cv
298.62 392.16 li
298.62 392.1 li
298.26 392.46 li
298.02 392.82 li
298.02 392.76 li
297.9 393 li
297.9 392.94 li
297.84 393.12 li
297.78 393.3 li
297.78 393.24 li
297.72 393.42 li
297.78 393.36 li
297.72 393.6 li
297.72 393.54 li
.92929 .879301 .889677 .799283 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
XBRJBG+Calibri-Italic*1 [12 0 0 -12 0 0 ]msf
303.96 396.9 mo
(y.name:y.type)
[4.73648 2.99518 6.1741 6.17407 9.49802 5.74194 3.22208 4.73648 2.75519 4.02606 5.37009 6.1741 
0 ]xsh
376.38 393.84 mo
379.08 393.78 li
379.08 394.44 li
376.38 394.5 li
cp
381.06 393.72 mo
383.7 393.6 li
383.76 394.26 li
381.06 394.38 li
cp
385.74 393.54 mo
387 393.54 li
387 394.2 li
385.74 394.2 li
cp
383.1 391.38 mo
387.66 393.84 li
383.28 396.6 li
382.98 396.66 li
382.8 396.48 li
382.74 396.24 li
382.92 396.06 li
386.82 393.54 li
386.82 394.14 li
382.74 391.92 li
382.62 391.74 li
382.62 391.5 li
382.86 391.32 li
383.1 391.38 li
.92929 .879301 .889677 .799283 cmyk
f
gsave
57.12 420.84 mo
537.9 420.84 li
537.9 510.96 li
57.12 510.96 li
cp
eclp
57.12 510.98 mo
537.9 510.98 li
537.9 420.8 li
57.12 420.8 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
120.66 419.88 mo
120.72 419.4 li
120.84 418.98 li
125.113 409.762 173.22 409.756 177.48 418.98 cv
177.6 419.4 li
177.66 419.88 li
177.6 420.3 li
176.569 425.723 158.981 427.494 154.86 427.56 cv
153.48 427.62 li
152.04 427.68 li
145.218 427.959 126.382 427.237 121.32 421.62 cv
121.02 421.2 li
120.84 420.78 li
120.72 420.3 li
cp
121.38 420.24 mo
121.38 420.18 li
121.44 420.54 li
121.44 420.48 li
121.62 420.9 li
121.62 420.84 li
121.86 421.2 li
121.8 421.2 li
122.16 421.56 li
122.1 421.5 li
122.52 421.86 li
122.46 421.86 li
122.94 422.22 li
122.88 422.16 li
123.42 422.52 li
123.36 422.52 li
123.96 422.82 li
124.56 423.18 li
125.22 423.48 li
125.94 423.78 li
126.72 424.08 li
127.56 424.32 li
127.5 424.32 li
128.4 424.62 li
130.05 425.007 131.832 425.545 133.5 425.76 cv
134.64 426 li
134.58 426 li
135.78 426.18 li
145.591 427.463 156.218 427.427 165.96 425.58 cv
167.04 425.34 li
166.98 425.34 li
168.06 425.1 li
168 425.1 li
169.02 424.86 li
169.92 424.62 li
170.82 424.32 li
171.66 424.08 li
171.6 424.08 li
172.38 423.78 li
173.82 423.18 li
173.76 423.18 li
174.42 422.82 li
174.36 422.82 li
174.96 422.52 li
175.44 422.16 li
175.44 422.22 li
175.86 421.86 li
176.22 421.5 li
176.22 421.56 li
176.52 421.2 li
176.46 421.2 li
176.76 420.84 li
176.7 420.9 li
176.88 420.48 li
176.88 420.54 li
177 420.18 li
176.94 420.24 li
177 419.82 li
177 419.94 li
176.94 419.52 li
177 419.58 li
176.88 419.22 li
176.88 419.28 li
176.7 418.86 li
176.76 418.92 li
176.46 418.56 li
176.52 418.56 li
176.22 418.2 li
176.22 418.26 li
175.86 417.9 li
175.44 417.54 li
175.44 417.6 li
174.96 417.24 li
174.36 416.94 li
174.42 416.94 li
173.76 416.58 li
173.82 416.58 li
172.38 415.98 li
171.6 415.68 li
171.66 415.68 li
170.82 415.44 li
169.92 415.14 li
169.02 414.9 li
168 414.66 li
168.06 414.66 li
166.98 414.42 li
167.04 414.42 li
165.96 414.18 li
156.219 412.333 145.591 412.297 135.78 413.58 cv
134.58 413.76 li
134.64 413.76 li
133.5 414 li
131.832 414.215 130.05 414.753 128.4 415.14 cv
127.5 415.44 li
127.56 415.44 li
126.72 415.68 li
125.94 415.98 li
125.22 416.28 li
124.56 416.58 li
123.96 416.94 li
123.36 417.24 li
123.42 417.24 li
122.88 417.6 li
122.94 417.54 li
122.46 417.9 li
122.52 417.9 li
122.1 418.26 li
122.16 418.2 li
121.8 418.56 li
121.86 418.56 li
121.62 418.92 li
121.62 418.86 li
121.44 419.28 li
121.44 419.22 li
121.38 419.58 li
121.38 419.52 li
121.32 419.94 li
121.32 419.82 li
.92929 .879301 .889677 .799283 cmyk
f
grestore
gsave
135.06 426.42 mo
162.9 426.42 li
162.9 420.84 li
135.06 420.84 li
cp
clp
1 /0 /CSD get_res sepcs
1 sep
XBRJBG+Calibri-Italic*1 [12 0 0 -12 0 0 ]msf
135.06 423.18 mo
(null:T)
[6.18008 6.1801 2.76004 2.76006 3.22806 0 ]xsh
grestore
1 /0 /CSD get_res sepcs
1 sep
XBRJBG+Calibri-Italic*1 [8.04 0 0 -8.04 0 0 ]msf
162 426.12 mo
(0)sh
gsave
57.12 420.84 mo
537.9 420.84 li
537.9 510.96 li
57.12 510.96 li
cp
eclp
79.32 412.74 mo
79.44 412.5 li
79.68 412.38 li
109.74 412.38 li
109.98 412.5 li
110.04 412.74 li
110.04 427.74 li
109.98 427.98 li
109.74 428.1 li
79.68 428.1 li
79.44 427.98 li
79.32 427.74 li
cp
80.04 427.74 mo
79.68 427.44 li
109.74 427.44 li
109.38 427.74 li
109.38 412.74 li
109.74 413.04 li
79.68 413.04 li
80.04 412.74 li
.92929 .879301 .889677 .799283 cmyk
f
grestore
gsave
86.88 427.44 mo
104.46 427.44 li
104.46 420.84 li
86.88 420.84 li
cp
clp
XBRJBG+Calibri-Italic*1 [12 0 0 -12 0 0 ]msf
87.24 424.2 mo
(AM)
[6.96474 0 ]xsh
grestore
gsave
57.12 420.84 mo
537.9 420.84 li
537.9 510.96 li
57.12 510.96 li
cp
eclp
188.28 419.1 mo
188.28 418.86 li
188.34 418.68 li
188.4 418.44 li
190.141 414.292 205.506 412.564 209.22 412.2 cv
210.9 412.02 li
212.64 411.9 li
226.5 410.817 242.346 411.004 256.02 413.52 cv
258.54 414 li
259.74 414.3 li
260.82 414.6 li
262.803 415.165 270.035 417.258 267.12 420.66 cv
266.7 421.08 li
259.661 425.829 242.354 426.502 234.06 426.9 cv
232.08 426.96 li
228.06 426.96 li
228.06 426.3 li
228.06 426.96 li
226.02 426.96 li
220.861 427.12 190.39 425.866 188.34 419.58 cv
188.28 419.34 li
cp
188.94 419.28 mo
189 419.46 li
189 419.4 li
189.06 419.58 li
189 419.58 li
189.12 419.76 li
189.12 419.7 li
189.18 419.94 li
189.18 419.88 li
189.3 420.06 li
189.66 420.42 li
189.6 420.42 li
189.84 420.6 li
189.84 420.54 li
190.02 420.72 li
190.32 420.9 li
190.26 420.9 li
191.16 421.44 li
191.82 421.74 li
192.6 422.1 li
193.5 422.4 li
193.44 422.4 li
194.4 422.7 li
195.42 423 li
196.5 423.3 li
197.7 423.6 li
198.9 423.84 li
200.22 424.14 li
200.22 424.08 li
201.6 424.38 li
202.98 424.62 li
204.48 424.8 li
206.04 425.04 li
207.66 425.22 li
207.6 425.22 li
209.28 425.4 li
214.844 425.924 220.431 426.263 226.02 426.3 cv
230.7 426.3 li
230.7 426.96 li
225.36 426.96 li
225.36 426.3 li
230.04 426.3 li
238.226 426.195 246.432 425.688 254.52 424.38 cv
255.84 424.08 li
255.84 424.14 li
257.16 423.84 li
259.237 423.446 262.327 422.642 264.24 421.74 cv
264.96 421.44 li
264.9 421.44 li
265.56 421.08 li
265.5 421.08 li
265.8 420.9 li
266.28 420.54 li
266.22 420.6 li
266.46 420.42 li
266.64 420.24 li
266.58 420.24 li
266.76 420.06 li
266.88 419.88 li
266.88 419.94 li
267 419.7 li
267 419.76 li
267.12 419.4 li
267.12 419.46 li
267.12 419.1 li
267.12 419.16 li
267.12 418.8 li
267.12 418.86 li
267.06 418.68 li
266.94 418.5 li
267 418.56 li
266.88 418.32 li
266.88 418.38 li
266.76 418.2 li
266.58 418.02 li
266.64 418.02 li
266.46 417.84 li
266.22 417.66 li
266.28 417.72 li
265.8 417.36 li
265.5 417.18 li
265.56 417.18 li
264.9 416.82 li
264.96 416.82 li
264.24 416.52 li
263.46 416.16 li
254.051 412.873 241.979 412.31 232.08 411.96 cv
228.06 411.96 li
217.701 411.975 205.463 412.577 195.42 415.26 cv
194.4 415.56 li
193.44 415.86 li
193.5 415.86 li
192.6 416.16 li
191.82 416.52 li
191.16 416.82 li
190.26 417.36 li
190.32 417.36 li
190.02 417.54 li
190.08 417.54 li
189.84 417.72 li
189.84 417.66 li
189.6 417.84 li
189.66 417.84 li
189.3 418.2 li
189.18 418.38 li
189.18 418.32 li
189.12 418.56 li
189.12 418.5 li
189 418.68 li
189.06 418.68 li
189 418.86 li
189 418.8 li
188.94 418.98 li
188.94 419.16 li
188.94 419.1 li
.92929 .879301 .889677 .799283 cmyk
f
grestore
gsave
193.14 424.68 mo
261.72 424.68 li
261.72 420.84 li
193.14 420.84 li
cp
clp
XBRJBG+Calibri-Italic*1 [12 0 0 -12 0 0 ]msf
193.38 421.44 mo
(x.name:x.type)
[5.20319 3.03119 6.17529 6.17529 9.49919 5.74316 3.22327 5.20319 2.75519 4.02728 5.37126 6.17529 
0 ]xsh
grestore
gsave
57.12 420.84 mo
537.9 420.84 li
537.9 510.96 li
57.12 510.96 li
cp
eclp
109.74 419.88 mo
120.3 419.58 li
120.36 420.24 li
109.74 420.6 li
cp
116.4 417.42 mo
121.02 419.88 li
116.58 422.64 li
116.34 422.7 li
116.1 422.52 li
116.1 422.28 li
116.22 422.1 li
120.18 419.64 li
120.18 420.18 li
116.1 417.96 li
115.92 417.78 li
115.98 417.54 li
116.16 417.36 li
116.4 417.42 li
.92929 .879301 .889677 .799283 cmyk
f
177.6 419.16 mo
180.24 419.1 li
180.24 419.76 li
177.6 419.82 li
cp
182.22 418.98 mo
184.92 418.92 li
184.92 419.58 li
182.28 419.7 li
cp
186.9 418.86 mo
188.16 418.8 li
188.22 419.46 li
186.96 419.52 li
cp
184.26 416.64 mo
188.88 419.1 li
184.44 421.92 li
184.2 421.92 li
183.96 421.8 li
183.96 421.56 li
184.08 421.32 li
188.04 418.86 li
188.04 419.46 li
183.96 417.24 li
183.78 417.06 li
183.84 416.76 li
184.02 416.64 li
184.26 416.64 li
f
grestore
169.5 456.78 mo
169.5 456.36 li
169.56 455.94 li
172.463 446.644 201.015 446.641 203.88 455.94 cv
203.94 456.36 li
203.94 456.78 li
203.259 466.739 173.129 467.184 169.68 458.04 cv
169.56 457.62 li
169.5 457.2 li
cp
170.16 457.14 mo
170.22 457.5 li
170.22 457.44 li
170.34 457.86 li
170.34 457.8 li
170.46 458.16 li
170.64 458.52 li
170.88 458.82 li
171.12 459.18 li
171.42 459.48 li
171.36 459.48 li
171.72 459.78 li
172.08 460.14 li
172.08 460.08 li
172.5 460.44 li
172.44 460.44 li
172.92 460.74 li
172.86 460.68 li
173.34 460.98 li
174.583 461.763 175.968 462.267 177.36 462.72 cv
178.08 462.9 li
178.02 462.9 li
178.74 463.08 li
180.24 463.38 li
180.18 463.38 li
181.74 463.62 li
183.36 463.8 li
185.04 463.92 li
184.98 463.92 li
186.72 463.98 li
191.078 463.886 196.266 463.298 200.1 460.98 cv
200.58 460.68 li
200.52 460.74 li
201 460.44 li
201.36 460.08 li
201.36 460.14 li
201.72 459.78 li
202.08 459.48 li
202.02 459.48 li
202.32 459.18 li
202.62 458.82 li
202.56 458.82 li
202.8 458.52 li
202.98 458.16 li
203.1 457.8 li
203.1 457.86 li
203.22 457.44 li
203.22 457.5 li
203.28 457.14 li
203.28 456.78 li
203.28 456.84 li
203.28 456.42 li
203.28 456.48 li
203.22 456.06 li
203.22 456.12 li
203.1 455.76 li
202.98 455.4 li
202.98 455.46 li
202.8 455.04 li
202.8 455.1 li
202.56 454.74 li
202.62 454.74 li
202.32 454.44 li
202.02 454.08 li
202.08 454.08 li
201 453.18 li
200.52 452.88 li
200.58 452.88 li
199.62 452.28 li
199.62 452.34 li
199.08 452.04 li
195.354 450.307 190.779 449.544 186.72 449.64 cv
184.98 449.64 li
185.04 449.64 li
183.36 449.76 li
181.74 449.94 li
180.18 450.18 li
180.24 450.18 li
178.74 450.54 li
178.02 450.72 li
178.08 450.72 li
177.36 450.9 li
176.439 451.112 175.256 451.667 174.36 452.04 cv
173.82 452.34 li
173.82 452.28 li
172.86 452.88 li
172.92 452.88 li
172.44 453.18 li
172.5 453.18 li
172.08 453.48 li
171.36 454.08 li
171.42 454.08 li
171.12 454.44 li
170.88 454.74 li
170.64 455.1 li
170.64 455.04 li
170.46 455.46 li
170.46 455.4 li
170.22 456.12 li
170.22 456.06 li
170.16 456.48 li
170.16 456.42 li
170.16 456.84 li
170.16 456.78 li
.92929 .879301 .889677 .799283 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
XBRJBG+Calibri-Italic*1 [12 0 0 -12 0 0 ]msf
178.26 460.14 mo
(p:T)
[6.18729 3.23528 0 ]xsh
214.56 449.64 mo
214.68 449.4 li
214.92 449.34 li
244.92 449.34 li
245.16 449.4 li
245.28 449.64 li
245.28 464.64 li
245.16 464.88 li
244.92 465 li
214.92 465 li
214.68 464.88 li
214.56 464.64 li
cp
215.22 464.64 mo
214.92 464.34 li
244.92 464.34 li
244.62 464.64 li
244.62 449.64 li
244.92 450 li
214.92 450 li
215.22 449.64 li
.92929 .879301 .889677 .799283 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
XBRJBG+Calibri-Italic*1 [12 0 0 -12 0 0 ]msf
222.66 460.5 mo
(AM)
[6.96474 0 ]xsh
203.64 456.84 mo
214.2 456.48 li
214.26 457.14 li
203.64 457.5 li
cp
210.3 454.32 mo
214.92 456.78 li
210.48 459.54 li
210.24 459.6 li
210 459.48 li
210 459.18 li
210.12 459 li
214.08 456.54 li
214.08 457.08 li
210 454.92 li
209.82 454.68 li
209.88 454.44 li
210.06 454.26 li
210.3 454.32 li
.92929 .879301 .889677 .799283 cmyk
f
79.32 457.56 mo
79.38 457.32 li
80.537 450.83 112.39 449.6 117.06 449.7 cv
119.34 449.7 li
119.4 449.88 li
119.1 449.7 li
121.14 449.7 li
171.479 450.529 171.464 464.63 121.14 465.36 cv
119.1 465.42 li
119.28 464.76 li
120.24 465.42 li
117.06 465.36 li
112.085 465.582 81.292 464.226 79.44 458.04 cv
79.38 457.8 li
cp
80.04 457.74 mo
80.04 457.68 li
80.04 457.86 li
80.1 458.04 li
80.1 457.98 li
80.16 458.16 li
80.4 458.52 li
80.4 458.46 li
80.52 458.64 li
80.7 458.82 li
80.94 459 li
80.88 459 li
81.36 459.36 li
81.66 459.48 li
81.6 459.48 li
82.26 459.84 li
82.2 459.84 li
82.92 460.2 li
92.51 463.919 106.912 464.548 117.12 464.7 cv
119.1 464.76 li
118.92 465.36 li
118.02 464.7 li
123.12 464.7 li
127.08 464.58 li
127.02 464.58 li
128.94 464.52 li
133.606 464.299 138.051 463.808 142.68 463.26 cv
144.18 463.02 li
144.12 463.02 li
145.56 462.78 li
147.962 462.418 150.416 461.804 152.76 461.16 cv
153.72 460.8 li
153.66 460.8 li
154.56 460.5 li
155.34 460.2 li
156 459.84 li
156.6 459.48 li
156.9 459.36 li
156.84 459.36 li
157.14 459.18 li
157.08 459.18 li
157.56 458.82 li
157.5 458.82 li
157.86 458.46 li
157.86 458.52 li
157.98 458.34 li
158.04 458.16 li
158.16 457.98 li
158.1 458.04 li
158.22 457.68 li
158.22 457.74 li
158.22 457.38 li
158.22 457.44 li
158.1 457.08 li
158.16 457.14 li
158.04 456.9 li
158.04 456.96 li
157.98 456.78 li
157.86 456.6 li
157.86 456.66 li
157.68 456.42 li
157.68 456.48 li
157.5 456.3 li
157.56 456.3 li
157.08 455.94 li
157.14 455.94 li
156.84 455.76 li
156.9 455.76 li
156.6 455.58 li
156.6 455.64 li
156 455.28 li
155.34 454.92 li
154.56 454.62 li
153.66 454.26 li
153.72 454.32 li
152.76 453.96 li
149.018 452.843 144.992 452.16 141.12 451.68 cv
139.5 451.44 li
139.56 451.44 li
137.88 451.26 li
132.286 450.758 126.763 450.404 121.14 450.42 cv
118.92 450.36 li
118.8 450.18 li
119.1 450.36 li
117.06 450.36 li
117.12 450.36 li
115.08 450.42 li
105.475 450.674 94.777 451.311 85.5 453.96 cv
84.54 454.32 li
84.54 454.26 li
83.7 454.62 li
82.92 454.92 li
82.2 455.28 li
82.26 455.28 li
81.6 455.64 li
81.66 455.58 li
81.36 455.76 li
80.88 456.12 li
80.94 456.12 li
80.7 456.3 li
80.52 456.48 li
80.58 456.42 li
80.4 456.66 li
80.4 456.6 li
80.16 456.96 li
80.16 456.9 li
80.1 457.14 li
80.1 457.08 li
80.04 457.26 li
80.04 457.44 li
80.04 457.38 li
80.04 457.56 li
f
1 /0 /CSD get_res sepcs
1 sep
XBRJBG+Calibri-Italic*1 [12 0 0 -12 0 0 ]msf
84.48 459.9 mo
(x.name:x.type)
[5.20319 3.03118 6.17529 6.17529 9.49921 5.74316 3.22327 5.20317 2.75519 4.02728 5.37128 6.17529 
0 ]xsh
158.52 457.2 mo
161.22 457.08 li
161.22 457.74 li
158.58 457.86 li
cp
163.2 457.02 mo
165.9 456.96 li
165.9 457.62 li
163.26 457.68 li
cp
167.88 456.9 mo
169.14 456.84 li
169.2 457.5 li
167.94 457.56 li
cp
165.24 454.68 mo
169.8 457.14 li
165.42 459.9 li
165.18 459.96 li
164.94 459.84 li
164.94 459.54 li
165.06 459.36 li
168.96 456.9 li
169.02 457.5 li
164.94 455.28 li
164.76 455.04 li
164.82 454.8 li
165 454.62 li
165.24 454.68 li
.92929 .879301 .889677 .799283 cmyk
f
169.5 486.84 mo
169.5 486.42 li
169.56 486 li
172.27 476.683 201.23 476.699 203.88 486 cv
203.94 486.42 li
203.94 486.84 li
202.871 497.007 173.047 497.03 169.68 488.1 cv
169.56 487.68 li
169.5 487.26 li
cp
170.16 487.2 mo
170.16 487.14 li
170.22 487.56 li
170.22 487.5 li
170.46 488.22 li
170.64 488.58 li
170.64 488.52 li
171.12 489.24 li
171.12 489.18 li
171.42 489.54 li
171.36 489.54 li
172.08 490.14 li
172.5 490.44 li
172.44 490.44 li
172.92 490.74 li
172.86 490.74 li
173.34 491.04 li
174.279 491.638 176.281 492.422 177.36 492.72 cv
178.08 492.96 li
178.02 492.96 li
178.74 493.14 li
180.24 493.44 li
180.18 493.44 li
181.74 493.68 li
183.36 493.86 li
185.04 493.98 li
184.98 493.98 li
186.72 494.04 li
191.312 493.962 196.048 493.32 200.1 491.04 cv
200.58 490.74 li
200.52 490.74 li
201 490.44 li
202.08 489.54 li
202.02 489.54 li
202.32 489.18 li
202.32 489.24 li
202.62 488.88 li
202.56 488.88 li
202.8 488.52 li
202.8 488.58 li
202.98 488.22 li
203.22 487.5 li
203.22 487.56 li
203.28 487.14 li
203.28 487.2 li
203.28 486.48 li
203.22 486.12 li
203.22 486.18 li
203.1 485.76 li
203.1 485.82 li
202.98 485.46 li
202.8 485.1 li
202.8 485.16 li
202.56 484.8 li
202.62 484.8 li
202.32 484.44 li
202.32 484.5 li
202.02 484.14 li
202.08 484.14 li
201.72 483.84 li
201.36 483.48 li
201.36 483.54 li
201 483.18 li
201 483.24 li
200.52 482.88 li
200.58 482.94 li
199.62 482.34 li
199.08 482.1 li
198.54 481.8 li
198.54 481.86 li
197.94 481.56 li
197.34 481.32 li
197.34 481.38 li
196.74 481.14 li
193.732 480.051 189.892 479.711 186.72 479.64 cv
184.98 479.7 li
185.04 479.7 li
183.36 479.82 li
181.74 480 li
180.18 480.24 li
180.24 480.24 li
178.74 480.54 li
178.02 480.72 li
178.08 480.72 li
177.36 480.9 li
176.7 481.14 li
176.1 481.38 li
176.1 481.32 li
175.5 481.56 li
174.9 481.86 li
174.9 481.8 li
174.36 482.1 li
173.82 482.34 li
172.86 482.94 li
172.92 482.88 li
172.44 483.24 li
172.5 483.18 li
172.08 483.54 li
172.08 483.48 li
171.72 483.84 li
171.36 484.14 li
171.42 484.14 li
171.12 484.5 li
171.12 484.44 li
170.64 485.16 li
170.64 485.1 li
170.46 485.46 li
170.34 485.82 li
170.34 485.76 li
170.22 486.18 li
170.22 486.12 li
170.16 486.48 li
170.16 486.84 li
f
214.56 479.7 mo
214.68 479.46 li
214.92 479.34 li
244.92 479.34 li
245.16 479.46 li
245.28 479.7 li
245.28 494.7 li
245.16 494.94 li
244.92 495.06 li
214.92 495.06 li
214.68 494.94 li
214.56 494.7 li
cp
215.22 494.7 mo
214.92 494.4 li
244.92 494.4 li
244.62 494.7 li
244.62 479.7 li
244.92 480 li
214.92 480 li
215.22 479.7 li
f
1 /0 /CSD get_res sepcs
1 sep
XBRJBG+Calibri-Italic*1 [12 0 0 -12 0 0 ]msf
219.66 490.8 mo
(AM)
[6.96474 0 ]xsh
XBRJBG+Calibri-Italic*1 [8.04 0 0 -8.04 0 0 ]msf
236.88 493.74 mo
(1)sh
203.64 486.84 mo
214.2 486.54 li
214.26 487.2 li
203.64 487.56 li
cp
210.3 484.38 mo
214.92 486.84 li
210.48 489.6 li
210.24 489.66 li
210 489.48 li
210 489.24 li
210.12 489.06 li
214.08 486.6 li
214.08 487.14 li
210 484.92 li
209.82 484.74 li
209.88 484.5 li
210.06 484.32 li
210.3 484.38 li
.92929 .879301 .889677 .799283 cmyk
f
79.32 487.62 mo
79.38 487.38 li
79.5 486.9 li
81.135 482.79 96.615 481.035 100.26 480.66 cv
102 480.48 li
103.74 480.36 li
118.106 479.286 134.205 479.473 148.38 482.22 cv
149.64 482.52 li
150.78 482.76 li
151.92 483.06 li
152.94 483.36 li
155.037 484.062 161.204 486.183 157.98 489.36 cv
157.5 489.72 li
157.26 489.96 li
154.596 491.522 151.388 492.365 148.38 492.96 cv
147.06 493.26 li
145.68 493.5 li
139.508 494.501 133.325 495.035 127.08 495.3 cv
125.16 495.36 li
123.18 495.42 li
119.1 495.42 li
119.28 494.82 li
120.24 495.42 li
117.06 495.42 li
112.024 495.608 81.381 494.287 79.44 488.1 cv
79.38 487.86 li
cp
80.04 487.8 mo
80.04 487.74 li
80.04 487.92 li
80.04 487.86 li
80.1 488.1 li
80.1 488.04 li
80.16 488.22 li
80.28 488.4 li
80.28 488.34 li
80.52 488.7 li
80.7 488.88 li
80.94 489.06 li
80.88 489.06 li
81.12 489.24 li
81.12 489.18 li
81.36 489.36 li
81.66 489.54 li
81.6 489.54 li
82.26 489.9 li
82.2 489.9 li
82.92 490.2 li
92.374 493.997 107.006 494.567 117.12 494.76 cv
119.1 494.76 li
118.92 495.36 li
118.02 494.76 li
121.14 494.76 li
123.12 494.7 li
125.1 494.7 li
127.08 494.64 li
127.02 494.64 li
128.94 494.52 li
133.393 494.365 138.263 493.899 142.68 493.26 cv
144.18 493.08 li
144.12 493.08 li
145.56 492.84 li
147.964 492.419 150.428 491.887 152.76 491.16 cv
153.72 490.86 li
153.66 490.86 li
154.56 490.56 li
155.34 490.2 li
156 489.9 li
156.9 489.36 li
156.84 489.36 li
157.14 489.18 li
157.08 489.24 li
157.56 488.88 li
157.5 488.88 li
157.86 488.52 li
157.98 488.34 li
157.98 488.4 li
158.04 488.22 li
158.16 488.04 li
158.1 488.1 li
158.16 487.86 li
158.16 487.92 li
158.22 487.74 li
158.22 487.8 li
158.22 487.56 li
158.22 487.62 li
158.22 487.44 li
158.22 487.5 li
158.16 487.26 li
158.16 487.32 li
158.1 487.14 li
158.16 487.14 li
158.04 486.96 li
158.04 487.02 li
157.98 486.84 li
157.86 486.66 li
157.5 486.3 li
157.56 486.36 li
157.08 486 li
157.14 486 li
156.84 485.82 li
156.9 485.82 li
156 485.28 li
156 485.34 li
155.34 484.98 li
154.56 484.68 li
153.66 484.32 li
153.72 484.32 li
152.76 484.02 li
148.974 482.824 145.032 482.277 141.12 481.68 cv
139.5 481.5 li
139.56 481.5 li
137.88 481.32 li
131.639 480.724 125.368 480.417 119.1 480.42 cv
117.06 480.42 li
117.12 480.42 li
115.08 480.48 li
105.374 480.771 92.007 481.351 82.92 484.98 cv
82.2 485.34 li
82.26 485.28 li
81.6 485.64 li
81.66 485.64 li
81.36 485.82 li
80.88 486.18 li
80.94 486.18 li
80.7 486.36 li
80.7 486.3 li
80.52 486.48 li
80.16 487.02 li
80.16 486.96 li
80.1 487.14 li
80.04 487.32 li
80.04 487.26 li
80.04 487.5 li
80.04 487.44 li
80.04 487.62 li
80.04 487.56 li
f
1 /0 /CSD get_res sepcs
1 sep
XBRJBG+Calibri-Italic*1 [12 0 0 -12 0 0 ]msf
84.48 489.9 mo
(x.name:x.type)
[5.20319 3.03118 6.17529 6.17529 9.49921 5.74316 3.22327 5.20317 2.75519 4.02728 5.37128 6.17529 
0 ]xsh
158.52 487.2 mo
161.22 487.14 li
161.22 487.8 li
158.58 487.92 li
cp
163.2 487.08 mo
165.9 486.96 li
165.9 487.68 li
163.26 487.74 li
cp
167.88 486.9 mo
169.14 486.9 li
169.2 487.56 li
167.94 487.62 li
cp
165.24 484.74 mo
169.8 487.2 li
165.42 489.96 li
165.18 490.02 li
164.94 489.84 li
164.94 489.6 li
165.06 489.42 li
168.96 486.96 li
169.02 487.5 li
164.94 485.28 li
164.76 485.1 li
164.82 484.86 li
165 484.68 li
165.24 484.74 li
.92929 .879301 .889677 .799283 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
XBRJBG+Calibri-Italic*1 [12 0 0 -12 0 0 ]msf
175.98 489.18 mo
(p:T)
[6.18729 3.23528 0 ]xsh
XBRJBG+Calibri-Italic*1 [8.04 0 0 -8.04 0 0 ]msf
191.22 492.12 mo
(1)sh
255.9 486.84 mo
255.9 486.36 li
256.02 485.94 li
260.396 476.716 308.41 476.719 312.72 485.94 cv
312.84 486.36 li
312.9 486.84 li
312.84 487.26 li
311.686 492.713 294.321 494.398 290.1 494.52 cv
288.66 494.58 li
287.28 494.64 li
280.358 494.907 261.707 494.195 256.5 488.58 cv
256.02 487.74 li
255.9 487.26 li
cp
256.56 487.2 mo
256.56 487.14 li
256.68 487.5 li
256.68 487.44 li
256.86 487.86 li
256.8 487.8 li
257.04 488.16 li
257.34 488.52 li
257.34 488.46 li
257.7 488.82 li
258.12 489.18 li
258.12 489.12 li
258.6 489.48 li
262.281 491.758 267.994 492.663 272.22 493.26 cv
273.48 493.44 li
273.42 493.44 li
276.06 493.68 li
276 493.68 li
277.38 493.8 li
278.7 493.86 li
280.08 493.92 li
281.52 493.98 li
284.4 494.04 li
287.28 493.98 li
287.22 493.98 li
288.66 493.92 li
290.937 493.869 293.061 493.663 295.32 493.44 cv
296.58 493.26 li
296.52 493.26 li
297.78 493.08 li
301.2 492.54 li
301.14 492.54 li
302.22 492.3 li
304.904 491.675 307.788 490.967 310.14 489.48 cv
310.68 489.12 li
310.62 489.18 li
311.1 488.82 li
311.04 488.82 li
311.46 488.46 li
311.4 488.52 li
311.7 488.16 li
311.94 487.8 li
311.94 487.86 li
312.12 487.44 li
312.06 487.5 li
312.18 487.14 li
312.18 487.2 li
312.24 486.78 li
312.24 486.84 li
312.18 486.48 li
312.18 486.54 li
312.06 486.18 li
312.12 486.18 li
311.94 485.82 li
311.94 485.88 li
311.7 485.52 li
311.4 485.16 li
311.46 485.22 li
311.04 484.86 li
311.1 484.86 li
310.62 484.5 li
310.68 484.5 li
310.14 484.2 li
309.6 483.84 li
309.6 483.9 li
309 483.54 li
306.869 482.516 304.517 481.9 302.22 481.38 cv
301.14 481.14 li
301.2 481.14 li
300.06 480.96 li
298.92 480.72 li
297.78 480.54 li
296.52 480.42 li
296.58 480.42 li
295.32 480.24 li
293.061 480.017 290.937 479.811 288.66 479.76 cv
287.22 479.7 li
287.28 479.7 li
284.4 479.64 li
281.52 479.7 li
280.08 479.76 li
278.7 479.82 li
277.38 479.88 li
276 480 li
276.06 480 li
273.42 480.24 li
273.48 480.24 li
272.22 480.42 li
268.367 480.85 263.273 481.888 259.74 483.54 cv
259.14 483.9 li
259.14 483.84 li
258.6 484.2 li
258.12 484.5 li
257.7 484.86 li
257.34 485.22 li
257.34 485.16 li
257.04 485.52 li
256.8 485.88 li
256.86 485.82 li
256.68 486.18 li
256.56 486.54 li
256.56 486.48 li
256.56 486.84 li
256.56 486.78 li
.92929 .879301 .889677 .799283 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: QJJAAA+Calibri-Italic AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
XBRJBG+Calibri-Italic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two <1C60D8A8C9B7A0860A58EB1C020D046CEDACE5EB8234BC55A95992AAEE
08D281664EB9969E123400A886F11805F4C6934891FEB99CD13FA9FC26818DD3
1DC86F35BE6478DCF3541C62DADF9AD7E0EFF8E183DEAA316E7F6B93606826A2
857B050C944497E20515EFFBD731F0C52DF56688CC6A2A96709C389C12290464
8D95DF99599D21EB4C2D8C07E66411C5B511366347158CEA8210E5500D8BA1AC
0AA12D1E3B536619B76F42DA7096F4D791305B50167457EAA6178763B21CECAC
B65D16F629A81599CC4E8B95C901A809C967822EB39B1E78C371FD69F6DF3984
974377C02AD885A688C38CC045CD7A2955511D86E6250A3FF268BC076EA8C43A
386DE37B577D2A0F16BD547B1F74D8A9E091BBCBFAA2BF97C2390ACFC4B11CA7
F180F4B3F3516337A1B3E3B46B2D79B99FE9762E99DD50533028555F4FC8C3A2
AEA5655406F6D721EF535B7AE5877872D46DAAEFCEDC8EBEE75960E1D646DA4A
5EED1EA670FEB9272BEF391544CAA71F3B6B6DD37D1352749C384068DA59ECA4
3A572D3C738DC7D74C0791AF> |-
systemdict /gcheck known {setglobal} if end {end} if
end
XBRJBG+Calibri-Italic /Encoding get
dup 50 /two put
pop
%ADOEndSubsetFont
/XBRJBG+Calibri-Italic*1 
[32{/.notdef}rp /ellipsis 13{/.notdef}rp /period /.notdef /zero /one /two 
7{/.notdef}rp /colon 6{/.notdef}rp /A 11{/.notdef}rp /M 6{/.notdef}rp /T 
12{/.notdef}rp /a /.notdef /c /.notdef /e /f 2{/.notdef}rp 
/i 2{/.notdef}rp /l /m /n /.notdef /p /.notdef 
/r /.notdef /t /u /v /.notdef /x /y 
/z 133{/.notdef}rp]
XBRJBG+Calibri-Italic nf
XBRJBG+Calibri-Italic*1 [12 0 0 -12 0 0 ]msf
270.3 490.14 mo
(null:T)
[6.18008 6.18008 2.76007 2.76004 3.22806 0 ]xsh
XBRJBG+Calibri-Italic*1 [8.04 0 0 -8.04 0 0 ]msf
297.24 493.08 mo
(2)sh
244.92 486.9 mo
255.54 486.54 li
255.54 487.2 li
244.98 487.56 li
cp
251.64 484.38 mo
256.2 486.9 li
251.82 489.66 li
251.52 489.66 li
251.34 489.54 li
251.28 489.3 li
251.46 489.06 li
255.36 486.6 li
255.42 487.2 li
251.34 484.98 li
251.16 484.8 li
251.16 484.5 li
251.4 484.38 li
251.64 484.38 li
.92929 .879301 .889677 .799283 cmyk
f
gsave
57.12 420.84 mo
537.9 420.84 li
537.9 510.96 li
57.12 510.96 li
cp
eclp
267.12 509.34 mo
267.18 508.92 li
267.24 508.5 li
270.026 499.219 298.785 499.245 301.5 508.5 cv
301.62 508.92 li
301.62 509.34 li
300.758 519.385 270.711 519.722 267.36 510.6 cv
267.24 510.18 li
267.18 509.76 li
cp
267.84 509.76 mo
267.84 509.7 li
267.9 510.06 li
268.02 510.42 li
267.96 510.36 li
268.14 510.78 li
268.14 510.72 li
268.5 511.44 li
268.5 511.38 li
268.74 511.74 li
269.4 512.4 li
269.34 512.34 li
269.76 512.7 li
269.7 512.7 li
270.54 513.3 li
271.02 513.6 li
271.02 513.54 li
271.5 513.84 li
273.929 515.177 276.696 515.794 279.42 516.18 cv
281.04 516.42 li
280.98 516.36 li
282.66 516.48 li
284.4 516.54 li
286.08 516.48 li
287.76 516.36 li
287.76 516.42 li
289.38 516.18 li
290.88 515.94 li
292.38 515.64 li
293.04 515.46 li
293.76 515.28 li
293.7 515.28 li
294.36 515.04 li
295.02 514.86 li
296.22 514.38 li
296.16 514.38 li
296.76 514.14 li
297.24 513.84 li
297.78 513.54 li
297.72 513.6 li
298.2 513.3 li
299.04 512.7 li
299.4 512.34 li
299.4 512.4 li
299.7 512.04 li
300 511.74 li
300.24 511.38 li
300.24 511.44 li
300.48 511.08 li
300.66 510.72 li
300.6 510.78 li
300.78 510.36 li
300.78 510.42 li
300.9 510.06 li
300.84 510.06 li
300.9 509.7 li
300.9 509.76 li
300.96 509.34 li
300.96 509.4 li
300.9 508.98 li
300.9 509.04 li
300.84 508.68 li
300.9 508.68 li
300.78 508.32 li
300.6 507.96 li
300.66 508.02 li
300.48 507.66 li
300.24 507.3 li
300.24 507.36 li
300 507 li
299.7 506.64 li
299.7 506.7 li
299.4 506.34 li
299.04 506.04 li
298.2 505.44 li
297.72 505.14 li
297.78 505.14 li
297.24 504.9 li
297.3 504.9 li
296.76 504.6 li
296.16 504.36 li
296.22 504.36 li
295.02 503.88 li
294.36 503.64 li
294.42 503.64 li
293.7 503.46 li
293.76 503.46 li
293.04 503.28 li
289.331 502.291 286.48 502.106 282.66 502.2 cv
280.98 502.32 li
281.04 502.32 li
279.42 502.5 li
276.059 503.106 272.956 503.742 270.12 505.74 cv
269.7 506.04 li
269.76 506.04 li
269.34 506.34 li
269.4 506.34 li
269.04 506.7 li
269.04 506.64 li
268.74 507 li
268.5 507.36 li
268.5 507.3 li
268.14 508.02 li
268.14 507.96 li
267.96 508.32 li
268.02 508.32 li
267.9 508.68 li
267.84 509.04 li
267.84 508.98 li
267.84 509.4 li
267.84 509.34 li
f
214.56 502.2 mo
214.68 501.96 li
214.92 501.9 li
244.92 501.9 li
245.16 501.96 li
245.28 502.2 li
245.28 517.26 li
245.16 517.5 li
244.92 517.56 li
214.92 517.56 li
214.68 517.5 li
214.56 517.26 li
cp
215.22 517.26 mo
214.92 516.9 li
244.92 516.9 li
244.62 517.26 li
244.62 502.2 li
244.92 502.56 li
214.92 502.56 li
215.22 502.2 li
f
grestore
gsave
219.3 510.96 mo
236.88 510.96 li
236.88 500.64 li
219.3 500.64 li
cp
clp
1 /0 /CSD get_res sepcs
1 sep
XBRJBG+Calibri-Italic*1 [12 0 0 -12 0 0 ]msf
219.66 512.04 mo
(AM)
[6.96474 0 ]xsh
grestore
gsave
236.88 510.96 mo
240.96 510.96 li
240.96 507.3 li
236.88 507.3 li
cp
clp
1 /0 /CSD get_res sepcs
1 sep
XBRJBG+Calibri-Italic*1 [8.04 0 0 -8.04 0 0 ]msf
236.88 514.98 mo
(2)sh
grestore
gsave
57.12 420.84 mo
537.9 420.84 li
537.9 510.96 li
57.12 510.96 li
cp
eclp
267.48 509.7 mo
245.58 510.06 li
245.58 509.4 li
267.48 509.04 li
cp
249.48 512.28 mo
244.92 509.7 li
249.42 507.06 li
249.66 507 li
249.84 507.12 li
249.9 507.42 li
249.72 507.6 li
245.76 510 li
245.76 509.4 li
249.84 511.68 li
249.96 511.92 li
249.96 512.16 li
249.72 512.34 li
249.48 512.28 li
f
grestore
gsave
273.54 510.96 mo
289.74 510.96 li
289.74 500.34 li
273.54 500.34 li
cp
clp
1 /0 /CSD get_res sepcs
1 sep
XBRJBG+Calibri-Italic*1 [12 0 0 -12 0 0 ]msf
273.6 511.74 mo
(p:T)
[6.18729 3.23526 0 ]xsh
grestore
gsave
288.84 510.96 mo
292.92 510.96 li
292.92 507 li
288.84 507 li
cp
clp
1 /0 /CSD get_res sepcs
1 sep
XBRJBG+Calibri-Italic*1 [8.04 0 0 -8.04 0 0 ]msf
288.84 514.68 mo
(2)sh
grestore
gsave
57.12 420.84 mo
537.9 420.84 li
537.9 510.96 li
57.12 510.96 li
cp
eclp
135.66 510 mo
135.72 509.58 li
135.84 509.1 li
140.38 499.869 188.03 499.888 192.54 509.1 cv
192.66 509.58 li
192.72 510 li
192.66 510.48 li
191.267 515.915 174.21 517.575 169.86 517.68 cv
167.1 517.8 li
160.193 518.064 141.481 517.384 136.32 511.74 cv
135.84 510.9 li
135.72 510.48 li
cp
136.38 510.36 mo
136.38 510.3 li
136.62 511.02 li
136.62 510.96 li
136.86 511.32 li
137.16 511.68 li
137.16 511.62 li
137.52 511.98 li
137.94 512.34 li
137.94 512.28 li
138.42 512.64 li
138.96 513 li
138.96 512.94 li
139.56 513.3 li
140.22 513.6 li
140.94 513.9 li
141.72 514.2 li
142.56 514.44 li
143.46 514.74 li
143.4 514.74 li
144.36 514.98 li
146.158 515.475 147.83 515.754 149.64 516.12 cv
150.84 516.3 li
150.78 516.3 li
152.04 516.42 li
155.099 516.881 158.251 517.03 161.34 517.14 cv
164.22 517.2 li
164.16 517.2 li
167.04 517.14 li
168.48 517.08 li
171.24 516.96 li
171.18 516.96 li
172.56 516.84 li
173.82 516.72 li
175.14 516.6 li
176.34 516.42 li
177.6 516.3 li
177.54 516.3 li
178.74 516.12 li
180.55 515.754 182.222 515.475 184.02 514.98 cv
184.98 514.74 li
184.92 514.74 li
185.82 514.44 li
186.66 514.2 li
187.44 513.9 li
188.16 513.6 li
188.82 513.3 li
189.42 512.94 li
189.42 513 li
189.96 512.64 li
190.44 512.28 li
190.44 512.34 li
190.86 511.98 li
191.22 511.62 li
191.22 511.68 li
191.52 511.32 li
191.76 510.96 li
191.76 511.02 li
191.94 510.6 li
191.88 510.66 li
192 510.3 li
192 510.36 li
192 510 li
192 510.06 li
192 509.64 li
192 509.7 li
191.88 509.34 li
191.94 509.4 li
191.76 508.98 li
191.76 509.04 li
191.52 508.68 li
191.22 508.32 li
191.22 508.38 li
190.86 508.02 li
190.44 507.66 li
190.44 507.72 li
189.96 507.36 li
188.673 506.573 187.285 505.937 185.82 505.56 cv
184.92 505.26 li
184.98 505.26 li
184.02 505.02 li
182.231 504.555 180.577 504.187 178.74 503.94 cv
177.54 503.76 li
177.6 503.76 li
176.34 503.58 li
175.14 503.4 li
173.82 503.28 li
172.56 503.16 li
171.18 503.04 li
171.24 503.04 li
168.48 502.92 li
167.04 502.86 li
164.16 502.8 li
164.22 502.8 li
161.34 502.86 li
158.251 502.97 155.1 503.119 152.04 503.58 cv
150.78 503.7 li
150.84 503.7 li
149.64 503.94 li
147.803 504.187 146.149 504.555 144.36 505.02 cv
143.4 505.26 li
143.46 505.26 li
142.56 505.56 li
141.095 505.937 139.707 506.573 138.42 507.36 cv
137.94 507.72 li
137.94 507.66 li
137.52 508.02 li
137.16 508.38 li
137.16 508.32 li
136.86 508.68 li
136.62 509.04 li
136.62 508.98 li
136.44 509.4 li
136.5 509.34 li
136.38 509.7 li
136.38 509.64 li
136.38 510.06 li
136.38 510 li
f
grestore
gsave
150.12 510.96 mo
177.96 510.96 li
177.96 501.96 li
150.12 501.96 li
cp
clp
1 /0 /CSD get_res sepcs
1 sep
XBRJBG+Calibri-Italic*1 [12 0 0 -12 0 0 ]msf
150.12 513.36 mo
(null:T)
[6.18008 6.1801 2.76004 2.76006 3.22806 0 ]xsh
grestore
gsave
57.12 420.84 mo
537.9 420.84 li
537.9 510.96 li
57.12 510.96 li
cp
eclp
214.92 510.54 mo
193.02 510.48 li
193.02 509.76 li
214.92 509.88 li
cp
196.86 512.76 mo
192.36 510.12 li
196.86 507.54 li
197.1 507.48 li
197.34 507.66 li
197.34 507.9 li
197.22 508.08 li
193.2 510.42 li
193.2 509.82 li
197.16 512.16 li
197.34 512.4 li
197.28 512.64 li
197.1 512.82 li
196.86 512.76 li
f
grestore
283.44 494.4 mo
284.1 494.4 li
284.1 497.04 li
283.44 497.04 li
cp
284.1 494.4 mo
cp
283.38 499.08 mo
284.04 499.08 li
284.04 501.24 li
283.38 501.24 li
cp
284.04 499.08 mo
cp
286.38 497.4 mo
283.68 501.9 li
281.1 497.34 li
281.1 497.1 li
281.28 496.92 li
281.52 496.86 li
281.7 497.04 li
283.98 501.06 li
283.44 501.06 li
285.78 497.1 li
286.02 496.92 li
286.26 496.98 li
286.44 497.16 li
286.38 497.4 li
f
421.44 492 mo
428.34 491.88 li
428.34 492.6 li
421.5 492.66 li
cp
424.44 489.66 mo
429 492.24 li
424.5 494.94 li
424.26 494.94 li
424.08 494.82 li
424.02 494.58 li
424.2 494.34 li
428.16 491.94 li
428.16 492.54 li
424.14 490.26 li
423.96 490.02 li
424.02 489.78 li
424.2 489.66 li
424.44 489.66 li
f
459.06 491.88 mo
469.62 492.12 li
469.62 492.78 li
459 492.54 li
cp
465.84 489.78 mo
470.28 492.48 li
465.72 495 li
465.48 495.06 li
465.3 494.88 li
465.24 494.64 li
465.42 494.4 li
469.5 492.18 li
469.44 492.72 li
465.48 490.32 li
465.36 490.14 li
465.42 489.84 li
465.6 489.72 li
465.84 489.78 li
f
469.98 492.48 mo
469.98 492 li
470.1 491.58 li
474.615 482.355 522.358 482.352 526.8 491.58 cv
526.92 492 li
526.98 492.48 li
526.92 492.9 li
525.815 498.33 508.356 500.083 504.18 500.16 cv
502.74 500.22 li
501.36 500.28 li
494.36 500.542 475.853 499.862 470.58 494.22 cv
470.1 493.38 li
469.98 492.9 li
cp
470.64 492.84 mo
470.64 492.78 li
470.76 493.14 li
470.76 493.08 li
470.94 493.5 li
470.88 493.44 li
471.12 493.8 li
471.42 494.16 li
471.42 494.1 li
471.78 494.46 li
472.2 494.82 li
472.2 494.76 li
472.68 495.12 li
473.22 495.42 li
473.88 495.78 li
473.82 495.78 li
474.54 496.08 li
474.48 496.08 li
475.26 496.38 li
475.2 496.38 li
475.98 496.68 li
487.699 500.693 512.522 501.056 523.68 495.42 cv
524.28 495.12 li
524.22 495.12 li
524.76 494.76 li
524.7 494.82 li
525.18 494.46 li
525.12 494.46 li
525.54 494.1 li
525.48 494.16 li
525.78 493.8 li
526.02 493.44 li
526.02 493.5 li
526.2 493.08 li
526.14 493.14 li
526.26 492.78 li
526.26 492.84 li
526.32 492.42 li
526.32 492.54 li
526.26 492.12 li
526.26 492.18 li
526.14 491.82 li
526.2 491.88 li
526.02 491.46 li
526.02 491.52 li
525.78 491.16 li
525.48 490.8 li
525.54 490.86 li
525.12 490.5 li
525.18 490.5 li
524.7 490.14 li
524.76 490.2 li
524.22 489.84 li
524.28 489.84 li
523.68 489.54 li
512.522 483.904 487.699 484.267 475.98 488.28 cv
475.2 488.58 li
475.26 488.58 li
474.48 488.88 li
474.54 488.88 li
473.82 489.18 li
473.88 489.18 li
473.22 489.54 li
472.68 489.84 li
472.2 490.2 li
472.2 490.14 li
471.78 490.5 li
471.42 490.86 li
471.42 490.8 li
471.12 491.16 li
470.88 491.52 li
470.94 491.46 li
470.76 491.88 li
470.76 491.82 li
470.64 492.18 li
470.64 492.12 li
470.64 492.54 li
470.64 492.42 li
f
1 /0 /CSD get_res sepcs
1 sep
XBRJBG+Calibri-Italic*1 [12 0 0 -12 0 0 ]msf
485.64 495.84 mo
(null:T)
[6.18008 6.18008 2.76007 2.76004 3.22806 0 ]xsh
XBRJBG+Calibri-Italic*1 [8.04 0 0 -8.04 0 0 ]msf
512.58 498.78 mo
(0)sh
428.64 484.74 mo
428.76 484.5 li
429 484.38 li
459 484.38 li
459.24 484.5 li
459.36 484.74 li
459.36 499.74 li
459.24 499.98 li
459 500.1 li
429 500.1 li
428.76 499.98 li
428.64 499.74 li
cp
429.3 499.74 mo
429 499.38 li
459 499.38 li
458.7 499.74 li
458.7 484.74 li
459 485.04 li
429 485.04 li
429.3 484.74 li
.92929 .879301 .889677 .799283 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: QJJAAA+Calibri-Italic AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
XBRJBG+Calibri-Italic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g <1C60D8A8C9B7B9B9DE7286331F260FB1B0B0DC37101824E583DDA7005B40
83150C3A7505CF5D2D1ED70CFA713649EE13DD498A28C293008381488EA508D4
849D61C80CA23B13CA170F7F37140D60CDF2EADAB5E4A59069F133ACA2E95EE9
10A2D95C3F6CBEC058A921C32688890DEF09DD3194B884D04F5B9E5478C2F134
1607B6741A59209D90E0CFC1083DA35E85619054B082EABEF991083722C9FD43
85C8AD0CF03537063424E5FDB56D7F3080D48CBFF34D355AFC65C705321ABD17
5E6C419F7FADDAF473AEECBF3BB2777FE2CB6DB61D18F13F455C1F9FE65D7BE0
8BE9E330C75CBC8DCD46437C1191A29B1B291D01B1C592E33242C5C4330EBA21
881355C650D80BF11C11A4DCD5E5FBB0A106AB3738F1633AF95496C8E0731D21
1A07D5B393A53278570982EED35DE1556400FEE7E39DA13CAEAB3176E5B861D1
29549AACFEDCB20F1EABEF3373572126CFEDA520DC7D3D32FF1817832D2F5B38
E7DC1D539F3415FB16F3D7A748C2C27EAF29BC4B22DF1AF600188FEEB95FB7E1
7298188756C006F2B63460CD3803BB2F71622AAE4A2B59FA77F2E4F57AD2901E
50D48E5F07DF02B5E81544F00936717BA806C7AE15081D761A740D2D9213A84E
23629438A21C6FDD3F763D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
XBRJBG+Calibri-Italic /Encoding get
dup 103 /g put
pop
%ADOEndSubsetFont
/XBRJBG+Calibri-Italic*1 
[32{/.notdef}rp /ellipsis 13{/.notdef}rp /period /.notdef /zero /one /two 
7{/.notdef}rp /colon 6{/.notdef}rp /A 11{/.notdef}rp /M 6{/.notdef}rp /T 
12{/.notdef}rp /a /.notdef /c /.notdef /e /f /g 
/.notdef /i 2{/.notdef}rp /l /m /n /.notdef /p 
/.notdef /r /.notdef /t /u /v /.notdef /x 
/y /z 133{/.notdef}rp]
XBRJBG+Calibri-Italic nf
XBRJBG+Calibri-Italic*1 [12 0 0 -12 0 0 ]msf
433.74 494.58 mo
(getx)
[6.1633 5.73114 4.01529 0 ]xsh
353.94 502.02 mo
422.34 502.02 li
422.34 482.58 li
353.94 482.58 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
XBRJBG+Calibri-Italic*1 [12 0 0 -12 0 0 ]msf
358.68 496.2 mo
(receiver:T)
[4.13641 5.75638 4.92001 5.76596 2.76843 5.37241 5.75635 4.13641 3.23648 0 ]xsh
XBRJBG+Calibri-Italic*1 [8.04 0 0 -8.04 0 0 ]msf
406.32 499.14 mo
(1)sh
347.76 492.3 mo
347.76 492.12 li
349.099 485.392 380.009 484.214 384.96 484.5 cv
385.08 484.62 li
384.78 484.5 li
388.56 484.5 li
390.36 484.56 li
400.063 485.186 410.429 485.316 419.4 489.48 cv
420 489.84 li
420.54 490.2 li
424.572 493.651 417.936 496.06 415.32 496.86 cv
414.24 497.16 li
413.16 497.4 li
412.02 497.7 li
410.82 497.94 li
399.009 500.314 385.861 500.497 373.86 499.86 cv
372.12 499.74 li
370.5 499.56 li
366.206 499.265 350.337 497.567 348 493.26 cv
347.88 493.02 li
347.82 492.78 li
347.76 492.54 li
cp
348.42 492.48 mo
348.48 492.66 li
348.48 492.6 li
348.54 492.78 li
348.6 492.96 li
348.72 493.14 li
348.66 493.08 li
348.78 493.26 li
349.08 493.62 li
349.5 493.98 li
349.44 493.92 li
349.92 494.28 li
350.52 494.64 li
350.46 494.64 li
351.12 494.94 li
351.84 495.3 li
352.68 495.6 li
352.62 495.6 li
353.52 495.9 li
363.548 499.053 376.19 499.495 386.64 499.5 cv
388.56 499.44 li
388.5 499.44 li
390.36 499.44 li
397.396 499.097 404.973 498.648 411.84 497.04 cv
413.04 496.8 li
412.98 496.8 li
414.12 496.5 li
415.14 496.2 li
415.08 496.2 li
416.04 495.9 li
416.94 495.6 li
417.72 495.3 li
418.44 494.94 li
419.1 494.64 li
419.04 494.64 li
419.64 494.28 li
420.12 493.92 li
420.12 493.98 li
420.48 493.62 li
420.78 493.26 li
420.9 493.08 li
420.9 493.14 li
421.02 492.9 li
420.96 492.96 li
421.08 492.78 li
421.02 492.78 li
421.08 492.6 li
421.08 492.66 li
421.14 492.48 li
421.14 492.3 li
421.14 492.36 li
421.14 492.18 li
421.08 492 li
421.08 492.06 li
421.02 491.88 li
421.08 491.88 li
420.96 491.7 li
420.9 491.52 li
420.9 491.58 li
420.78 491.4 li
420.48 491.04 li
420.12 490.68 li
420.12 490.74 li
419.64 490.38 li
419.04 490.02 li
419.1 490.02 li
418.44 489.72 li
417.72 489.36 li
416.94 489.06 li
416.04 488.76 li
415.08 488.46 li
414.06 488.16 li
414.12 488.16 li
412.98 487.86 li
413.04 487.86 li
411.84 487.62 li
409.656 487.005 407.453 486.801 405.24 486.42 cv
403.74 486.24 li
403.8 486.24 li
402.24 486.06 li
398.295 485.606 394.327 485.392 390.36 485.22 cv
388.5 485.22 li
388.56 485.22 li
386.64 485.16 li
384.6 485.16 li
384.48 484.98 li
384.78 485.16 li
381.06 485.16 li
379.2 485.22 li
377.4 485.28 li
375.6 485.4 li
375.66 485.4 li
373.92 485.46 li
367.152 486.012 360.003 486.639 353.52 488.76 cv
352.62 489.06 li
352.68 489.06 li
351.84 489.36 li
351.12 489.72 li
350.46 490.02 li
350.52 490.02 li
349.92 490.38 li
349.44 490.74 li
349.5 490.68 li
349.08 491.04 li
348.78 491.4 li
348.66 491.58 li
348.72 491.52 li
348.6 491.7 li
348.54 491.88 li
348.48 492.06 li
348.48 492 li
348.42 492.18 li
348.42 492.36 li
348.42 492.3 li
.92929 .879301 .889677 .799283 cmyk
f
gsave
57.12 510.96 mo
537.9 510.96 li
537.9 601.14 li
57.12 601.14 li
cp
eclp
57.12 601.14 mo
537.9 601.14 li
537.9 510.92 li
57.12 510.92 li
cp
3.0518e-5 3.0518e-5 3.0518e-5 3.0518e-5 cmyk
f
267.12 509.34 mo
267.18 508.92 li
267.24 508.5 li
270.026 499.219 298.785 499.245 301.5 508.5 cv
301.62 508.92 li
301.62 509.34 li
300.758 519.385 270.711 519.722 267.36 510.6 cv
267.24 510.18 li
267.18 509.76 li
cp
267.84 509.76 mo
267.84 509.7 li
267.9 510.06 li
268.02 510.42 li
267.96 510.36 li
268.14 510.78 li
268.14 510.72 li
268.5 511.44 li
268.5 511.38 li
268.74 511.74 li
269.4 512.4 li
269.34 512.34 li
269.76 512.7 li
269.7 512.7 li
270.54 513.3 li
271.02 513.6 li
271.02 513.54 li
271.5 513.84 li
273.929 515.177 276.696 515.794 279.42 516.18 cv
281.04 516.42 li
280.98 516.36 li
282.66 516.48 li
284.4 516.54 li
286.08 516.48 li
287.76 516.36 li
287.76 516.42 li
289.38 516.18 li
290.88 515.94 li
292.38 515.64 li
293.04 515.46 li
293.76 515.28 li
293.7 515.28 li
294.36 515.04 li
295.02 514.86 li
296.22 514.38 li
296.16 514.38 li
296.76 514.14 li
297.24 513.84 li
297.78 513.54 li
297.72 513.6 li
298.2 513.3 li
299.04 512.7 li
299.4 512.34 li
299.4 512.4 li
299.7 512.04 li
300 511.74 li
300.24 511.38 li
300.24 511.44 li
300.48 511.08 li
300.66 510.72 li
300.6 510.78 li
300.78 510.36 li
300.78 510.42 li
300.9 510.06 li
300.84 510.06 li
300.9 509.7 li
300.9 509.76 li
300.96 509.34 li
300.96 509.4 li
300.9 508.98 li
300.9 509.04 li
300.84 508.68 li
300.9 508.68 li
300.78 508.32 li
300.6 507.96 li
300.66 508.02 li
300.48 507.66 li
300.24 507.3 li
300.24 507.36 li
300 507 li
299.7 506.64 li
299.7 506.7 li
299.4 506.34 li
299.04 506.04 li
298.2 505.44 li
297.72 505.14 li
297.78 505.14 li
297.24 504.9 li
297.3 504.9 li
296.76 504.6 li
296.16 504.36 li
296.22 504.36 li
295.02 503.88 li
294.36 503.64 li
294.42 503.64 li
293.7 503.46 li
293.76 503.46 li
293.04 503.28 li
289.331 502.291 286.48 502.106 282.66 502.2 cv
280.98 502.32 li
281.04 502.32 li
279.42 502.5 li
276.059 503.106 272.956 503.742 270.12 505.74 cv
269.7 506.04 li
269.76 506.04 li
269.34 506.34 li
269.4 506.34 li
269.04 506.7 li
269.04 506.64 li
268.74 507 li
268.5 507.36 li
268.5 507.3 li
268.14 508.02 li
268.14 507.96 li
267.96 508.32 li
268.02 508.32 li
267.9 508.68 li
267.84 509.04 li
267.84 508.98 li
267.84 509.4 li
267.84 509.34 li
.92929 .879301 .889677 .799283 cmyk
f
214.56 502.2 mo
214.68 501.96 li
214.92 501.9 li
244.92 501.9 li
245.16 501.96 li
245.28 502.2 li
245.28 517.26 li
245.16 517.5 li
244.92 517.56 li
214.92 517.56 li
214.68 517.5 li
214.56 517.26 li
cp
215.22 517.26 mo
214.92 516.9 li
244.92 516.9 li
244.62 517.26 li
244.62 502.2 li
244.92 502.56 li
214.92 502.56 li
215.22 502.2 li
f
grestore
gsave
219.3 515.28 mo
236.88 515.28 li
236.88 510.96 li
219.3 510.96 li
cp
clp
1 /0 /CSD get_res sepcs
1 sep
XBRJBG+Calibri-Italic*1 [12 0 0 -12 0 0 ]msf
219.66 512.04 mo
(AM)
[6.96474 0 ]xsh
grestore
gsave
236.88 517.14 mo
240.96 517.14 li
240.96 510.96 li
236.88 510.96 li
cp
clp
1 /0 /CSD get_res sepcs
1 sep
XBRJBG+Calibri-Italic*1 [8.04 0 0 -8.04 0 0 ]msf
236.88 514.98 mo
(2)sh
grestore
gsave
57.12 510.96 mo
537.9 510.96 li
537.9 601.14 li
57.12 601.14 li
cp
eclp
267.48 509.7 mo
245.58 510.06 li
245.58 509.4 li
267.48 509.04 li
cp
249.48 512.28 mo
244.92 509.7 li
249.42 507.06 li
249.66 507 li
249.84 507.12 li
249.9 507.42 li
249.72 507.6 li
245.76 510 li
245.76 509.4 li
249.84 511.68 li
249.96 511.92 li
249.96 512.16 li
249.72 512.34 li
249.48 512.28 li
f
grestore
gsave
273.54 514.98 mo
289.74 514.98 li
289.74 510.96 li
273.54 510.96 li
cp
clp
1 /0 /CSD get_res sepcs
1 sep
XBRJBG+Calibri-Italic*1 [12 0 0 -12 0 0 ]msf
273.6 511.74 mo
(p:T)
[6.18729 3.23526 0 ]xsh
grestore
gsave
288.84 516.84 mo
292.92 516.84 li
292.92 510.96 li
288.84 510.96 li
cp
clp
1 /0 /CSD get_res sepcs
1 sep
XBRJBG+Calibri-Italic*1 [8.04 0 0 -8.04 0 0 ]msf
288.84 514.68 mo
(2)sh
grestore
gsave
57.12 510.96 mo
537.9 510.96 li
537.9 601.14 li
57.12 601.14 li
cp
eclp
135.66 510 mo
135.72 509.58 li
135.84 509.1 li
140.38 499.869 188.03 499.888 192.54 509.1 cv
192.66 509.58 li
192.72 510 li
192.66 510.48 li
191.267 515.915 174.21 517.575 169.86 517.68 cv
167.1 517.8 li
160.193 518.064 141.481 517.384 136.32 511.74 cv
135.84 510.9 li
135.72 510.48 li
cp
136.38 510.36 mo
136.38 510.3 li
136.62 511.02 li
136.62 510.96 li
136.86 511.32 li
137.16 511.68 li
137.16 511.62 li
137.52 511.98 li
137.94 512.34 li
137.94 512.28 li
138.42 512.64 li
138.96 513 li
138.96 512.94 li
139.56 513.3 li
140.22 513.6 li
140.94 513.9 li
141.72 514.2 li
142.56 514.44 li
143.46 514.74 li
143.4 514.74 li
144.36 514.98 li
146.158 515.475 147.83 515.754 149.64 516.12 cv
150.84 516.3 li
150.78 516.3 li
152.04 516.42 li
155.099 516.881 158.251 517.03 161.34 517.14 cv
164.22 517.2 li
164.16 517.2 li
167.04 517.14 li
168.48 517.08 li
171.24 516.96 li
171.18 516.96 li
172.56 516.84 li
173.82 516.72 li
175.14 516.6 li
176.34 516.42 li
177.6 516.3 li
177.54 516.3 li
178.74 516.12 li
180.55 515.754 182.222 515.475 184.02 514.98 cv
184.98 514.74 li
184.92 514.74 li
185.82 514.44 li
186.66 514.2 li
187.44 513.9 li
188.16 513.6 li
188.82 513.3 li
189.42 512.94 li
189.42 513 li
189.96 512.64 li
190.44 512.28 li
190.44 512.34 li
190.86 511.98 li
191.22 511.62 li
191.22 511.68 li
191.52 511.32 li
191.76 510.96 li
191.76 511.02 li
191.94 510.6 li
191.88 510.66 li
192 510.3 li
192 510.36 li
192 510 li
192 510.06 li
192 509.64 li
192 509.7 li
191.88 509.34 li
191.94 509.4 li
191.76 508.98 li
191.76 509.04 li
191.52 508.68 li
191.22 508.32 li
191.22 508.38 li
190.86 508.02 li
190.44 507.66 li
190.44 507.72 li
189.96 507.36 li
188.673 506.573 187.285 505.937 185.82 505.56 cv
184.92 505.26 li
184.98 505.26 li
184.02 505.02 li
182.231 504.555 180.577 504.187 178.74 503.94 cv
177.54 503.76 li
177.6 503.76 li
176.34 503.58 li
175.14 503.4 li
173.82 503.28 li
172.56 503.16 li
171.18 503.04 li
171.24 503.04 li
168.48 502.92 li
167.04 502.86 li
164.16 502.8 li
164.22 502.8 li
161.34 502.86 li
158.251 502.97 155.1 503.119 152.04 503.58 cv
150.78 503.7 li
150.84 503.7 li
149.64 503.94 li
147.803 504.187 146.149 504.555 144.36 505.02 cv
143.4 505.26 li
143.46 505.26 li
142.56 505.56 li
141.095 505.937 139.707 506.573 138.42 507.36 cv
137.94 507.72 li
137.94 507.66 li
137.52 508.02 li
137.16 508.38 li
137.16 508.32 li
136.86 508.68 li
136.62 509.04 li
136.62 508.98 li
136.44 509.4 li
136.5 509.34 li
136.38 509.7 li
136.38 509.64 li
136.38 510.06 li
136.38 510 li
f
grestore
gsave
150.12 516.6 mo
177.96 516.6 li
177.96 510.96 li
150.12 510.96 li
cp
clp
1 /0 /CSD get_res sepcs
1 sep
XBRJBG+Calibri-Italic*1 [12 0 0 -12 0 0 ]msf
150.12 513.36 mo
(null:T)
[6.18008 6.1801 2.76004 2.76006 3.22806 0 ]xsh
grestore
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: QJJAAA+Calibri-Italic AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.
systemdict begin
XBRJBG+Calibri-Italic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/three <1C60D8A8C9B7A0860A2B29FFF0866076007DFBCD885A9B78BC3F4BCC
DCAB2B9F64C548E961A213A6A55392A3EA189CFC128603E6F887D0BEF9912702
0238F1051D534CB439091CC05AEB75A0D4965C3D00923997835B8F6B3811FFDE
BB37FEDBFE1D70BEBF722569D411B53F6E1555E33FE0B325090417BB10FE261B
52967A6FCDCF63B43599B04FBA7C6F54CDA06FED3F83F65F71EDA328E6FA9947
921D79BC1FEE39FB4F4674D906C7AC9C89BD67746F91A9A878A3A2304515F77C
B4EE597F663C94C87AEBBC8E3F884F540A1369B20406CCC97085BEF38E34AACE
6428829C17890D1D43B4B4E8E3BF7A4191F24949CD4798410A5BC082AF4AEF78
47A1EBC06C6869CE83E3594EC9D893D73D596ABAC782A598CD374E50282D09D2
2257572F8ED05A55D073EB6D8EDB9B6CBED2436083E165D086D07038E7DB6FB5
2445DBBB7B349D56696BE2E38F5A342D19277D78AA060C8305B81599D990F936
41EDA8313E4B4D3D5AC49253E75CD2DA8305A80942497AA5374FA8ADE8FDA9FC
6DD74EB395EF9F33F2302BE4FDB1D747DAE6F48C8DB59E29E31BFADEE1734C6D
147F8B19EAE788FE9B5D96F0331CC7307C6FF5FD76FC3FC63E87AD3DD473B4C8
193301B5E29ED9763FDA0D98C95C8C29A4DE5B6A8AF47182DE9BFD293E269A95
D0FE5B4A454470460B29E7FA01347E111A73834262C269CD4FCFEBD3254B428C
FA7D8D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
XBRJBG+Calibri-Italic /Encoding get
dup 51 /three put
pop
%ADOEndSubsetFont
/XBRJBG+Calibri-Italic*1 
[32{/.notdef}rp /ellipsis 13{/.notdef}rp /period /.notdef /zero /one /two 
/three 6{/.notdef}rp /colon 6{/.notdef}rp /A 11{/.notdef}rp /M 6{/.notdef}rp 
/T 12{/.notdef}rp /a /.notdef /c /.notdef /e /f 
/g /.notdef /i 2{/.notdef}rp /l /m /n /.notdef 
/p /.notdef /r /.notdef /t /u /v /.notdef 
/x /y /z 133{/.notdef}rp]
XBRJBG+Calibri-Italic nf
XBRJBG+Calibri-Italic*1 [8.04 0 0 -8.04 0 0 ]msf
177.06 516.3 mo
(3)sh
gsave
57.12 510.96 mo
537.9 510.96 li
537.9 601.14 li
57.12 601.14 li
cp
eclp
214.92 510.54 mo
193.02 510.48 li
193.02 509.76 li
214.92 509.88 li
cp
196.86 512.76 mo
192.36 510.12 li
196.86 507.54 li
197.1 507.48 li
197.34 507.66 li
197.34 507.9 li
197.22 508.08 li
193.2 510.42 li
193.2 509.82 li
197.16 512.16 li
197.34 512.4 li
197.28 512.64 li
197.1 512.82 li
196.86 512.76 li
.92929 .879301 .889677 .799283 cmyk
f
grestore
244.62 543.54 mo
244.74 543.3 li
244.92 543.18 li
274.98 543.18 li
275.22 543.3 li
275.34 543.54 li
275.34 558.54 li
275.22 558.78 li
274.98 558.9 li
244.92 558.9 li
244.74 558.78 li
244.62 558.54 li
cp
245.28 558.54 mo
244.92 558.24 li
274.98 558.24 li
274.68 558.54 li
274.68 543.54 li
274.98 543.84 li
244.92 543.84 li
245.28 543.54 li
.92929 .879301 .889677 .799283 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
XBRJBG+Calibri-Italic*1 [12 0 0 -12 0 0 ]msf
251.7 555.12 mo
(AM)
[6.96474 0 ]xsh
233.64 550.68 mo
244.26 550.38 li
244.32 551.04 li
233.7 551.34 li
cp
240.36 548.22 mo
244.92 550.68 li
240.54 553.44 li
240.3 553.5 li
240.06 553.32 li
240.06 553.08 li
240.18 552.9 li
244.08 550.44 li
244.14 550.98 li
240.06 548.76 li
239.88 548.58 li
239.88 548.34 li
240.12 548.16 li
240.36 548.22 li
.92929 .879301 .889677 .799283 cmyk
f
71.82 551.46 mo
71.88 551.22 li
72.841 544.779 105.005 543.375 109.56 543.6 cv
111.84 543.6 li
111.9 543.84 li
111.6 543.6 li
113.64 543.6 li
163.986 544.417 164.006 558.477 113.64 559.26 cv
111.6 559.26 li
111.84 558.72 li
112.44 559.26 li
109.56 559.26 li
104.406 559.418 73.916 558.18 71.88 551.88 cv
71.88 551.7 li
cp
72.54 551.58 mo
72.48 551.58 li
72.54 551.76 li
72.54 551.7 li
72.6 551.88 li
72.66 552.06 li
72.66 552 li
72.78 552.24 li
72.78 552.18 li
73.02 552.54 li
73.38 552.9 li
73.38 552.84 li
73.62 553.08 li
73.62 553.02 li
73.86 553.2 li
75.89 554.63 80.076 555.655 82.5 556.14 cv
83.82 556.44 li
83.76 556.44 li
85.14 556.68 li
93.209 557.975 101.391 558.556 109.56 558.6 cv
111.6 558.6 li
111.36 559.2 li
110.82 558.6 li
113.64 558.6 li
118.056 558.545 122.501 558.395 126.9 558 cv
128.7 557.88 li
128.64 557.88 li
130.38 557.7 li
133.396 557.386 136.456 556.981 139.44 556.44 cv
140.76 556.14 li
140.7 556.14 li
141.96 555.9 li
143.16 555.6 li
143.1 555.6 li
144.24 555.3 li
145.26 555 li
145.2 555 li
146.16 554.7 li
147.06 554.4 li
147 554.4 li
147.84 554.04 li
147.78 554.04 li
148.5 553.74 li
149.1 553.38 li
149.34 553.2 li
149.64 553.02 li
149.58 553.08 li
149.82 552.9 li
150.36 552.36 li
150.3 552.36 li
150.48 552.18 li
150.42 552.24 li
150.54 552.06 li
150.6 551.88 li
150.66 551.7 li
150.66 551.76 li
150.72 551.58 li
150.72 551.64 li
150.72 551.4 li
150.72 551.46 li
150.72 551.28 li
150.72 551.34 li
150.66 551.1 li
150.66 551.16 li
150.54 550.8 li
150.54 550.86 li
150.42 550.68 li
150.48 550.68 li
150.3 550.5 li
150.36 550.5 li
150 550.14 li
150 550.2 li
149.82 550.02 li
149.58 549.84 li
149.64 549.84 li
149.34 549.66 li
149.1 549.48 li
148.5 549.12 li
148.5 549.18 li
147.78 548.82 li
147.84 548.82 li
147 548.46 li
147.06 548.52 li
146.16 548.16 li
145.26 547.86 li
144.24 547.56 li
143.1 547.26 li
143.16 547.26 li
141.96 546.96 li
140.7 546.72 li
140.76 546.72 li
139.44 546.48 li
135.949 545.772 132.246 545.341 128.7 544.98 cv
126.9 544.86 li
126.96 544.86 li
125.16 544.74 li
121.324 544.458 117.484 544.317 113.64 544.26 cv
111.36 544.26 li
111.3 544.02 li
111.6 544.26 li
109.56 544.26 li
99.193 544.494 86.976 545.007 77.04 548.16 cv
76.2 548.52 li
76.2 548.46 li
75.42 548.82 li
74.7 549.18 li
74.7 549.12 li
74.1 549.48 li
73.38 550.02 li
73.2 550.2 li
73.2 550.14 li
73.02 550.32 li
72.66 550.86 li
72.66 550.8 li
72.54 551.16 li
72.54 551.1 li
72.48 551.34 li
72.54 551.28 li
72.48 551.46 li
72.48 551.4 li
f
1 /0 /CSD get_res sepcs
1 sep
XBRJBG+Calibri-Italic*1 [12 0 0 -12 0 0 ]msf
76.98 553.74 mo
(x.name:x.type)
[5.20319 3.03118 6.17529 6.17529 9.49921 5.74316 3.22327 5.20318 2.75519 4.02728 5.37128 6.17529 
0 ]xsh
151.02 551.04 mo
153.72 550.98 li
153.72 551.64 li
151.08 551.76 li
cp
155.7 550.92 mo
158.4 550.8 li
158.4 551.52 li
155.7 551.58 li
cp
160.38 550.74 mo
161.64 550.74 li
161.64 551.4 li
160.38 551.46 li
cp
157.74 548.58 mo
162.3 551.04 li
157.92 553.8 li
157.68 553.86 li
157.44 553.68 li
157.38 553.44 li
157.56 553.26 li
161.46 550.8 li
161.52 551.34 li
157.44 549.12 li
157.26 548.94 li
157.26 548.7 li
157.5 548.52 li
157.74 548.58 li
.92929 .879301 .889677 .799283 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
XBRJBG+Calibri-Italic*1 [12 0 0 -12 0 0 ]msf
170.82 554.64 mo
(receiver:T)
[4.13643 5.75636 4.92 5.76598 2.76843 5.37239 5.75636 4.13643 3.23647 0 ]xsh
162 551.22 mo
162 550.98 li
162.12 550.5 li
163.775 546.167 178.603 544.536 182.46 544.08 cv
185.7 543.84 li
197.317 542.942 210.585 543.187 222.06 545.34 cv
223.32 545.58 li
224.46 545.82 li
225.6 546.12 li
226.68 546.36 li
229.259 547.031 237.068 549.736 232.74 553.32 cv
232.26 553.68 li
231.66 554.1 li
224.213 557.855 211.688 558.585 203.46 558.96 cv
201.66 559.02 li
198 559.02 li
198 558.36 li
198 559.02 li
196.14 559.02 li
191.299 559.199 163.619 557.849 162.06 551.64 cv
162 551.46 li
cp
162.66 551.4 mo
162.66 551.34 li
162.66 551.52 li
162.72 551.7 li
162.72 551.64 li
162.78 551.82 li
163.02 552.18 li
162.96 552.12 li
163.32 552.48 li
163.26 552.48 li
163.68 552.84 li
163.62 552.78 li
164.1 553.14 li
164.64 553.5 li
165.3 553.8 li
165.24 553.8 li
165.96 554.16 li
166.74 554.46 li
167.58 554.76 li
168.54 555.06 li
168.48 555.06 li
169.5 555.36 li
176.228 557.229 183.845 557.859 190.8 558.24 cv
192.6 558.3 li
192.54 558.3 li
194.34 558.36 li
196.14 558.36 li
200.64 558.42 li
200.64 559.02 li
195.36 559.02 li
195.36 558.42 li
199.8 558.36 li
201.66 558.36 li
203.4 558.3 li
205.2 558.24 li
205.14 558.24 li
206.88 558.12 li
214.285 557.695 223.085 556.88 230.04 554.16 cv
230.76 553.8 li
230.7 553.8 li
231.36 553.5 li
231.9 553.14 li
232.38 552.78 li
232.32 552.84 li
232.74 552.48 li
232.68 552.48 li
232.98 552.12 li
232.98 552.18 li
233.22 551.82 li
233.16 551.82 li
233.28 551.64 li
233.28 551.7 li
233.34 551.46 li
233.28 551.52 li
233.34 551.34 li
233.34 551.4 li
233.34 551.16 li
233.34 551.22 li
233.34 551.04 li
233.28 550.86 li
233.28 550.92 li
233.28 550.74 li
233.16 550.56 li
233.22 550.62 li
232.98 550.2 li
232.98 550.26 li
232.68 549.9 li
232.74 549.96 li
232.32 549.54 li
232.38 549.6 li
231.9 549.24 li
231.36 548.88 li
230.7 548.58 li
230.76 548.58 li
230.04 548.22 li
230.04 548.28 li
229.26 547.92 li
228.42 547.62 li
222.011 545.559 215.255 544.812 208.56 544.38 cv
206.88 544.26 li
205.2 544.2 li
196.285 543.751 186.939 544.134 178.08 545.28 cv
175.32 545.76 li
175.38 545.76 li
174.06 545.94 li
172.8 546.24 li
172.86 546.24 li
171.66 546.48 li
170.52 546.72 li
168.48 547.32 li
168.54 547.32 li
167.58 547.62 li
166.74 547.92 li
165.96 548.28 li
165.96 548.22 li
165.24 548.58 li
165.3 548.58 li
164.64 548.94 li
164.64 548.88 li
164.1 549.24 li
163.62 549.6 li
163.68 549.54 li
163.26 549.96 li
163.32 549.9 li
162.96 550.26 li
163.02 550.2 li
162.78 550.62 li
162.78 550.56 li
162.72 550.74 li
162.66 550.92 li
162.66 550.86 li
162.66 551.22 li
162.66 551.16 li
.92929 .879301 .889677 .799283 cmyk
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/XBRJBF+Calibri*1 uf
/XBRJBF+Calibri uf
/HIBBAA+Calibri uf
/XBRJBH+Calibri-Italic*1 uf
/XBRJBH+Calibri-Italic uf
/GFNBAA+Calibri-Italic uf
/XBRJBE+Calibri*1 uf
/XBRJBE+Calibri uf
/PBAAAA+Calibri uf
/XBRJBG+Calibri-Italic*1 uf
/XBRJBG+Calibri-Italic uf
/QJJAAA+Calibri-Italic uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
